#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PropTypeDef:
  HP = 1
  MP = 2
  HP_MAX = 3
  MP_MAX = 4
  PHYSIC_ATTACK_MIN = 5
  PHYSIC_ATTACK_MAX = 6
  MAGIC_ATTACK_MIN = 7
  MAGIC_ATTACK_MAX = 8
  PHYSIC_DEFEND_MIN = 9
  PHYSIC_DEFEND_MAX = 10
  MAGIC_DEFEND_MIN = 11
  MAGIC_DEFEND_MAX = 12
  CRIT = 13
  HIT = 14
  AVOID = 15
  ATTACK_SPEED = 16
  ATTACK_SING = 17
  ATTACK_INTERVAL = 18
  ATTACK_DISTANCE = 19
  MOVE_SPEED = 20
  HURT_ABSORB = 21
  HP_ABSORB = 22

  _VALUES_TO_NAMES = {
    1: "HP",
    2: "MP",
    3: "HP_MAX",
    4: "MP_MAX",
    5: "PHYSIC_ATTACK_MIN",
    6: "PHYSIC_ATTACK_MAX",
    7: "MAGIC_ATTACK_MIN",
    8: "MAGIC_ATTACK_MAX",
    9: "PHYSIC_DEFEND_MIN",
    10: "PHYSIC_DEFEND_MAX",
    11: "MAGIC_DEFEND_MIN",
    12: "MAGIC_DEFEND_MAX",
    13: "CRIT",
    14: "HIT",
    15: "AVOID",
    16: "ATTACK_SPEED",
    17: "ATTACK_SING",
    18: "ATTACK_INTERVAL",
    19: "ATTACK_DISTANCE",
    20: "MOVE_SPEED",
    21: "HURT_ABSORB",
    22: "HP_ABSORB",
  }

  _NAMES_TO_VALUES = {
    "HP": 1,
    "MP": 2,
    "HP_MAX": 3,
    "MP_MAX": 4,
    "PHYSIC_ATTACK_MIN": 5,
    "PHYSIC_ATTACK_MAX": 6,
    "MAGIC_ATTACK_MIN": 7,
    "MAGIC_ATTACK_MAX": 8,
    "PHYSIC_DEFEND_MIN": 9,
    "PHYSIC_DEFEND_MAX": 10,
    "MAGIC_DEFEND_MIN": 11,
    "MAGIC_DEFEND_MAX": 12,
    "CRIT": 13,
    "HIT": 14,
    "AVOID": 15,
    "ATTACK_SPEED": 16,
    "ATTACK_SING": 17,
    "ATTACK_INTERVAL": 18,
    "ATTACK_DISTANCE": 19,
    "MOVE_SPEED": 20,
    "HURT_ABSORB": 21,
    "HP_ABSORB": 22,
  }

class ClientCmd:
  LOGIN = 1
  RAND_NAME = 8
  DEL_ROLE = 9
  CREATE_ROLE = 10
  SELECT_ROLE = 11
  ENTER_MAP = 12
  MOVE = 13
  QUERY_SKILL = 14
  LEARN_SKILL = 15
  USE_SKILL = 16
  QUERY_TASK_LIST = 17
  UPDATE_TASK_STATUS = 18
  QUERY_PKG = 19
  ARRANGE_PKG = 20
  QUERY_EQUIP = 21
  EQUIP_ITEM = 22
  UNEQUIP_ITEM = 23
  THROW_ITEM = 24
  PICKUP_ITEM = 25
  STRENGTHEN_ITEM = 26
  CLICK_NPC = 27
  TRANSFER_OPS = 28
  GET_FRIENDLIST = 29
  FRIENDLIST_OPS = 30
  CHAT_OPS = 31
  SERVER_CALLBACK = 50
  USE_ITEM = 51
  DIEJIA_ITEM = 52
  UPDATE_SKILL_POS = 53
  MAKE_ITEM = 54
  INHERIT_ITEM = 55
  REPO_ITEM_OPS = 56
  EXCHANGE_OPS = 57
  MONEY_BANK_QUERY = 58
  MONEY_BANK_OPS = 59
  ITEM_EXTRA_OPS = 60
  AUCTION_OPS = 61
  ITEM_SALE_OPS = 62
  GOLD_BUY_OPS = 63
  GET_TEAMLIST = 70
  TEAMLIST_OPS = 71
  GET_GUILDINFO = 80
  GET_USER_GUILD_INFO = 81
  GUILD_OPS = 82
  GUILD_INFO_OPS = 83
  GUILD_LEVEL_OPS = 84
  GUILD_WAR_OPS = 85
  GUILD_CITYWAR_OPS = 86
  GUILD_RANKWAR_OPS = 87
  COLLECT_OPS = 90
  TRANSFER_POINT_OPS = 91
  PET_QUERY = 100
  PET_EGG_START = 101
  PET_EGG_COMPLETE = 102
  PET_FEED = 103
  PET_OUT = 104
  PET_IN = 105
  BROTHER_QUERY = 110
  BROTHER_OPS = 111
  MARRIAGE_OPS = 120
  ARENA_OPS = 130
  QIECUO_OPS = 131
  ATTACK_MODE_OPS = 132
  HELP_ATTACK_OPS = 133
  XIBAI_OPS = 134
  MAIL_OPS = 140
  RANK_OPS = 150
  HEART_BEAT = 160
  DAILY_LOGIN_OPS = 170

  _VALUES_TO_NAMES = {
    1: "LOGIN",
    8: "RAND_NAME",
    9: "DEL_ROLE",
    10: "CREATE_ROLE",
    11: "SELECT_ROLE",
    12: "ENTER_MAP",
    13: "MOVE",
    14: "QUERY_SKILL",
    15: "LEARN_SKILL",
    16: "USE_SKILL",
    17: "QUERY_TASK_LIST",
    18: "UPDATE_TASK_STATUS",
    19: "QUERY_PKG",
    20: "ARRANGE_PKG",
    21: "QUERY_EQUIP",
    22: "EQUIP_ITEM",
    23: "UNEQUIP_ITEM",
    24: "THROW_ITEM",
    25: "PICKUP_ITEM",
    26: "STRENGTHEN_ITEM",
    27: "CLICK_NPC",
    28: "TRANSFER_OPS",
    29: "GET_FRIENDLIST",
    30: "FRIENDLIST_OPS",
    31: "CHAT_OPS",
    50: "SERVER_CALLBACK",
    51: "USE_ITEM",
    52: "DIEJIA_ITEM",
    53: "UPDATE_SKILL_POS",
    54: "MAKE_ITEM",
    55: "INHERIT_ITEM",
    56: "REPO_ITEM_OPS",
    57: "EXCHANGE_OPS",
    58: "MONEY_BANK_QUERY",
    59: "MONEY_BANK_OPS",
    60: "ITEM_EXTRA_OPS",
    61: "AUCTION_OPS",
    62: "ITEM_SALE_OPS",
    63: "GOLD_BUY_OPS",
    70: "GET_TEAMLIST",
    71: "TEAMLIST_OPS",
    80: "GET_GUILDINFO",
    81: "GET_USER_GUILD_INFO",
    82: "GUILD_OPS",
    83: "GUILD_INFO_OPS",
    84: "GUILD_LEVEL_OPS",
    85: "GUILD_WAR_OPS",
    86: "GUILD_CITYWAR_OPS",
    87: "GUILD_RANKWAR_OPS",
    90: "COLLECT_OPS",
    91: "TRANSFER_POINT_OPS",
    100: "PET_QUERY",
    101: "PET_EGG_START",
    102: "PET_EGG_COMPLETE",
    103: "PET_FEED",
    104: "PET_OUT",
    105: "PET_IN",
    110: "BROTHER_QUERY",
    111: "BROTHER_OPS",
    120: "MARRIAGE_OPS",
    130: "ARENA_OPS",
    131: "QIECUO_OPS",
    132: "ATTACK_MODE_OPS",
    133: "HELP_ATTACK_OPS",
    134: "XIBAI_OPS",
    140: "MAIL_OPS",
    150: "RANK_OPS",
    160: "HEART_BEAT",
    170: "DAILY_LOGIN_OPS",
  }

  _NAMES_TO_VALUES = {
    "LOGIN": 1,
    "RAND_NAME": 8,
    "DEL_ROLE": 9,
    "CREATE_ROLE": 10,
    "SELECT_ROLE": 11,
    "ENTER_MAP": 12,
    "MOVE": 13,
    "QUERY_SKILL": 14,
    "LEARN_SKILL": 15,
    "USE_SKILL": 16,
    "QUERY_TASK_LIST": 17,
    "UPDATE_TASK_STATUS": 18,
    "QUERY_PKG": 19,
    "ARRANGE_PKG": 20,
    "QUERY_EQUIP": 21,
    "EQUIP_ITEM": 22,
    "UNEQUIP_ITEM": 23,
    "THROW_ITEM": 24,
    "PICKUP_ITEM": 25,
    "STRENGTHEN_ITEM": 26,
    "CLICK_NPC": 27,
    "TRANSFER_OPS": 28,
    "GET_FRIENDLIST": 29,
    "FRIENDLIST_OPS": 30,
    "CHAT_OPS": 31,
    "SERVER_CALLBACK": 50,
    "USE_ITEM": 51,
    "DIEJIA_ITEM": 52,
    "UPDATE_SKILL_POS": 53,
    "MAKE_ITEM": 54,
    "INHERIT_ITEM": 55,
    "REPO_ITEM_OPS": 56,
    "EXCHANGE_OPS": 57,
    "MONEY_BANK_QUERY": 58,
    "MONEY_BANK_OPS": 59,
    "ITEM_EXTRA_OPS": 60,
    "AUCTION_OPS": 61,
    "ITEM_SALE_OPS": 62,
    "GOLD_BUY_OPS": 63,
    "GET_TEAMLIST": 70,
    "TEAMLIST_OPS": 71,
    "GET_GUILDINFO": 80,
    "GET_USER_GUILD_INFO": 81,
    "GUILD_OPS": 82,
    "GUILD_INFO_OPS": 83,
    "GUILD_LEVEL_OPS": 84,
    "GUILD_WAR_OPS": 85,
    "GUILD_CITYWAR_OPS": 86,
    "GUILD_RANKWAR_OPS": 87,
    "COLLECT_OPS": 90,
    "TRANSFER_POINT_OPS": 91,
    "PET_QUERY": 100,
    "PET_EGG_START": 101,
    "PET_EGG_COMPLETE": 102,
    "PET_FEED": 103,
    "PET_OUT": 104,
    "PET_IN": 105,
    "BROTHER_QUERY": 110,
    "BROTHER_OPS": 111,
    "MARRIAGE_OPS": 120,
    "ARENA_OPS": 130,
    "QIECUO_OPS": 131,
    "ATTACK_MODE_OPS": 132,
    "HELP_ATTACK_OPS": 133,
    "XIBAI_OPS": 134,
    "MAIL_OPS": 140,
    "RANK_OPS": 150,
    "HEART_BEAT": 160,
    "DAILY_LOGIN_OPS": 170,
  }

class ServerCmd:
  USER_INFO = 1
  FRIENDLIST = 2
  LOGOUT = 3
  ERROR_MSG = 4
  RELOGIN = 5
  RAND_NAME = 8
  DEL_ROLE = 9
  CREATE_ROLE_RET = 10
  ENTER_MAP = 11
  LEAVE_MAP = 12
  MOVE = 13
  UPDATE_EXP = 14
  QUERY_SKILL = 15
  LEARN_SKILL = 16
  USE_SKILL = 17
  HURT_RESULT = 18
  MONSTER_ENTER_MAP = 19
  QUERY_TASK_LIST = 20
  UPDATE_TASK_STATUS = 21
  UPDATE_PROP = 22
  SYNC_HPMP = 23
  QUERY_PKG = 24
  QUERY_EQUIP = 25
  EQUIP_ITEM = 26
  UNEQUIP_ITEM = 27
  ITEM_ENTER_MAP = 28
  THROW_ITEM = 29
  PICKUP_ITEM = 30
  STRENGTHEN_ITEM = 31
  NPC_ENTER_MAP = 32
  CLICK_NPC = 33
  FRIENDLIST_MSG = 34
  FRIEHND_MSG = 35
  CHAT_MSG = 36
  TEAMLIST_MSG = 37
  TEAM_MSG = 38
  GUILDINFO_MSG = 39
  GUILD_INFO_LIST_MSG = 40
  GUILD_OPS_MSG = 41
  GUILD_INFO_MSG = 42
  GUILD_LEVEL_MSG = 43
  GUILD_WAR_OPS = 44
  GUILD_RANKWAR_OPS = 45
  CHANGE_APPR = 46
  GUILD_CITYWAR_MSG = 47
  SHOW_TASK_PANEL = 50
  USE_ITEM = 51
  DIEJIA_ITEM = 52
  UPDATE_SKILL_POS = 53
  MAKE_ITEM = 54
  INHERIT_ITEM = 55
  UPDATE_BUFF = 56
  MONSTER_BURST_ITEMS = 57
  REPO_ITEM_OPS = 58
  EXCHANGE_OPS = 59
  MONEY_BANK_QUERY = 60
  MONEY_BANK_OPS = 61
  ITEM_EXTRA_OPS = 62
  AUCTION_OPS = 63
  ITEM_SALE_OPS = 64
  GOLD_BUY_OPS = 65
  UPDATE_PET_EXP = 100
  PET_QUERY = 101
  PET_OUT = 102
  PET_IN = 103
  SHOW_PLAY = 110
  SHOW_UI = 111
  COLLECT_OPS = 120
  COPYMAP_START = 130
  COPYMAP_END = 131
  BROTHER_OPS_MSG = 132
  MARRIAGE_OPS_MSG = 150
  MAIL_OPS_MSG = 160
  ARENA_OPS = 170
  QIECUO_OPS = 171
  ATTACK_MODE_OPS = 172
  PK_SIN_UPDATE_OPS = 173
  HELP_ATTACK_OPS = 174
  REBORN = 175
  XIBAI_OPS = 176
  RANK_OPS_MSG = 177
  SHOW_EFFECT = 180
  HEART_BEAT = 190
  DAILY_LOGIN_OPS_MSG = 200

  _VALUES_TO_NAMES = {
    1: "USER_INFO",
    2: "FRIENDLIST",
    3: "LOGOUT",
    4: "ERROR_MSG",
    5: "RELOGIN",
    8: "RAND_NAME",
    9: "DEL_ROLE",
    10: "CREATE_ROLE_RET",
    11: "ENTER_MAP",
    12: "LEAVE_MAP",
    13: "MOVE",
    14: "UPDATE_EXP",
    15: "QUERY_SKILL",
    16: "LEARN_SKILL",
    17: "USE_SKILL",
    18: "HURT_RESULT",
    19: "MONSTER_ENTER_MAP",
    20: "QUERY_TASK_LIST",
    21: "UPDATE_TASK_STATUS",
    22: "UPDATE_PROP",
    23: "SYNC_HPMP",
    24: "QUERY_PKG",
    25: "QUERY_EQUIP",
    26: "EQUIP_ITEM",
    27: "UNEQUIP_ITEM",
    28: "ITEM_ENTER_MAP",
    29: "THROW_ITEM",
    30: "PICKUP_ITEM",
    31: "STRENGTHEN_ITEM",
    32: "NPC_ENTER_MAP",
    33: "CLICK_NPC",
    34: "FRIENDLIST_MSG",
    35: "FRIEHND_MSG",
    36: "CHAT_MSG",
    37: "TEAMLIST_MSG",
    38: "TEAM_MSG",
    39: "GUILDINFO_MSG",
    40: "GUILD_INFO_LIST_MSG",
    41: "GUILD_OPS_MSG",
    42: "GUILD_INFO_MSG",
    43: "GUILD_LEVEL_MSG",
    44: "GUILD_WAR_OPS",
    45: "GUILD_RANKWAR_OPS",
    46: "CHANGE_APPR",
    47: "GUILD_CITYWAR_MSG",
    50: "SHOW_TASK_PANEL",
    51: "USE_ITEM",
    52: "DIEJIA_ITEM",
    53: "UPDATE_SKILL_POS",
    54: "MAKE_ITEM",
    55: "INHERIT_ITEM",
    56: "UPDATE_BUFF",
    57: "MONSTER_BURST_ITEMS",
    58: "REPO_ITEM_OPS",
    59: "EXCHANGE_OPS",
    60: "MONEY_BANK_QUERY",
    61: "MONEY_BANK_OPS",
    62: "ITEM_EXTRA_OPS",
    63: "AUCTION_OPS",
    64: "ITEM_SALE_OPS",
    65: "GOLD_BUY_OPS",
    100: "UPDATE_PET_EXP",
    101: "PET_QUERY",
    102: "PET_OUT",
    103: "PET_IN",
    110: "SHOW_PLAY",
    111: "SHOW_UI",
    120: "COLLECT_OPS",
    130: "COPYMAP_START",
    131: "COPYMAP_END",
    132: "BROTHER_OPS_MSG",
    150: "MARRIAGE_OPS_MSG",
    160: "MAIL_OPS_MSG",
    170: "ARENA_OPS",
    171: "QIECUO_OPS",
    172: "ATTACK_MODE_OPS",
    173: "PK_SIN_UPDATE_OPS",
    174: "HELP_ATTACK_OPS",
    175: "REBORN",
    176: "XIBAI_OPS",
    177: "RANK_OPS_MSG",
    180: "SHOW_EFFECT",
    190: "HEART_BEAT",
    200: "DAILY_LOGIN_OPS_MSG",
  }

  _NAMES_TO_VALUES = {
    "USER_INFO": 1,
    "FRIENDLIST": 2,
    "LOGOUT": 3,
    "ERROR_MSG": 4,
    "RELOGIN": 5,
    "RAND_NAME": 8,
    "DEL_ROLE": 9,
    "CREATE_ROLE_RET": 10,
    "ENTER_MAP": 11,
    "LEAVE_MAP": 12,
    "MOVE": 13,
    "UPDATE_EXP": 14,
    "QUERY_SKILL": 15,
    "LEARN_SKILL": 16,
    "USE_SKILL": 17,
    "HURT_RESULT": 18,
    "MONSTER_ENTER_MAP": 19,
    "QUERY_TASK_LIST": 20,
    "UPDATE_TASK_STATUS": 21,
    "UPDATE_PROP": 22,
    "SYNC_HPMP": 23,
    "QUERY_PKG": 24,
    "QUERY_EQUIP": 25,
    "EQUIP_ITEM": 26,
    "UNEQUIP_ITEM": 27,
    "ITEM_ENTER_MAP": 28,
    "THROW_ITEM": 29,
    "PICKUP_ITEM": 30,
    "STRENGTHEN_ITEM": 31,
    "NPC_ENTER_MAP": 32,
    "CLICK_NPC": 33,
    "FRIENDLIST_MSG": 34,
    "FRIEHND_MSG": 35,
    "CHAT_MSG": 36,
    "TEAMLIST_MSG": 37,
    "TEAM_MSG": 38,
    "GUILDINFO_MSG": 39,
    "GUILD_INFO_LIST_MSG": 40,
    "GUILD_OPS_MSG": 41,
    "GUILD_INFO_MSG": 42,
    "GUILD_LEVEL_MSG": 43,
    "GUILD_WAR_OPS": 44,
    "GUILD_RANKWAR_OPS": 45,
    "CHANGE_APPR": 46,
    "GUILD_CITYWAR_MSG": 47,
    "SHOW_TASK_PANEL": 50,
    "USE_ITEM": 51,
    "DIEJIA_ITEM": 52,
    "UPDATE_SKILL_POS": 53,
    "MAKE_ITEM": 54,
    "INHERIT_ITEM": 55,
    "UPDATE_BUFF": 56,
    "MONSTER_BURST_ITEMS": 57,
    "REPO_ITEM_OPS": 58,
    "EXCHANGE_OPS": 59,
    "MONEY_BANK_QUERY": 60,
    "MONEY_BANK_OPS": 61,
    "ITEM_EXTRA_OPS": 62,
    "AUCTION_OPS": 63,
    "ITEM_SALE_OPS": 64,
    "GOLD_BUY_OPS": 65,
    "UPDATE_PET_EXP": 100,
    "PET_QUERY": 101,
    "PET_OUT": 102,
    "PET_IN": 103,
    "SHOW_PLAY": 110,
    "SHOW_UI": 111,
    "COLLECT_OPS": 120,
    "COPYMAP_START": 130,
    "COPYMAP_END": 131,
    "BROTHER_OPS_MSG": 132,
    "MARRIAGE_OPS_MSG": 150,
    "MAIL_OPS_MSG": 160,
    "ARENA_OPS": 170,
    "QIECUO_OPS": 171,
    "ATTACK_MODE_OPS": 172,
    "PK_SIN_UPDATE_OPS": 173,
    "HELP_ATTACK_OPS": 174,
    "REBORN": 175,
    "XIBAI_OPS": 176,
    "RANK_OPS_MSG": 177,
    "SHOW_EFFECT": 180,
    "HEART_BEAT": 190,
    "DAILY_LOGIN_OPS_MSG": 200,
  }

class GuildLevelClientCmd:
  UP_GUILD_LEVEL = 0
  UP_GUILD_EXP = 1

  _VALUES_TO_NAMES = {
    0: "UP_GUILD_LEVEL",
    1: "UP_GUILD_EXP",
  }

  _NAMES_TO_VALUES = {
    "UP_GUILD_LEVEL": 0,
    "UP_GUILD_EXP": 1,
  }

class GuildInfoClientCmd:
  GET_GUILD_ALL = 0
  GET_GUILD_BY_NAME = 1

  _VALUES_TO_NAMES = {
    0: "GET_GUILD_ALL",
    1: "GET_GUILD_BY_NAME",
  }

  _NAMES_TO_VALUES = {
    "GET_GUILD_ALL": 0,
    "GET_GUILD_BY_NAME": 1,
  }

class GuildOpsClientCmd:
  CREATE_GUILD = 0
  REQUEST_ADD_GUILD = 1
  VERIFY_REQUEST_ADD_GUILD = 2
  REFUSE_REQUEST_ADD_GUILD = 3
  INVITE_ADD_GUILD = 4
  VERIFY_INVIT_ADD_GUILD = 5
  REFUSE_INVITT_ADD_GUILD = 6
  EXIT_GUILD = 7
  DEL_GUILD_MEMBER = 8
  UP_GUILD_LEADER = 9
  UP_GUILD_SECOND_LEADER = 10
  UP_MEMBER = 11
  OPEN_COPY_MAP = 12
  ENTER_COPY_MAP = 13

  _VALUES_TO_NAMES = {
    0: "CREATE_GUILD",
    1: "REQUEST_ADD_GUILD",
    2: "VERIFY_REQUEST_ADD_GUILD",
    3: "REFUSE_REQUEST_ADD_GUILD",
    4: "INVITE_ADD_GUILD",
    5: "VERIFY_INVIT_ADD_GUILD",
    6: "REFUSE_INVITT_ADD_GUILD",
    7: "EXIT_GUILD",
    8: "DEL_GUILD_MEMBER",
    9: "UP_GUILD_LEADER",
    10: "UP_GUILD_SECOND_LEADER",
    11: "UP_MEMBER",
    12: "OPEN_COPY_MAP",
    13: "ENTER_COPY_MAP",
  }

  _NAMES_TO_VALUES = {
    "CREATE_GUILD": 0,
    "REQUEST_ADD_GUILD": 1,
    "VERIFY_REQUEST_ADD_GUILD": 2,
    "REFUSE_REQUEST_ADD_GUILD": 3,
    "INVITE_ADD_GUILD": 4,
    "VERIFY_INVIT_ADD_GUILD": 5,
    "REFUSE_INVITT_ADD_GUILD": 6,
    "EXIT_GUILD": 7,
    "DEL_GUILD_MEMBER": 8,
    "UP_GUILD_LEADER": 9,
    "UP_GUILD_SECOND_LEADER": 10,
    "UP_MEMBER": 11,
    "OPEN_COPY_MAP": 12,
    "ENTER_COPY_MAP": 13,
  }

class GuildPostCmd:
  MEMBER = 0
  GUILD_LEADER = 1
  GUILD_SECOND_LEADER = 2

  _VALUES_TO_NAMES = {
    0: "MEMBER",
    1: "GUILD_LEADER",
    2: "GUILD_SECOND_LEADER",
  }

  _NAMES_TO_VALUES = {
    "MEMBER": 0,
    "GUILD_LEADER": 1,
    "GUILD_SECOND_LEADER": 2,
  }

class GuildLevelCmd:
  GUILD_LEVRL_1 = 0
  GUILD_LEVRL_2 = 1
  GUILD_LEVRL_3 = 2
  GUILD_LEVRL_4 = 3
  GUILD_LEVRL_5 = 4
  GUILD_LEVRL_6 = 5
  GUILD_LEVRL_7 = 6

  _VALUES_TO_NAMES = {
    0: "GUILD_LEVRL_1",
    1: "GUILD_LEVRL_2",
    2: "GUILD_LEVRL_3",
    3: "GUILD_LEVRL_4",
    4: "GUILD_LEVRL_5",
    5: "GUILD_LEVRL_6",
    6: "GUILD_LEVRL_7",
  }

  _NAMES_TO_VALUES = {
    "GUILD_LEVRL_1": 0,
    "GUILD_LEVRL_2": 1,
    "GUILD_LEVRL_3": 2,
    "GUILD_LEVRL_4": 3,
    "GUILD_LEVRL_5": 4,
    "GUILD_LEVRL_6": 5,
    "GUILD_LEVRL_7": 6,
  }

class TaskStatus:
  INIT = 0
  ACCEPT = 1
  DONE = 2
  FINISH = 3

  _VALUES_TO_NAMES = {
    0: "INIT",
    1: "ACCEPT",
    2: "DONE",
    3: "FINISH",
  }

  _NAMES_TO_VALUES = {
    "INIT": 0,
    "ACCEPT": 1,
    "DONE": 2,
    "FINISH": 3,
  }

class TaskTypeDef:
  MAIN_TASK = 0
  DAILY_TASK = 1
  BRANCH_TASK = 2

  _VALUES_TO_NAMES = {
    0: "MAIN_TASK",
    1: "DAILY_TASK",
    2: "BRANCH_TASK",
  }

  _NAMES_TO_VALUES = {
    "MAIN_TASK": 0,
    "DAILY_TASK": 1,
    "BRANCH_TASK": 2,
  }

class TaskActionDef:
  NONE_ACTION = 0
  CHAT_NPC = 1
  KILL_MONSTER = 2
  EXPLORE = 3
  COLLECT = 4

  _VALUES_TO_NAMES = {
    0: "NONE_ACTION",
    1: "CHAT_NPC",
    2: "KILL_MONSTER",
    3: "EXPLORE",
    4: "COLLECT",
  }

  _NAMES_TO_VALUES = {
    "NONE_ACTION": 0,
    "CHAT_NPC": 1,
    "KILL_MONSTER": 2,
    "EXPLORE": 3,
    "COLLECT": 4,
  }

class ECOLOR:
  BLUE = 1
  YELLOW = 2

  _VALUES_TO_NAMES = {
    1: "BLUE",
    2: "YELLOW",
  }

  _NAMES_TO_VALUES = {
    "BLUE": 1,
    "YELLOW": 2,
  }

class FriendOpsClientCmd:
  INVITE_ADD_LISTFRIEND = 0
  VERIFY_ADD_LISTFRIEND = 1
  REFUSE_ADD_LISTFRIEND = 2
  DEL_LISTFRIEND = 3
  ADD_ENEMY = 4
  DEL_ENEMY = 5
  ADD_SHIELD = 6
  DEL_SHIELD = 7

  _VALUES_TO_NAMES = {
    0: "INVITE_ADD_LISTFRIEND",
    1: "VERIFY_ADD_LISTFRIEND",
    2: "REFUSE_ADD_LISTFRIEND",
    3: "DEL_LISTFRIEND",
    4: "ADD_ENEMY",
    5: "DEL_ENEMY",
    6: "ADD_SHIELD",
    7: "DEL_SHIELD",
  }

  _NAMES_TO_VALUES = {
    "INVITE_ADD_LISTFRIEND": 0,
    "VERIFY_ADD_LISTFRIEND": 1,
    "REFUSE_ADD_LISTFRIEND": 2,
    "DEL_LISTFRIEND": 3,
    "ADD_ENEMY": 4,
    "DEL_ENEMY": 5,
    "ADD_SHIELD": 6,
    "DEL_SHIELD": 7,
  }

class FriendListClientCmd:
  GET_FRIENDLIST = 0
  GET_FRIENDLIST_TEMP = 1
  GET_ENEMY = 2
  JUMP_ENEMY = 3

  _VALUES_TO_NAMES = {
    0: "GET_FRIENDLIST",
    1: "GET_FRIENDLIST_TEMP",
    2: "GET_ENEMY",
    3: "JUMP_ENEMY",
  }

  _NAMES_TO_VALUES = {
    "GET_FRIENDLIST": 0,
    "GET_FRIENDLIST_TEMP": 1,
    "GET_ENEMY": 2,
    "JUMP_ENEMY": 3,
  }

class ChatMsgCmd:
  MapCHAT = 0
  PERSONCHAT = 1
  WORLDCHAT = 2
  TEAMCHAT = 3
  GUILDCHAT = 4
  SYSTEMCHAT = 5

  _VALUES_TO_NAMES = {
    0: "MapCHAT",
    1: "PERSONCHAT",
    2: "WORLDCHAT",
    3: "TEAMCHAT",
    4: "GUILDCHAT",
    5: "SYSTEMCHAT",
  }

  _NAMES_TO_VALUES = {
    "MapCHAT": 0,
    "PERSONCHAT": 1,
    "WORLDCHAT": 2,
    "TEAMCHAT": 3,
    "GUILDCHAT": 4,
    "SYSTEMCHAT": 5,
  }

class TeamClientCmd:
  INVITE_ADD_TEAM = 0
  VERIFY_INVIT_ADD_TEAM = 1
  REFUSE_INVITT_ADD_TEAM = 2
  DEL_TEAMPLAYER = 3
  QUIT_TEAM = 4
  REPLACE_TEAMLEADER = 5

  _VALUES_TO_NAMES = {
    0: "INVITE_ADD_TEAM",
    1: "VERIFY_INVIT_ADD_TEAM",
    2: "REFUSE_INVITT_ADD_TEAM",
    3: "DEL_TEAMPLAYER",
    4: "QUIT_TEAM",
    5: "REPLACE_TEAMLEADER",
  }

  _NAMES_TO_VALUES = {
    "INVITE_ADD_TEAM": 0,
    "VERIFY_INVIT_ADD_TEAM": 1,
    "REFUSE_INVITT_ADD_TEAM": 2,
    "DEL_TEAMPLAYER": 3,
    "QUIT_TEAM": 4,
    "REPLACE_TEAMLEADER": 5,
  }

class TeamListClientCmd:
  GET_TEAMLIST = 0

  _VALUES_TO_NAMES = {
    0: "GET_TEAMLIST",
  }

  _NAMES_TO_VALUES = {
    "GET_TEAMLIST": 0,
  }

class BrotherClientCmd:
  INVITE_ADD_BROTHER = 0
  VERIFY_INVIT_ADD_BROTHER = 1
  REFUSE_INVITT_ADD_BROTHER = 2
  CONFIRM_INVIT_ADD_BROTHER = 3
  QUIT_BROTHER = 4
  GET_BROTHERLIST = 5
  CONSULT_QUIT_BROTHER = 6
  CANCLE_QUIT_BROTHER = 7
  DOWN_LINE_BROTHER = 8
  LEARN_BRO_SKILL = 9

  _VALUES_TO_NAMES = {
    0: "INVITE_ADD_BROTHER",
    1: "VERIFY_INVIT_ADD_BROTHER",
    2: "REFUSE_INVITT_ADD_BROTHER",
    3: "CONFIRM_INVIT_ADD_BROTHER",
    4: "QUIT_BROTHER",
    5: "GET_BROTHERLIST",
    6: "CONSULT_QUIT_BROTHER",
    7: "CANCLE_QUIT_BROTHER",
    8: "DOWN_LINE_BROTHER",
    9: "LEARN_BRO_SKILL",
  }

  _NAMES_TO_VALUES = {
    "INVITE_ADD_BROTHER": 0,
    "VERIFY_INVIT_ADD_BROTHER": 1,
    "REFUSE_INVITT_ADD_BROTHER": 2,
    "CONFIRM_INVIT_ADD_BROTHER": 3,
    "QUIT_BROTHER": 4,
    "GET_BROTHERLIST": 5,
    "CONSULT_QUIT_BROTHER": 6,
    "CANCLE_QUIT_BROTHER": 7,
    "DOWN_LINE_BROTHER": 8,
    "LEARN_BRO_SKILL": 9,
  }

class BuffType:
  XUAN_YUN = 1
  JIAN_SU = 2
  SHEN_MING_HU_TI = 3
  GUWU_SHIQI = 4
  ZHIYUSHU = 5
  DEFEND = 6

  _VALUES_TO_NAMES = {
    1: "XUAN_YUN",
    2: "JIAN_SU",
    3: "SHEN_MING_HU_TI",
    4: "GUWU_SHIQI",
    5: "ZHIYUSHU",
    6: "DEFEND",
  }

  _NAMES_TO_VALUES = {
    "XUAN_YUN": 1,
    "JIAN_SU": 2,
    "SHEN_MING_HU_TI": 3,
    "GUWU_SHIQI": 4,
    "ZHIYUSHU": 5,
    "DEFEND": 6,
  }

class EffectType:
  EFFECT_ZHUO_SHAO = 1

  _VALUES_TO_NAMES = {
    1: "EFFECT_ZHUO_SHAO",
  }

  _NAMES_TO_VALUES = {
    "EFFECT_ZHUO_SHAO": 1,
  }

class EUIType:
  UI_JIEYI = 1
  UI_JIEHUN = 2
  UI_DANBAOJIN = 3
  UI_QIANGHUA = 4
  UI_HAHGHUI = 5
  UI_PAIMAI = 6
  UI_CANGKU = 7
  UI_QIANZHUANG = 8
  UI_ZHUANGBEI = 9
  UI_DAOJU = 10
  UI_CHUANSONG = 11

  _VALUES_TO_NAMES = {
    1: "UI_JIEYI",
    2: "UI_JIEHUN",
    3: "UI_DANBAOJIN",
    4: "UI_QIANGHUA",
    5: "UI_HAHGHUI",
    6: "UI_PAIMAI",
    7: "UI_CANGKU",
    8: "UI_QIANZHUANG",
    9: "UI_ZHUANGBEI",
    10: "UI_DAOJU",
    11: "UI_CHUANSONG",
  }

  _NAMES_TO_VALUES = {
    "UI_JIEYI": 1,
    "UI_JIEHUN": 2,
    "UI_DANBAOJIN": 3,
    "UI_QIANGHUA": 4,
    "UI_HAHGHUI": 5,
    "UI_PAIMAI": 6,
    "UI_CANGKU": 7,
    "UI_QIANZHUANG": 8,
    "UI_ZHUANGBEI": 9,
    "UI_DAOJU": 10,
    "UI_CHUANSONG": 11,
  }

class MarriageHousePos:
  MARRY_HOUSE_POS_1 = 0
  MARRY_HOUSE_POS_2 = 1
  MARRY_HOUSE_POS_3 = 2
  MARRY_HOUSE_POS_4 = 3
  MARRY_HOUSE_POS_5 = 4
  MARRY_HOUSE_POS_6 = 5
  MARRY_HOUSE_POS_MAX = 6

  _VALUES_TO_NAMES = {
    0: "MARRY_HOUSE_POS_1",
    1: "MARRY_HOUSE_POS_2",
    2: "MARRY_HOUSE_POS_3",
    3: "MARRY_HOUSE_POS_4",
    4: "MARRY_HOUSE_POS_5",
    5: "MARRY_HOUSE_POS_6",
    6: "MARRY_HOUSE_POS_MAX",
  }

  _NAMES_TO_VALUES = {
    "MARRY_HOUSE_POS_1": 0,
    "MARRY_HOUSE_POS_2": 1,
    "MARRY_HOUSE_POS_3": 2,
    "MARRY_HOUSE_POS_4": 3,
    "MARRY_HOUSE_POS_5": 4,
    "MARRY_HOUSE_POS_6": 5,
    "MARRY_HOUSE_POS_MAX": 6,
  }

class MarriageClientCmd:
  MARRY_APPLY_TASK = 0
  MARRY_COMMIT_TASK = 1
  MARRY_SEND = 2
  MARRY_ATTEND_WEEDING = 3
  MARRY_NEW_LIST = 4
  MARRY_VISIT_HOUSE = 5
  MARRY_SET_HOUSE_ITEM = 6
  MARRY_LEARN_COUPLE_SKILL = 7
  MARRY_DIVORCE_NORMAL = 8
  MARRY_DIVORCE_FORCE = 9
  MARRY_QUERY_STATUS = 10
  MARRY_QUERY_ALL_MARRIAGE = 12
  MARRY_GIVEUP_TASK = 13
  MARRY_APPLY_WEDDING = 14
  MARRY_WEDDING_START = 15
  MARRY_DIVORCE_QUIT = 16
  MARRY_OFFLINE = 17

  _VALUES_TO_NAMES = {
    0: "MARRY_APPLY_TASK",
    1: "MARRY_COMMIT_TASK",
    2: "MARRY_SEND",
    3: "MARRY_ATTEND_WEEDING",
    4: "MARRY_NEW_LIST",
    5: "MARRY_VISIT_HOUSE",
    6: "MARRY_SET_HOUSE_ITEM",
    7: "MARRY_LEARN_COUPLE_SKILL",
    8: "MARRY_DIVORCE_NORMAL",
    9: "MARRY_DIVORCE_FORCE",
    10: "MARRY_QUERY_STATUS",
    12: "MARRY_QUERY_ALL_MARRIAGE",
    13: "MARRY_GIVEUP_TASK",
    14: "MARRY_APPLY_WEDDING",
    15: "MARRY_WEDDING_START",
    16: "MARRY_DIVORCE_QUIT",
    17: "MARRY_OFFLINE",
  }

  _NAMES_TO_VALUES = {
    "MARRY_APPLY_TASK": 0,
    "MARRY_COMMIT_TASK": 1,
    "MARRY_SEND": 2,
    "MARRY_ATTEND_WEEDING": 3,
    "MARRY_NEW_LIST": 4,
    "MARRY_VISIT_HOUSE": 5,
    "MARRY_SET_HOUSE_ITEM": 6,
    "MARRY_LEARN_COUPLE_SKILL": 7,
    "MARRY_DIVORCE_NORMAL": 8,
    "MARRY_DIVORCE_FORCE": 9,
    "MARRY_QUERY_STATUS": 10,
    "MARRY_QUERY_ALL_MARRIAGE": 12,
    "MARRY_GIVEUP_TASK": 13,
    "MARRY_APPLY_WEDDING": 14,
    "MARRY_WEDDING_START": 15,
    "MARRY_DIVORCE_QUIT": 16,
    "MARRY_OFFLINE": 17,
  }

class MarryStatusCmd:
  MARRY_STATUS_NOT = 0
  MARRY_STATUS_TASK_GO = 1
  MARRY_STATUS_MARRIED = 2
  MARRY_STATUS_DIVORCING = 3
  MARRY_STATUS_TASK_FINISH = 4

  _VALUES_TO_NAMES = {
    0: "MARRY_STATUS_NOT",
    1: "MARRY_STATUS_TASK_GO",
    2: "MARRY_STATUS_MARRIED",
    3: "MARRY_STATUS_DIVORCING",
    4: "MARRY_STATUS_TASK_FINISH",
  }

  _NAMES_TO_VALUES = {
    "MARRY_STATUS_NOT": 0,
    "MARRY_STATUS_TASK_GO": 1,
    "MARRY_STATUS_MARRIED": 2,
    "MARRY_STATUS_DIVORCING": 3,
    "MARRY_STATUS_TASK_FINISH": 4,
  }

class WeddingFlagCmd:
  WEDDING_NOT_APPLY = 0
  WEDDING_APPLYED = 1
  WEDDING_FINISH = 2
  WEDDING_FAIL = 3

  _VALUES_TO_NAMES = {
    0: "WEDDING_NOT_APPLY",
    1: "WEDDING_APPLYED",
    2: "WEDDING_FINISH",
    3: "WEDDING_FAIL",
  }

  _NAMES_TO_VALUES = {
    "WEDDING_NOT_APPLY": 0,
    "WEDDING_APPLYED": 1,
    "WEDDING_FINISH": 2,
    "WEDDING_FAIL": 3,
  }

class MailMsgType:
  MAIL_MSG_FRIEND = 0
  MAIL_MSG_GUILD = 1
  MAIL_MSG_SYSTEM = 2

  _VALUES_TO_NAMES = {
    0: "MAIL_MSG_FRIEND",
    1: "MAIL_MSG_GUILD",
    2: "MAIL_MSG_SYSTEM",
  }

  _NAMES_TO_VALUES = {
    "MAIL_MSG_FRIEND": 0,
    "MAIL_MSG_GUILD": 1,
    "MAIL_MSG_SYSTEM": 2,
  }

class MailOpsCmd:
  MAIL_OP_ALL = 0
  MAIL_OP_SEND = 1
  MAIL_OP_DEL = 2
  MAIL_OP_BACK = 3
  MAIL_OP_TAKE_ATTACH = 4
  MAIL_OP_GET_NEW = 5
  MAIL_OP_MARK_READ = 6

  _VALUES_TO_NAMES = {
    0: "MAIL_OP_ALL",
    1: "MAIL_OP_SEND",
    2: "MAIL_OP_DEL",
    3: "MAIL_OP_BACK",
    4: "MAIL_OP_TAKE_ATTACH",
    5: "MAIL_OP_GET_NEW",
    6: "MAIL_OP_MARK_READ",
  }

  _NAMES_TO_VALUES = {
    "MAIL_OP_ALL": 0,
    "MAIL_OP_SEND": 1,
    "MAIL_OP_DEL": 2,
    "MAIL_OP_BACK": 3,
    "MAIL_OP_TAKE_ATTACH": 4,
    "MAIL_OP_GET_NEW": 5,
    "MAIL_OP_MARK_READ": 6,
  }

class MailStatusType:
  MAIL_STATUS_UNREAD = 0
  MAIL_STATUS_READ = 1
  MAIL_STATUS_BACKED = 2

  _VALUES_TO_NAMES = {
    0: "MAIL_STATUS_UNREAD",
    1: "MAIL_STATUS_READ",
    2: "MAIL_STATUS_BACKED",
  }

  _NAMES_TO_VALUES = {
    "MAIL_STATUS_UNREAD": 0,
    "MAIL_STATUS_READ": 1,
    "MAIL_STATUS_BACKED": 2,
  }

class MailAttachType:
  MAIL_ATTACH_ITEM = 0
  MAIL_ATTACH_EXP = 1
  MAIL_ATTACH_GOLD = 2

  _VALUES_TO_NAMES = {
    0: "MAIL_ATTACH_ITEM",
    1: "MAIL_ATTACH_EXP",
    2: "MAIL_ATTACH_GOLD",
  }

  _NAMES_TO_VALUES = {
    "MAIL_ATTACH_ITEM": 0,
    "MAIL_ATTACH_EXP": 1,
    "MAIL_ATTACH_GOLD": 2,
  }

class EATTACK_MODE:
  PEACE = 0
  ALL_ATTACK = 1
  GUILD = 2
  TEAM = 3

  _VALUES_TO_NAMES = {
    0: "PEACE",
    1: "ALL_ATTACK",
    2: "GUILD",
    3: "TEAM",
  }

  _NAMES_TO_VALUES = {
    "PEACE": 0,
    "ALL_ATTACK": 1,
    "GUILD": 2,
    "TEAM": 3,
  }

class RankOpsCmd:
  GET_RANK_INFO = 0

  _VALUES_TO_NAMES = {
    0: "GET_RANK_INFO",
  }

  _NAMES_TO_VALUES = {
    "GET_RANK_INFO": 0,
  }

class RankRefreshType:
  NONE_VALUE = 0
  DAILY = 1

  _VALUES_TO_NAMES = {
    0: "NONE_VALUE",
    1: "DAILY",
  }

  _NAMES_TO_VALUES = {
    "NONE_VALUE": 0,
    "DAILY": 1,
  }

class RankType:
  NONE_VALUE = 0
  FULL_FIGHTPOWER = 1
  LEVEL = 2
  GOLD = 3
  WUJIANG_FIGHTPOWER = 4
  CESHI_FIGHTPOWER = 5
  GONGJIAN_FIGHTPOWER = 6
  SHUSHI_FIGHTPOER = 7
  JUNTUAN_FIGHTPOWER = 8
  JUNTUAN_LEVEL = 9
  ZHANLING_COUNT = 10
  BROTHER_FIGHTPOWER = 11
  MARRY_FIGHTPOWER = 12
  MAX_VALUE = 13

  _VALUES_TO_NAMES = {
    0: "NONE_VALUE",
    1: "FULL_FIGHTPOWER",
    2: "LEVEL",
    3: "GOLD",
    4: "WUJIANG_FIGHTPOWER",
    5: "CESHI_FIGHTPOWER",
    6: "GONGJIAN_FIGHTPOWER",
    7: "SHUSHI_FIGHTPOER",
    8: "JUNTUAN_FIGHTPOWER",
    9: "JUNTUAN_LEVEL",
    10: "ZHANLING_COUNT",
    11: "BROTHER_FIGHTPOWER",
    12: "MARRY_FIGHTPOWER",
    13: "MAX_VALUE",
  }

  _NAMES_TO_VALUES = {
    "NONE_VALUE": 0,
    "FULL_FIGHTPOWER": 1,
    "LEVEL": 2,
    "GOLD": 3,
    "WUJIANG_FIGHTPOWER": 4,
    "CESHI_FIGHTPOWER": 5,
    "GONGJIAN_FIGHTPOWER": 6,
    "SHUSHI_FIGHTPOER": 7,
    "JUNTUAN_FIGHTPOWER": 8,
    "JUNTUAN_LEVEL": 9,
    "ZHANLING_COUNT": 10,
    "BROTHER_FIGHTPOWER": 11,
    "MARRY_FIGHTPOWER": 12,
    "MAX_VALUE": 13,
  }

class GuildWarOpsCmd:
  APPLY_WAR = 0
  WAR_START = 1
  WAR_END = 2
  WAR_LIST = 3
  WAR_CANCEL_APPLY = 4

  _VALUES_TO_NAMES = {
    0: "APPLY_WAR",
    1: "WAR_START",
    2: "WAR_END",
    3: "WAR_LIST",
    4: "WAR_CANCEL_APPLY",
  }

  _NAMES_TO_VALUES = {
    "APPLY_WAR": 0,
    "WAR_START": 1,
    "WAR_END": 2,
    "WAR_LIST": 3,
    "WAR_CANCEL_APPLY": 4,
  }

class GuildCityWarOpsCmd:
  APPLY_CITYWAR = 0
  CITYWAR_START = 1
  CITYWAR_END = 2
  CITYWAR_LIST = 3
  CITYWAR_INFO = 4
  CITYWAR_CANCEL = 5

  _VALUES_TO_NAMES = {
    0: "APPLY_CITYWAR",
    1: "CITYWAR_START",
    2: "CITYWAR_END",
    3: "CITYWAR_LIST",
    4: "CITYWAR_INFO",
    5: "CITYWAR_CANCEL",
  }

  _NAMES_TO_VALUES = {
    "APPLY_CITYWAR": 0,
    "CITYWAR_START": 1,
    "CITYWAR_END": 2,
    "CITYWAR_LIST": 3,
    "CITYWAR_INFO": 4,
    "CITYWAR_CANCEL": 5,
  }

class GuildRankWarOpsCmd:
  RANKWAR_INVITE = 0
  RANKWAR_AGREE = 1
  RANKWAR_REFUSE = 2
  RANKWAR_DELETE = 3
  RANKWAR_APPLY = 4
  RANKWAR_START = 5
  RANKWAR_END = 6
  RANKWAR_ENTER = 7
  RANKWAR_FIGTHPOWER = 8

  _VALUES_TO_NAMES = {
    0: "RANKWAR_INVITE",
    1: "RANKWAR_AGREE",
    2: "RANKWAR_REFUSE",
    3: "RANKWAR_DELETE",
    4: "RANKWAR_APPLY",
    5: "RANKWAR_START",
    6: "RANKWAR_END",
    7: "RANKWAR_ENTER",
    8: "RANKWAR_FIGTHPOWER",
  }

  _NAMES_TO_VALUES = {
    "RANKWAR_INVITE": 0,
    "RANKWAR_AGREE": 1,
    "RANKWAR_REFUSE": 2,
    "RANKWAR_DELETE": 3,
    "RANKWAR_APPLY": 4,
    "RANKWAR_START": 5,
    "RANKWAR_END": 6,
    "RANKWAR_ENTER": 7,
    "RANKWAR_FIGTHPOWER": 8,
  }

class DailyLoginRewardType:
  DAILY_REWARD_SEVEN = 0
  DAILY_REWARD_ONLINE = 1
  DAILY_REWARD_INVITE = 2

  _VALUES_TO_NAMES = {
    0: "DAILY_REWARD_SEVEN",
    1: "DAILY_REWARD_ONLINE",
    2: "DAILY_REWARD_INVITE",
  }

  _NAMES_TO_VALUES = {
    "DAILY_REWARD_SEVEN": 0,
    "DAILY_REWARD_ONLINE": 1,
    "DAILY_REWARD_INVITE": 2,
  }

class DailyLoginOpsCmd:
  DAILY_OP_ALL_INFO = 0
  DAILY_OP_SEVEN_REWARD = 1
  DAILY_OP_ONLINE_REWARD = 2
  DAILY_OP_INVITE_REWARD = 3

  _VALUES_TO_NAMES = {
    0: "DAILY_OP_ALL_INFO",
    1: "DAILY_OP_SEVEN_REWARD",
    2: "DAILY_OP_ONLINE_REWARD",
    3: "DAILY_OP_INVITE_REWARD",
  }

  _NAMES_TO_VALUES = {
    "DAILY_OP_ALL_INFO": 0,
    "DAILY_OP_SEVEN_REWARD": 1,
    "DAILY_OP_ONLINE_REWARD": 2,
    "DAILY_OP_INVITE_REWARD": 3,
  }


class GuildLevelOpsMsgReq:
  """
  Attributes:
   - opstype
   - gold
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'gold', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], gold=thrift_spec[2][4],):
    self.opstype = opstype
    self.gold = gold

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.gold = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildLevelOpsMsgReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I64, 2)
      oprot.writeI64(self.gold)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.gold)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserGuildInfoMsg:
  """
  Attributes:
   - uid
   - name
   - post
   - contribute
   - ranking
   - level
   - job
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I64, 'post', None, 0, ), # 3
    (4, TType.I64, 'contribute', None, 0, ), # 4
    (5, TType.I64, 'ranking', None, 0, ), # 5
    (6, TType.I32, 'level', None, 0, ), # 6
    (7, TType.I16, 'job', None, 0, ), # 7
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], post=thrift_spec[3][4], contribute=thrift_spec[4][4], ranking=thrift_spec[5][4], level=thrift_spec[6][4], job=thrift_spec[7][4],):
    self.uid = uid
    self.name = name
    self.post = post
    self.contribute = contribute
    self.ranking = ranking
    self.level = level
    self.job = job

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.post = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.contribute = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.ranking = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserGuildInfoMsg')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.post is not None:
      oprot.writeFieldBegin('post', TType.I64, 3)
      oprot.writeI64(self.post)
      oprot.writeFieldEnd()
    if self.contribute is not None:
      oprot.writeFieldBegin('contribute', TType.I64, 4)
      oprot.writeI64(self.contribute)
      oprot.writeFieldEnd()
    if self.ranking is not None:
      oprot.writeFieldBegin('ranking', TType.I64, 5)
      oprot.writeI64(self.ranking)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 6)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 7)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.post)
    value = (value * 31) ^ hash(self.contribute)
    value = (value * 31) ^ hash(self.ranking)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.job)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildLevelOpsMsgRet:
  """
  Attributes:
   - opstype
   - guildLevel
   - uid
   - name
   - gold
   - ranking
   - guildMemberList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'guildLevel', None, 0, ), # 2
    (3, TType.I64, 'uid', None, 0, ), # 3
    (4, TType.STRING, 'name', None, "", ), # 4
    (5, TType.I64, 'gold', None, 0, ), # 5
    (6, TType.I64, 'ranking', None, 0, ), # 6
    (7, TType.LIST, 'guildMemberList', (TType.STRUCT,(UserGuildInfoMsg, UserGuildInfoMsg.thrift_spec)), None, ), # 7
  )

  def __init__(self, opstype=thrift_spec[1][4], guildLevel=thrift_spec[2][4], uid=thrift_spec[3][4], name=thrift_spec[4][4], gold=thrift_spec[5][4], ranking=thrift_spec[6][4], guildMemberList=None,):
    self.opstype = opstype
    self.guildLevel = guildLevel
    self.uid = uid
    self.name = name
    self.gold = gold
    self.ranking = ranking
    self.guildMemberList = guildMemberList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.guildLevel = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.gold = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.ranking = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.guildMemberList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = UserGuildInfoMsg()
            _elem5.read(iprot)
            self.guildMemberList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildLevelOpsMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.guildLevel is not None:
      oprot.writeFieldBegin('guildLevel', TType.I64, 2)
      oprot.writeI64(self.guildLevel)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 3)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I64, 5)
      oprot.writeI64(self.gold)
      oprot.writeFieldEnd()
    if self.ranking is not None:
      oprot.writeFieldBegin('ranking', TType.I64, 6)
      oprot.writeI64(self.ranking)
      oprot.writeFieldEnd()
    if self.guildMemberList is not None:
      oprot.writeFieldBegin('guildMemberList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.guildMemberList))
      for iter6 in self.guildMemberList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.guildLevel)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.gold)
    value = (value * 31) ^ hash(self.ranking)
    value = (value * 31) ^ hash(self.guildMemberList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInfoMsgReq:
  """
  Attributes:
   - guildImage
   - guildNotice
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'guildImage', None, "", ), # 1
    (2, TType.STRING, 'guildNotice', None, "", ), # 2
  )

  def __init__(self, guildImage=thrift_spec[1][4], guildNotice=thrift_spec[2][4],):
    self.guildImage = guildImage
    self.guildNotice = guildNotice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.guildImage = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.guildNotice = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInfoMsgReq')
    if self.guildImage is not None:
      oprot.writeFieldBegin('guildImage', TType.STRING, 1)
      oprot.writeString(self.guildImage)
      oprot.writeFieldEnd()
    if self.guildNotice is not None:
      oprot.writeFieldBegin('guildNotice', TType.STRING, 2)
      oprot.writeString(self.guildNotice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guildImage)
    value = (value * 31) ^ hash(self.guildNotice)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInfoOpsMsgRet:
  """
  Attributes:
   - guildImage
   - guildNotice
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'guildImage', None, "", ), # 1
    (2, TType.STRING, 'guildNotice', None, "", ), # 2
  )

  def __init__(self, guildImage=thrift_spec[1][4], guildNotice=thrift_spec[2][4],):
    self.guildImage = guildImage
    self.guildNotice = guildNotice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.guildImage = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.guildNotice = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInfoOpsMsgRet')
    if self.guildImage is not None:
      oprot.writeFieldBegin('guildImage', TType.STRING, 1)
      oprot.writeString(self.guildImage)
      oprot.writeFieldEnd()
    if self.guildNotice is not None:
      oprot.writeFieldBegin('guildNotice', TType.STRING, 2)
      oprot.writeString(self.guildNotice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guildImage)
    value = (value * 31) ^ hash(self.guildNotice)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInfoMsg:
  """
  Attributes:
   - guildID
   - guildName
   - guildPlayerNumber
   - guildLeaderName
   - guildNotice
   - levelRanking
   - guildImage
   - guildlevel
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildID', None, 0, ), # 1
    (2, TType.STRING, 'guildName', None, "", ), # 2
    (3, TType.I64, 'guildPlayerNumber', None, 0, ), # 3
    (4, TType.STRING, 'guildLeaderName', None, "", ), # 4
    (5, TType.STRING, 'guildNotice', None, "", ), # 5
    (6, TType.I64, 'levelRanking', None, 0, ), # 6
    (7, TType.STRING, 'guildImage', None, "", ), # 7
    (8, TType.I64, 'guildlevel', None, 0, ), # 8
  )

  def __init__(self, guildID=thrift_spec[1][4], guildName=thrift_spec[2][4], guildPlayerNumber=thrift_spec[3][4], guildLeaderName=thrift_spec[4][4], guildNotice=thrift_spec[5][4], levelRanking=thrift_spec[6][4], guildImage=thrift_spec[7][4], guildlevel=thrift_spec[8][4],):
    self.guildID = guildID
    self.guildName = guildName
    self.guildPlayerNumber = guildPlayerNumber
    self.guildLeaderName = guildLeaderName
    self.guildNotice = guildNotice
    self.levelRanking = levelRanking
    self.guildImage = guildImage
    self.guildlevel = guildlevel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildID = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.guildName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.guildPlayerNumber = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.guildLeaderName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.guildNotice = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.levelRanking = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.guildImage = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.guildlevel = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInfoMsg')
    if self.guildID is not None:
      oprot.writeFieldBegin('guildID', TType.I64, 1)
      oprot.writeI64(self.guildID)
      oprot.writeFieldEnd()
    if self.guildName is not None:
      oprot.writeFieldBegin('guildName', TType.STRING, 2)
      oprot.writeString(self.guildName)
      oprot.writeFieldEnd()
    if self.guildPlayerNumber is not None:
      oprot.writeFieldBegin('guildPlayerNumber', TType.I64, 3)
      oprot.writeI64(self.guildPlayerNumber)
      oprot.writeFieldEnd()
    if self.guildLeaderName is not None:
      oprot.writeFieldBegin('guildLeaderName', TType.STRING, 4)
      oprot.writeString(self.guildLeaderName)
      oprot.writeFieldEnd()
    if self.guildNotice is not None:
      oprot.writeFieldBegin('guildNotice', TType.STRING, 5)
      oprot.writeString(self.guildNotice)
      oprot.writeFieldEnd()
    if self.levelRanking is not None:
      oprot.writeFieldBegin('levelRanking', TType.I64, 6)
      oprot.writeI64(self.levelRanking)
      oprot.writeFieldEnd()
    if self.guildImage is not None:
      oprot.writeFieldBegin('guildImage', TType.STRING, 7)
      oprot.writeString(self.guildImage)
      oprot.writeFieldEnd()
    if self.guildlevel is not None:
      oprot.writeFieldBegin('guildlevel', TType.I64, 8)
      oprot.writeI64(self.guildlevel)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guildID)
    value = (value * 31) ^ hash(self.guildName)
    value = (value * 31) ^ hash(self.guildPlayerNumber)
    value = (value * 31) ^ hash(self.guildLeaderName)
    value = (value * 31) ^ hash(self.guildNotice)
    value = (value * 31) ^ hash(self.levelRanking)
    value = (value * 31) ^ hash(self.guildImage)
    value = (value * 31) ^ hash(self.guildlevel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildInfoMsgRet:
  """
  Attributes:
   - type
   - allGuildInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'type', None, 0, ), # 1
    (2, TType.LIST, 'allGuildInfo', (TType.STRUCT,(GuildInfoMsg, GuildInfoMsg.thrift_spec)), None, ), # 2
  )

  def __init__(self, type=thrift_spec[1][4], allGuildInfo=None,):
    self.type = type
    self.allGuildInfo = allGuildInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.allGuildInfo = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = GuildInfoMsg()
            _elem12.read(iprot)
            self.allGuildInfo.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildInfoMsgRet')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 1)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.allGuildInfo is not None:
      oprot.writeFieldBegin('allGuildInfo', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.allGuildInfo))
      for iter13 in self.allGuildInfo:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.allGuildInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserGuildListMsgRet:
  """
  Attributes:
   - guildID
   - guildName
   - guildLevel
   - guildImage
   - guildPlayerNumber
   - guildMaxPlayerNumber
   - guildLeaderName
   - guildNotice
   - guildExp
   - guildUpdateExp
   - levelRanking
   - guildMemberList
   - guildPost
   - dateContribution
   - maxContribution
   - guildMemberTempList
   - copymapEndTm
   - typeCopyMap
   - warVsGuildInfo
   - tmWarStart
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'guildID', None, 0, ), # 1
    (2, TType.STRING, 'guildName', None, "", ), # 2
    (3, TType.I64, 'guildLevel', None, 0, ), # 3
    (4, TType.STRING, 'guildImage', None, "", ), # 4
    (5, TType.I64, 'guildPlayerNumber', None, 0, ), # 5
    (6, TType.I64, 'guildMaxPlayerNumber', None, 0, ), # 6
    (7, TType.STRING, 'guildLeaderName', None, "", ), # 7
    (8, TType.STRING, 'guildNotice', None, "", ), # 8
    (9, TType.I64, 'guildExp', None, 0, ), # 9
    (10, TType.I64, 'guildUpdateExp', None, 0, ), # 10
    (11, TType.I64, 'levelRanking', None, 0, ), # 11
    (12, TType.LIST, 'guildMemberList', (TType.STRUCT,(UserGuildInfoMsg, UserGuildInfoMsg.thrift_spec)), None, ), # 12
    (13, TType.I64, 'guildPost', None, 0, ), # 13
    (14, TType.I64, 'dateContribution', None, 0, ), # 14
    (15, TType.I64, 'maxContribution', None, 0, ), # 15
    (16, TType.LIST, 'guildMemberTempList', (TType.STRUCT,(UserGuildInfoMsg, UserGuildInfoMsg.thrift_spec)), None, ), # 16
    (17, TType.I32, 'copymapEndTm', None, 0, ), # 17
    (18, TType.I16, 'typeCopyMap', None, 0, ), # 18
    (19, TType.STRUCT, 'warVsGuildInfo', (GuildInfoMsg, GuildInfoMsg.thrift_spec), None, ), # 19
    (20, TType.I32, 'tmWarStart', None, 0, ), # 20
  )

  def __init__(self, guildID=thrift_spec[1][4], guildName=thrift_spec[2][4], guildLevel=thrift_spec[3][4], guildImage=thrift_spec[4][4], guildPlayerNumber=thrift_spec[5][4], guildMaxPlayerNumber=thrift_spec[6][4], guildLeaderName=thrift_spec[7][4], guildNotice=thrift_spec[8][4], guildExp=thrift_spec[9][4], guildUpdateExp=thrift_spec[10][4], levelRanking=thrift_spec[11][4], guildMemberList=None, guildPost=thrift_spec[13][4], dateContribution=thrift_spec[14][4], maxContribution=thrift_spec[15][4], guildMemberTempList=None, copymapEndTm=thrift_spec[17][4], typeCopyMap=thrift_spec[18][4], warVsGuildInfo=None, tmWarStart=thrift_spec[20][4],):
    self.guildID = guildID
    self.guildName = guildName
    self.guildLevel = guildLevel
    self.guildImage = guildImage
    self.guildPlayerNumber = guildPlayerNumber
    self.guildMaxPlayerNumber = guildMaxPlayerNumber
    self.guildLeaderName = guildLeaderName
    self.guildNotice = guildNotice
    self.guildExp = guildExp
    self.guildUpdateExp = guildUpdateExp
    self.levelRanking = levelRanking
    self.guildMemberList = guildMemberList
    self.guildPost = guildPost
    self.dateContribution = dateContribution
    self.maxContribution = maxContribution
    self.guildMemberTempList = guildMemberTempList
    self.copymapEndTm = copymapEndTm
    self.typeCopyMap = typeCopyMap
    self.warVsGuildInfo = warVsGuildInfo
    self.tmWarStart = tmWarStart

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.guildID = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.guildName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.guildLevel = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.guildImage = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.guildPlayerNumber = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.guildMaxPlayerNumber = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.guildLeaderName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.guildNotice = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.guildExp = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.guildUpdateExp = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.levelRanking = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.guildMemberList = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = UserGuildInfoMsg()
            _elem19.read(iprot)
            self.guildMemberList.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.guildPost = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.dateContribution = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.maxContribution = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.guildMemberTempList = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = UserGuildInfoMsg()
            _elem25.read(iprot)
            self.guildMemberTempList.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.copymapEndTm = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I16:
          self.typeCopyMap = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRUCT:
          self.warVsGuildInfo = GuildInfoMsg()
          self.warVsGuildInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.tmWarStart = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserGuildListMsgRet')
    if self.guildID is not None:
      oprot.writeFieldBegin('guildID', TType.I64, 1)
      oprot.writeI64(self.guildID)
      oprot.writeFieldEnd()
    if self.guildName is not None:
      oprot.writeFieldBegin('guildName', TType.STRING, 2)
      oprot.writeString(self.guildName)
      oprot.writeFieldEnd()
    if self.guildLevel is not None:
      oprot.writeFieldBegin('guildLevel', TType.I64, 3)
      oprot.writeI64(self.guildLevel)
      oprot.writeFieldEnd()
    if self.guildImage is not None:
      oprot.writeFieldBegin('guildImage', TType.STRING, 4)
      oprot.writeString(self.guildImage)
      oprot.writeFieldEnd()
    if self.guildPlayerNumber is not None:
      oprot.writeFieldBegin('guildPlayerNumber', TType.I64, 5)
      oprot.writeI64(self.guildPlayerNumber)
      oprot.writeFieldEnd()
    if self.guildMaxPlayerNumber is not None:
      oprot.writeFieldBegin('guildMaxPlayerNumber', TType.I64, 6)
      oprot.writeI64(self.guildMaxPlayerNumber)
      oprot.writeFieldEnd()
    if self.guildLeaderName is not None:
      oprot.writeFieldBegin('guildLeaderName', TType.STRING, 7)
      oprot.writeString(self.guildLeaderName)
      oprot.writeFieldEnd()
    if self.guildNotice is not None:
      oprot.writeFieldBegin('guildNotice', TType.STRING, 8)
      oprot.writeString(self.guildNotice)
      oprot.writeFieldEnd()
    if self.guildExp is not None:
      oprot.writeFieldBegin('guildExp', TType.I64, 9)
      oprot.writeI64(self.guildExp)
      oprot.writeFieldEnd()
    if self.guildUpdateExp is not None:
      oprot.writeFieldBegin('guildUpdateExp', TType.I64, 10)
      oprot.writeI64(self.guildUpdateExp)
      oprot.writeFieldEnd()
    if self.levelRanking is not None:
      oprot.writeFieldBegin('levelRanking', TType.I64, 11)
      oprot.writeI64(self.levelRanking)
      oprot.writeFieldEnd()
    if self.guildMemberList is not None:
      oprot.writeFieldBegin('guildMemberList', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.guildMemberList))
      for iter26 in self.guildMemberList:
        iter26.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.guildPost is not None:
      oprot.writeFieldBegin('guildPost', TType.I64, 13)
      oprot.writeI64(self.guildPost)
      oprot.writeFieldEnd()
    if self.dateContribution is not None:
      oprot.writeFieldBegin('dateContribution', TType.I64, 14)
      oprot.writeI64(self.dateContribution)
      oprot.writeFieldEnd()
    if self.maxContribution is not None:
      oprot.writeFieldBegin('maxContribution', TType.I64, 15)
      oprot.writeI64(self.maxContribution)
      oprot.writeFieldEnd()
    if self.guildMemberTempList is not None:
      oprot.writeFieldBegin('guildMemberTempList', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.guildMemberTempList))
      for iter27 in self.guildMemberTempList:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.copymapEndTm is not None:
      oprot.writeFieldBegin('copymapEndTm', TType.I32, 17)
      oprot.writeI32(self.copymapEndTm)
      oprot.writeFieldEnd()
    if self.typeCopyMap is not None:
      oprot.writeFieldBegin('typeCopyMap', TType.I16, 18)
      oprot.writeI16(self.typeCopyMap)
      oprot.writeFieldEnd()
    if self.warVsGuildInfo is not None:
      oprot.writeFieldBegin('warVsGuildInfo', TType.STRUCT, 19)
      self.warVsGuildInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.tmWarStart is not None:
      oprot.writeFieldBegin('tmWarStart', TType.I32, 20)
      oprot.writeI32(self.tmWarStart)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guildID)
    value = (value * 31) ^ hash(self.guildName)
    value = (value * 31) ^ hash(self.guildLevel)
    value = (value * 31) ^ hash(self.guildImage)
    value = (value * 31) ^ hash(self.guildPlayerNumber)
    value = (value * 31) ^ hash(self.guildMaxPlayerNumber)
    value = (value * 31) ^ hash(self.guildLeaderName)
    value = (value * 31) ^ hash(self.guildNotice)
    value = (value * 31) ^ hash(self.guildExp)
    value = (value * 31) ^ hash(self.guildUpdateExp)
    value = (value * 31) ^ hash(self.levelRanking)
    value = (value * 31) ^ hash(self.guildMemberList)
    value = (value * 31) ^ hash(self.guildPost)
    value = (value * 31) ^ hash(self.dateContribution)
    value = (value * 31) ^ hash(self.maxContribution)
    value = (value * 31) ^ hash(self.guildMemberTempList)
    value = (value * 31) ^ hash(self.copymapEndTm)
    value = (value * 31) ^ hash(self.typeCopyMap)
    value = (value * 31) ^ hash(self.warVsGuildInfo)
    value = (value * 31) ^ hash(self.tmWarStart)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildMsgReq:
  """
  Attributes:
   - opstype
   - guildname
   - guildid
   - uid
   - name
   - typeCopyMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.STRING, 'guildname', None, "", ), # 2
    (3, TType.I64, 'guildid', None, 0, ), # 3
    (4, TType.I64, 'uid', None, 0, ), # 4
    (5, TType.STRING, 'name', None, "", ), # 5
    (6, TType.I16, 'typeCopyMap', None, 0, ), # 6
  )

  def __init__(self, opstype=thrift_spec[1][4], guildname=thrift_spec[2][4], guildid=thrift_spec[3][4], uid=thrift_spec[4][4], name=thrift_spec[5][4], typeCopyMap=thrift_spec[6][4],):
    self.opstype = opstype
    self.guildname = guildname
    self.guildid = guildid
    self.uid = uid
    self.name = name
    self.typeCopyMap = typeCopyMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.guildname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.guildid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.typeCopyMap = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildMsgReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.guildname is not None:
      oprot.writeFieldBegin('guildname', TType.STRING, 2)
      oprot.writeString(self.guildname)
      oprot.writeFieldEnd()
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 3)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 4)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.typeCopyMap is not None:
      oprot.writeFieldBegin('typeCopyMap', TType.I16, 6)
      oprot.writeI16(self.typeCopyMap)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.guildname)
    value = (value * 31) ^ hash(self.guildid)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.typeCopyMap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildOpsMsgRet:
  """
  Attributes:
   - opstype
   - guildid
   - guildname
   - userid
   - username
   - guildMemberList
   - copymapEndTm
   - typeCopyMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'guildid', None, 0, ), # 2
    (3, TType.STRING, 'guildname', None, "", ), # 3
    (4, TType.I64, 'userid', None, 0, ), # 4
    (5, TType.STRING, 'username', None, "", ), # 5
    (6, TType.LIST, 'guildMemberList', (TType.STRUCT,(UserGuildInfoMsg, UserGuildInfoMsg.thrift_spec)), None, ), # 6
    (7, TType.I32, 'copymapEndTm', None, 0, ), # 7
    (8, TType.I16, 'typeCopyMap', None, 0, ), # 8
  )

  def __init__(self, opstype=thrift_spec[1][4], guildid=thrift_spec[2][4], guildname=thrift_spec[3][4], userid=thrift_spec[4][4], username=thrift_spec[5][4], guildMemberList=None, copymapEndTm=thrift_spec[7][4], typeCopyMap=thrift_spec[8][4],):
    self.opstype = opstype
    self.guildid = guildid
    self.guildname = guildname
    self.userid = userid
    self.username = username
    self.guildMemberList = guildMemberList
    self.copymapEndTm = copymapEndTm
    self.typeCopyMap = typeCopyMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.guildid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.guildname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.username = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.guildMemberList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = UserGuildInfoMsg()
            _elem33.read(iprot)
            self.guildMemberList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.copymapEndTm = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.typeCopyMap = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildOpsMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.guildid is not None:
      oprot.writeFieldBegin('guildid', TType.I64, 2)
      oprot.writeI64(self.guildid)
      oprot.writeFieldEnd()
    if self.guildname is not None:
      oprot.writeFieldBegin('guildname', TType.STRING, 3)
      oprot.writeString(self.guildname)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 4)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 5)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.guildMemberList is not None:
      oprot.writeFieldBegin('guildMemberList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.guildMemberList))
      for iter34 in self.guildMemberList:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.copymapEndTm is not None:
      oprot.writeFieldBegin('copymapEndTm', TType.I32, 7)
      oprot.writeI32(self.copymapEndTm)
      oprot.writeFieldEnd()
    if self.typeCopyMap is not None:
      oprot.writeFieldBegin('typeCopyMap', TType.I16, 8)
      oprot.writeI16(self.typeCopyMap)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.guildid)
    value = (value * 31) ^ hash(self.guildname)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.guildMemberList)
    value = (value * 31) ^ hash(self.copymapEndTm)
    value = (value * 31) ^ hash(self.typeCopyMap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateExpRet:
  """
  Attributes:
   - exp
   - level
   - expMax
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'exp', None, 0, ), # 1
    (2, TType.I32, 'level', None, 0, ), # 2
    (3, TType.I32, 'expMax', None, 0, ), # 3
  )

  def __init__(self, exp=thrift_spec[1][4], level=thrift_spec[2][4], expMax=thrift_spec[3][4],):
    self.exp = exp
    self.level = level
    self.expMax = expMax

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.expMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateExpRet')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 1)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 2)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.expMax is not None:
      oprot.writeFieldBegin('expMax', TType.I32, 3)
      oprot.writeI32(self.expMax)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exp)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.expMax)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdatePetExpRet:
  """
  Attributes:
   - exp
   - level
   - expMax
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'exp', None, 0, ), # 1
    (2, TType.I32, 'level', None, 0, ), # 2
    (3, TType.I32, 'expMax', None, 0, ), # 3
    (4, TType.I64, 'uid', None, 0, ), # 4
  )

  def __init__(self, exp=thrift_spec[1][4], level=thrift_spec[2][4], expMax=thrift_spec[3][4], uid=thrift_spec[4][4],):
    self.exp = exp
    self.level = level
    self.expMax = expMax
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.expMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdatePetExpRet')
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 1)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 2)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.expMax is not None:
      oprot.writeFieldBegin('expMax', TType.I32, 3)
      oprot.writeI32(self.expMax)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 4)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.exp)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.expMax)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LearnSkillReq:
  """
  Attributes:
   - skillId
   - skillLevel
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'skillId', None, 0, ), # 1
    (2, TType.I16, 'skillLevel', None, 0, ), # 2
  )

  def __init__(self, skillId=thrift_spec[1][4], skillLevel=thrift_spec[2][4],):
    self.skillId = skillId
    self.skillLevel = skillLevel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.skillId = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.skillLevel = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LearnSkillReq')
    if self.skillId is not None:
      oprot.writeFieldBegin('skillId', TType.I16, 1)
      oprot.writeI16(self.skillId)
      oprot.writeFieldEnd()
    if self.skillLevel is not None:
      oprot.writeFieldBegin('skillLevel', TType.I16, 2)
      oprot.writeI16(self.skillLevel)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.skillId)
    value = (value * 31) ^ hash(self.skillLevel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LearnSkillRet:
  """
  Attributes:
   - skillId
   - skillLevel
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'skillId', None, 0, ), # 1
    (2, TType.I16, 'skillLevel', None, 0, ), # 2
    (3, TType.I32, 'exp', None, 0, ), # 3
  )

  def __init__(self, skillId=thrift_spec[1][4], skillLevel=thrift_spec[2][4], exp=thrift_spec[3][4],):
    self.skillId = skillId
    self.skillLevel = skillLevel
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.skillId = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.skillLevel = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LearnSkillRet')
    if self.skillId is not None:
      oprot.writeFieldBegin('skillId', TType.I16, 1)
      oprot.writeI16(self.skillId)
      oprot.writeFieldEnd()
    if self.skillLevel is not None:
      oprot.writeFieldBegin('skillLevel', TType.I16, 2)
      oprot.writeI16(self.skillLevel)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 3)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.skillId)
    value = (value * 31) ^ hash(self.skillLevel)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UseSkillReq:
  """
  Attributes:
   - skillId
   - targetId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'skillId', None, 0, ), # 1
    (2, TType.I64, 'targetId', None, 0, ), # 2
  )

  def __init__(self, skillId=thrift_spec[1][4], targetId=thrift_spec[2][4],):
    self.skillId = skillId
    self.targetId = targetId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.skillId = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.targetId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UseSkillReq')
    if self.skillId is not None:
      oprot.writeFieldBegin('skillId', TType.I16, 1)
      oprot.writeI16(self.skillId)
      oprot.writeFieldEnd()
    if self.targetId is not None:
      oprot.writeFieldBegin('targetId', TType.I64, 2)
      oprot.writeI64(self.targetId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.skillId)
    value = (value * 31) ^ hash(self.targetId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HPHurtRet:
  """
  Attributes:
   - targetId
   - curHP
   - curMP
   - hurtHP
   - critFlag
   - hitFlag
   - anger
   - angerMax
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'targetId', None, 0, ), # 1
    (2, TType.I32, 'curHP', None, 0, ), # 2
    (3, TType.I32, 'curMP', None, 0, ), # 3
    (4, TType.I32, 'hurtHP', None, 0, ), # 4
    (5, TType.I16, 'critFlag', None, 0, ), # 5
    (6, TType.I16, 'hitFlag', None, 0, ), # 6
    (7, TType.I32, 'anger', None, 0, ), # 7
    (8, TType.I32, 'angerMax', None, 0, ), # 8
  )

  def __init__(self, targetId=thrift_spec[1][4], curHP=thrift_spec[2][4], curMP=thrift_spec[3][4], hurtHP=thrift_spec[4][4], critFlag=thrift_spec[5][4], hitFlag=thrift_spec[6][4], anger=thrift_spec[7][4], angerMax=thrift_spec[8][4],):
    self.targetId = targetId
    self.curHP = curHP
    self.curMP = curMP
    self.hurtHP = hurtHP
    self.critFlag = critFlag
    self.hitFlag = hitFlag
    self.anger = anger
    self.angerMax = angerMax

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.targetId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.curHP = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.curMP = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.hurtHP = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.critFlag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.hitFlag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.anger = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.angerMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HPHurtRet')
    if self.targetId is not None:
      oprot.writeFieldBegin('targetId', TType.I64, 1)
      oprot.writeI64(self.targetId)
      oprot.writeFieldEnd()
    if self.curHP is not None:
      oprot.writeFieldBegin('curHP', TType.I32, 2)
      oprot.writeI32(self.curHP)
      oprot.writeFieldEnd()
    if self.curMP is not None:
      oprot.writeFieldBegin('curMP', TType.I32, 3)
      oprot.writeI32(self.curMP)
      oprot.writeFieldEnd()
    if self.hurtHP is not None:
      oprot.writeFieldBegin('hurtHP', TType.I32, 4)
      oprot.writeI32(self.hurtHP)
      oprot.writeFieldEnd()
    if self.critFlag is not None:
      oprot.writeFieldBegin('critFlag', TType.I16, 5)
      oprot.writeI16(self.critFlag)
      oprot.writeFieldEnd()
    if self.hitFlag is not None:
      oprot.writeFieldBegin('hitFlag', TType.I16, 6)
      oprot.writeI16(self.hitFlag)
      oprot.writeFieldEnd()
    if self.anger is not None:
      oprot.writeFieldBegin('anger', TType.I32, 7)
      oprot.writeI32(self.anger)
      oprot.writeFieldEnd()
    if self.angerMax is not None:
      oprot.writeFieldBegin('angerMax', TType.I32, 8)
      oprot.writeI32(self.angerMax)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.targetId)
    value = (value * 31) ^ hash(self.curHP)
    value = (value * 31) ^ hash(self.curMP)
    value = (value * 31) ^ hash(self.hurtHP)
    value = (value * 31) ^ hash(self.critFlag)
    value = (value * 31) ^ hash(self.hitFlag)
    value = (value * 31) ^ hash(self.anger)
    value = (value * 31) ^ hash(self.angerMax)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UseSkillRet:
  """
  Attributes:
   - uid
   - skillId
   - targetId
   - nextCDMs
   - curHP
   - curMP
   - anger
   - angerMax
   - targetX
   - targetY
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.I16, 'skillId', None, 0, ), # 2
    (3, TType.I64, 'targetId', None, 0, ), # 3
    (4, TType.I32, 'nextCDMs', None, 0, ), # 4
    (5, TType.I32, 'curHP', None, 0, ), # 5
    (6, TType.I32, 'curMP', None, 0, ), # 6
    (7, TType.I32, 'anger', None, 0, ), # 7
    (8, TType.I32, 'angerMax', None, 0, ), # 8
    (9, TType.I32, 'targetX', None, 0, ), # 9
    (10, TType.I32, 'targetY', None, 0, ), # 10
  )

  def __init__(self, uid=thrift_spec[1][4], skillId=thrift_spec[2][4], targetId=thrift_spec[3][4], nextCDMs=thrift_spec[4][4], curHP=thrift_spec[5][4], curMP=thrift_spec[6][4], anger=thrift_spec[7][4], angerMax=thrift_spec[8][4], targetX=thrift_spec[9][4], targetY=thrift_spec[10][4],):
    self.uid = uid
    self.skillId = skillId
    self.targetId = targetId
    self.nextCDMs = nextCDMs
    self.curHP = curHP
    self.curMP = curMP
    self.anger = anger
    self.angerMax = angerMax
    self.targetX = targetX
    self.targetY = targetY

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.skillId = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.targetId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.nextCDMs = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.curHP = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.curMP = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.anger = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.angerMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.targetX = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.targetY = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UseSkillRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.skillId is not None:
      oprot.writeFieldBegin('skillId', TType.I16, 2)
      oprot.writeI16(self.skillId)
      oprot.writeFieldEnd()
    if self.targetId is not None:
      oprot.writeFieldBegin('targetId', TType.I64, 3)
      oprot.writeI64(self.targetId)
      oprot.writeFieldEnd()
    if self.nextCDMs is not None:
      oprot.writeFieldBegin('nextCDMs', TType.I32, 4)
      oprot.writeI32(self.nextCDMs)
      oprot.writeFieldEnd()
    if self.curHP is not None:
      oprot.writeFieldBegin('curHP', TType.I32, 5)
      oprot.writeI32(self.curHP)
      oprot.writeFieldEnd()
    if self.curMP is not None:
      oprot.writeFieldBegin('curMP', TType.I32, 6)
      oprot.writeI32(self.curMP)
      oprot.writeFieldEnd()
    if self.anger is not None:
      oprot.writeFieldBegin('anger', TType.I32, 7)
      oprot.writeI32(self.anger)
      oprot.writeFieldEnd()
    if self.angerMax is not None:
      oprot.writeFieldBegin('angerMax', TType.I32, 8)
      oprot.writeI32(self.angerMax)
      oprot.writeFieldEnd()
    if self.targetX is not None:
      oprot.writeFieldBegin('targetX', TType.I32, 9)
      oprot.writeI32(self.targetX)
      oprot.writeFieldEnd()
    if self.targetY is not None:
      oprot.writeFieldBegin('targetY', TType.I32, 10)
      oprot.writeI32(self.targetY)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.skillId)
    value = (value * 31) ^ hash(self.targetId)
    value = (value * 31) ^ hash(self.nextCDMs)
    value = (value * 31) ^ hash(self.curHP)
    value = (value * 31) ^ hash(self.curMP)
    value = (value * 31) ^ hash(self.anger)
    value = (value * 31) ^ hash(self.angerMax)
    value = (value * 31) ^ hash(self.targetX)
    value = (value * 31) ^ hash(self.targetY)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SyncHpMpRet:
  """
  Attributes:
   - uid
   - curHP
   - curMP
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.I32, 'curHP', None, 0, ), # 2
    (3, TType.I32, 'curMP', None, 0, ), # 3
  )

  def __init__(self, uid=thrift_spec[1][4], curHP=thrift_spec[2][4], curMP=thrift_spec[3][4],):
    self.uid = uid
    self.curHP = curHP
    self.curMP = curMP

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.curHP = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.curMP = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SyncHpMpRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.curHP is not None:
      oprot.writeFieldBegin('curHP', TType.I32, 2)
      oprot.writeI32(self.curHP)
      oprot.writeFieldEnd()
    if self.curMP is not None:
      oprot.writeFieldBegin('curMP', TType.I32, 3)
      oprot.writeI32(self.curMP)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.curHP)
    value = (value * 31) ^ hash(self.curMP)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Task:
  """
  Attributes:
   - taskId
   - taskType
   - status
   - action
   - object
   - value
   - destValue
   - name
   - targetDesc
   - acceptnpc
   - finishnpc
   - needlevel
   - gold
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'taskId', None, 0, ), # 1
    (2, TType.I16, 'taskType', None, 0, ), # 2
    (3, TType.I16, 'status', None, 0, ), # 3
    (4, TType.I32, 'action', None, 0, ), # 4
    (5, TType.I32, 'object', None, 0, ), # 5
    (6, TType.I32, 'value', None, 0, ), # 6
    (7, TType.I32, 'destValue', None, 0, ), # 7
    (8, TType.STRING, 'name', None, "", ), # 8
    (9, TType.STRING, 'targetDesc', None, "", ), # 9
    (10, TType.STRING, 'acceptnpc', None, "", ), # 10
    (11, TType.STRING, 'finishnpc', None, "", ), # 11
    (12, TType.I16, 'needlevel', None, 0, ), # 12
    (13, TType.I32, 'gold', None, 0, ), # 13
    (14, TType.I32, 'exp', None, 0, ), # 14
  )

  def __init__(self, taskId=thrift_spec[1][4], taskType=thrift_spec[2][4], status=thrift_spec[3][4], action=thrift_spec[4][4], object=thrift_spec[5][4], value=thrift_spec[6][4], destValue=thrift_spec[7][4], name=thrift_spec[8][4], targetDesc=thrift_spec[9][4], acceptnpc=thrift_spec[10][4], finishnpc=thrift_spec[11][4], needlevel=thrift_spec[12][4], gold=thrift_spec[13][4], exp=thrift_spec[14][4],):
    self.taskId = taskId
    self.taskType = taskType
    self.status = status
    self.action = action
    self.object = object
    self.value = value
    self.destValue = destValue
    self.name = name
    self.targetDesc = targetDesc
    self.acceptnpc = acceptnpc
    self.finishnpc = finishnpc
    self.needlevel = needlevel
    self.gold = gold
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.taskId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.taskType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.action = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.object = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.value = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.destValue = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.targetDesc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.acceptnpc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.finishnpc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.needlevel = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.gold = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Task')
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.I32, 1)
      oprot.writeI32(self.taskId)
      oprot.writeFieldEnd()
    if self.taskType is not None:
      oprot.writeFieldBegin('taskType', TType.I16, 2)
      oprot.writeI16(self.taskType)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 3)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.I32, 4)
      oprot.writeI32(self.action)
      oprot.writeFieldEnd()
    if self.object is not None:
      oprot.writeFieldBegin('object', TType.I32, 5)
      oprot.writeI32(self.object)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I32, 6)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.destValue is not None:
      oprot.writeFieldBegin('destValue', TType.I32, 7)
      oprot.writeI32(self.destValue)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 8)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.targetDesc is not None:
      oprot.writeFieldBegin('targetDesc', TType.STRING, 9)
      oprot.writeString(self.targetDesc)
      oprot.writeFieldEnd()
    if self.acceptnpc is not None:
      oprot.writeFieldBegin('acceptnpc', TType.STRING, 10)
      oprot.writeString(self.acceptnpc)
      oprot.writeFieldEnd()
    if self.finishnpc is not None:
      oprot.writeFieldBegin('finishnpc', TType.STRING, 11)
      oprot.writeString(self.finishnpc)
      oprot.writeFieldEnd()
    if self.needlevel is not None:
      oprot.writeFieldBegin('needlevel', TType.I16, 12)
      oprot.writeI16(self.needlevel)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I32, 13)
      oprot.writeI32(self.gold)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 14)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskId)
    value = (value * 31) ^ hash(self.taskType)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.action)
    value = (value * 31) ^ hash(self.object)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.destValue)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.targetDesc)
    value = (value * 31) ^ hash(self.acceptnpc)
    value = (value * 31) ^ hash(self.finishnpc)
    value = (value * 31) ^ hash(self.needlevel)
    value = (value * 31) ^ hash(self.gold)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskListRet:
  """
  Attributes:
   - allTask
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'allTask', (TType.STRUCT,(Task, Task.thrift_spec)), None, ), # 1
  )

  def __init__(self, allTask=None,):
    self.allTask = allTask

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.allTask = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = Task()
            _elem40.read(iprot)
            self.allTask.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskListRet')
    if self.allTask is not None:
      oprot.writeFieldBegin('allTask', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.allTask))
      for iter41 in self.allTask:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.allTask)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateTaskStatusReq:
  """
  Attributes:
   - taskId
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'taskId', None, 0, ), # 1
    (2, TType.I16, 'status', None, 0, ), # 2
  )

  def __init__(self, taskId=thrift_spec[1][4], status=thrift_spec[2][4],):
    self.taskId = taskId
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.taskId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateTaskStatusReq')
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.I32, 1)
      oprot.writeI32(self.taskId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 2)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskId)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateTaskStatusRet:
  """
  Attributes:
   - taskId
   - status
   - value
   - nextTask
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'taskId', None, 0, ), # 1
    (2, TType.I16, 'status', None, 0, ), # 2
    (3, TType.I32, 'value', None, 0, ), # 3
    (4, TType.STRUCT, 'nextTask', (Task, Task.thrift_spec), None, ), # 4
  )

  def __init__(self, taskId=thrift_spec[1][4], status=thrift_spec[2][4], value=thrift_spec[3][4], nextTask=None,):
    self.taskId = taskId
    self.status = status
    self.value = value
    self.nextTask = nextTask

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.taskId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nextTask = Task()
          self.nextTask.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateTaskStatusRet')
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.I32, 1)
      oprot.writeI32(self.taskId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 2)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I32, 3)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.nextTask is not None:
      oprot.writeFieldBegin('nextTask', TType.STRUCT, 4)
      self.nextTask.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.nextTask)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShowTaskPanelRet:
  """
  Attributes:
   - showType
   - taskId
   - content
   - callbackId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'showType', None, 0, ), # 1
    (2, TType.I32, 'taskId', None, 0, ), # 2
    (3, TType.STRING, 'content', None, "", ), # 3
    (4, TType.I64, 'callbackId', None, 0, ), # 4
  )

  def __init__(self, showType=thrift_spec[1][4], taskId=thrift_spec[2][4], content=thrift_spec[3][4], callbackId=thrift_spec[4][4],):
    self.showType = showType
    self.taskId = taskId
    self.content = content
    self.callbackId = callbackId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.showType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.taskId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.content = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.callbackId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShowTaskPanelRet')
    if self.showType is not None:
      oprot.writeFieldBegin('showType', TType.I16, 1)
      oprot.writeI16(self.showType)
      oprot.writeFieldEnd()
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.I32, 2)
      oprot.writeI32(self.taskId)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 3)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.callbackId is not None:
      oprot.writeFieldBegin('callbackId', TType.I64, 4)
      oprot.writeI64(self.callbackId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.showType)
    value = (value * 31) ^ hash(self.taskId)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.callbackId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServerCallBackReq:
  """
  Attributes:
   - callbackId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'callbackId', None, 0, ), # 1
  )

  def __init__(self, callbackId=thrift_spec[1][4],):
    self.callbackId = callbackId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.callbackId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerCallBackReq')
    if self.callbackId is not None:
      oprot.writeFieldBegin('callbackId', TType.I64, 1)
      oprot.writeI64(self.callbackId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.callbackId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Skill:
  """
  Attributes:
   - skillId
   - skillLevel
   - lastUsedTM
   - cd
   - position
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'skillId', None, 0, ), # 1
    (2, TType.I16, 'skillLevel', None, 0, ), # 2
    (3, TType.I32, 'lastUsedTM', None, 0, ), # 3
    (4, TType.I16, 'cd', None, 0, ), # 4
    (5, TType.I16, 'position', None, 0, ), # 5
    (6, TType.I32, 'exp', None, 0, ), # 6
  )

  def __init__(self, skillId=thrift_spec[1][4], skillLevel=thrift_spec[2][4], lastUsedTM=thrift_spec[3][4], cd=thrift_spec[4][4], position=thrift_spec[5][4], exp=thrift_spec[6][4],):
    self.skillId = skillId
    self.skillLevel = skillLevel
    self.lastUsedTM = lastUsedTM
    self.cd = cd
    self.position = position
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.skillId = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.skillLevel = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.lastUsedTM = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.cd = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.position = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Skill')
    if self.skillId is not None:
      oprot.writeFieldBegin('skillId', TType.I16, 1)
      oprot.writeI16(self.skillId)
      oprot.writeFieldEnd()
    if self.skillLevel is not None:
      oprot.writeFieldBegin('skillLevel', TType.I16, 2)
      oprot.writeI16(self.skillLevel)
      oprot.writeFieldEnd()
    if self.lastUsedTM is not None:
      oprot.writeFieldBegin('lastUsedTM', TType.I32, 3)
      oprot.writeI32(self.lastUsedTM)
      oprot.writeFieldEnd()
    if self.cd is not None:
      oprot.writeFieldBegin('cd', TType.I16, 4)
      oprot.writeI16(self.cd)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.I16, 5)
      oprot.writeI16(self.position)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 6)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.skillId)
    value = (value * 31) ^ hash(self.skillLevel)
    value = (value * 31) ^ hash(self.lastUsedTM)
    value = (value * 31) ^ hash(self.cd)
    value = (value * 31) ^ hash(self.position)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EquipOpsReq:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EquipOpsReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EquipItemRet:
  """
  Attributes:
   - itemIdEquip
   - itemIdUnEquip
   - itemIdUnEquipPos
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'itemIdEquip', None, 0, ), # 1
    (2, TType.I64, 'itemIdUnEquip', None, 0, ), # 2
    (3, TType.I32, 'itemIdUnEquipPos', None, 0, ), # 3
  )

  def __init__(self, itemIdEquip=thrift_spec[1][4], itemIdUnEquip=thrift_spec[2][4], itemIdUnEquipPos=thrift_spec[3][4],):
    self.itemIdEquip = itemIdEquip
    self.itemIdUnEquip = itemIdUnEquip
    self.itemIdUnEquipPos = itemIdUnEquipPos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.itemIdEquip = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.itemIdUnEquip = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.itemIdUnEquipPos = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EquipItemRet')
    if self.itemIdEquip is not None:
      oprot.writeFieldBegin('itemIdEquip', TType.I64, 1)
      oprot.writeI64(self.itemIdEquip)
      oprot.writeFieldEnd()
    if self.itemIdUnEquip is not None:
      oprot.writeFieldBegin('itemIdUnEquip', TType.I64, 2)
      oprot.writeI64(self.itemIdUnEquip)
      oprot.writeFieldEnd()
    if self.itemIdUnEquipPos is not None:
      oprot.writeFieldBegin('itemIdUnEquipPos', TType.I32, 3)
      oprot.writeI32(self.itemIdUnEquipPos)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemIdEquip)
    value = (value * 31) ^ hash(self.itemIdUnEquip)
    value = (value * 31) ^ hash(self.itemIdUnEquipPos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UnEquipItemRet:
  """
  Attributes:
   - itemIdUnEquip
   - itemIdUnEquipPos
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I64, 'itemIdUnEquip', None, 0, ), # 2
    (3, TType.I32, 'itemIdUnEquipPos', None, 0, ), # 3
  )

  def __init__(self, itemIdUnEquip=thrift_spec[2][4], itemIdUnEquipPos=thrift_spec[3][4],):
    self.itemIdUnEquip = itemIdUnEquip
    self.itemIdUnEquipPos = itemIdUnEquipPos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I64:
          self.itemIdUnEquip = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.itemIdUnEquipPos = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UnEquipItemRet')
    if self.itemIdUnEquip is not None:
      oprot.writeFieldBegin('itemIdUnEquip', TType.I64, 2)
      oprot.writeI64(self.itemIdUnEquip)
      oprot.writeFieldEnd()
    if self.itemIdUnEquipPos is not None:
      oprot.writeFieldBegin('itemIdUnEquipPos', TType.I32, 3)
      oprot.writeI32(self.itemIdUnEquipPos)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemIdUnEquip)
    value = (value * 31) ^ hash(self.itemIdUnEquipPos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ThrowItemRet:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ThrowItemRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UseItemReq:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UseItemReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UseItemRet:
  """
  Attributes:
   - uid
   - leftTimes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.I32, 'leftTimes', None, 0, ), # 2
  )

  def __init__(self, uid=thrift_spec[1][4], leftTimes=thrift_spec[2][4],):
    self.uid = uid
    self.leftTimes = leftTimes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.leftTimes = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UseItemRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.leftTimes is not None:
      oprot.writeFieldBegin('leftTimes', TType.I32, 2)
      oprot.writeI32(self.leftTimes)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.leftTimes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DieJiaItemReq:
  """
  Attributes:
   - uidFrom
   - uidTo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uidFrom', None, 0, ), # 1
    (2, TType.I64, 'uidTo', None, 0, ), # 2
  )

  def __init__(self, uidFrom=thrift_spec[1][4], uidTo=thrift_spec[2][4],):
    self.uidFrom = uidFrom
    self.uidTo = uidTo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uidFrom = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uidTo = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DieJiaItemReq')
    if self.uidFrom is not None:
      oprot.writeFieldBegin('uidFrom', TType.I64, 1)
      oprot.writeI64(self.uidFrom)
      oprot.writeFieldEnd()
    if self.uidTo is not None:
      oprot.writeFieldBegin('uidTo', TType.I64, 2)
      oprot.writeI64(self.uidTo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uidFrom)
    value = (value * 31) ^ hash(self.uidTo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DieJiaItemRet:
  """
  Attributes:
   - uidFrom
   - uidTo
   - leftTimes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uidFrom', None, 0, ), # 1
    (2, TType.I64, 'uidTo', None, 0, ), # 2
    (3, TType.I32, 'leftTimes', None, 0, ), # 3
  )

  def __init__(self, uidFrom=thrift_spec[1][4], uidTo=thrift_spec[2][4], leftTimes=thrift_spec[3][4],):
    self.uidFrom = uidFrom
    self.uidTo = uidTo
    self.leftTimes = leftTimes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uidFrom = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uidTo = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.leftTimes = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DieJiaItemRet')
    if self.uidFrom is not None:
      oprot.writeFieldBegin('uidFrom', TType.I64, 1)
      oprot.writeI64(self.uidFrom)
      oprot.writeFieldEnd()
    if self.uidTo is not None:
      oprot.writeFieldBegin('uidTo', TType.I64, 2)
      oprot.writeI64(self.uidTo)
      oprot.writeFieldEnd()
    if self.leftTimes is not None:
      oprot.writeFieldBegin('leftTimes', TType.I32, 3)
      oprot.writeI32(self.leftTimes)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uidFrom)
    value = (value * 31) ^ hash(self.uidTo)
    value = (value * 31) ^ hash(self.leftTimes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuerySkillRet:
  """
  Attributes:
   - allSkill
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'allSkill', (TType.STRUCT,(Skill, Skill.thrift_spec)), None, ), # 1
  )

  def __init__(self, allSkill=None,):
    self.allSkill = allSkill

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.allSkill = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = Skill()
            _elem47.read(iprot)
            self.allSkill.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuerySkillRet')
    if self.allSkill is not None:
      oprot.writeFieldBegin('allSkill', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.allSkill))
      for iter48 in self.allSkill:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.allSkill)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Item:
  """
  Attributes:
   - uid
   - itemCfgId
   - name
   - strengthenLevel
   - lefttimes
   - propExt
   - propStrengthen
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.I32, 'itemCfgId', None, 0, ), # 2
    (3, TType.STRING, 'name', None, "", ), # 3
    (4, TType.I16, 'strengthenLevel', None, 0, ), # 4
    (5, TType.I32, 'lefttimes', None, 0, ), # 5
    (6, TType.MAP, 'propExt', (TType.I32,None,TType.I32,None), None, ), # 6
    (7, TType.MAP, 'propStrengthen', (TType.I32,None,TType.I32,None), None, ), # 7
  )

  def __init__(self, uid=thrift_spec[1][4], itemCfgId=thrift_spec[2][4], name=thrift_spec[3][4], strengthenLevel=thrift_spec[4][4], lefttimes=thrift_spec[5][4], propExt=None, propStrengthen=None,):
    self.uid = uid
    self.itemCfgId = itemCfgId
    self.name = name
    self.strengthenLevel = strengthenLevel
    self.lefttimes = lefttimes
    self.propExt = propExt
    self.propStrengthen = propStrengthen

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.itemCfgId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.strengthenLevel = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.lefttimes = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.propExt = {}
          (_ktype50, _vtype51, _size49 ) = iprot.readMapBegin()
          for _i53 in xrange(_size49):
            _key54 = iprot.readI32()
            _val55 = iprot.readI32()
            self.propExt[_key54] = _val55
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.propStrengthen = {}
          (_ktype57, _vtype58, _size56 ) = iprot.readMapBegin()
          for _i60 in xrange(_size56):
            _key61 = iprot.readI32()
            _val62 = iprot.readI32()
            self.propStrengthen[_key61] = _val62
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Item')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.itemCfgId is not None:
      oprot.writeFieldBegin('itemCfgId', TType.I32, 2)
      oprot.writeI32(self.itemCfgId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.strengthenLevel is not None:
      oprot.writeFieldBegin('strengthenLevel', TType.I16, 4)
      oprot.writeI16(self.strengthenLevel)
      oprot.writeFieldEnd()
    if self.lefttimes is not None:
      oprot.writeFieldBegin('lefttimes', TType.I32, 5)
      oprot.writeI32(self.lefttimes)
      oprot.writeFieldEnd()
    if self.propExt is not None:
      oprot.writeFieldBegin('propExt', TType.MAP, 6)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.propExt))
      for kiter63,viter64 in self.propExt.items():
        oprot.writeI32(kiter63)
        oprot.writeI32(viter64)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.propStrengthen is not None:
      oprot.writeFieldBegin('propStrengthen', TType.MAP, 7)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.propStrengthen))
      for kiter65,viter66 in self.propStrengthen.items():
        oprot.writeI32(kiter65)
        oprot.writeI32(viter66)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.itemCfgId)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.strengthenLevel)
    value = (value * 31) ^ hash(self.lefttimes)
    value = (value * 31) ^ hash(self.propExt)
    value = (value * 31) ^ hash(self.propStrengthen)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PickUpItemReq:
  """
  Attributes:
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'x', None, 0, ), # 1
    (2, TType.I32, 'y', None, 0, ), # 2
  )

  def __init__(self, x=thrift_spec[1][4], y=thrift_spec[2][4],):
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PickUpItemReq')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 1)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 2)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PickUpItemRet:
  """
  Attributes:
   - item
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'item', (Item, Item.thrift_spec), None, ), # 1
  )

  def __init__(self, item=None,):
    self.item = item

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.item = Item()
          self.item.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PickUpItemRet')
    if self.item is not None:
      oprot.writeFieldBegin('item', TType.STRUCT, 1)
      self.item.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.item)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StrengthenItemReq:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StrengthenItemReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StrengthenItemRet:
  """
  Attributes:
   - uid
   - level
   - propAdded
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.I16, 'level', None, 0, ), # 2
    (3, TType.MAP, 'propAdded', (TType.I32,None,TType.I32,None), None, ), # 3
  )

  def __init__(self, uid=thrift_spec[1][4], level=thrift_spec[2][4], propAdded=None,):
    self.uid = uid
    self.level = level
    self.propAdded = propAdded

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.level = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.propAdded = {}
          (_ktype68, _vtype69, _size67 ) = iprot.readMapBegin()
          for _i71 in xrange(_size67):
            _key72 = iprot.readI32()
            _val73 = iprot.readI32()
            self.propAdded[_key72] = _val73
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StrengthenItemRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I16, 2)
      oprot.writeI16(self.level)
      oprot.writeFieldEnd()
    if self.propAdded is not None:
      oprot.writeFieldBegin('propAdded', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.propAdded))
      for kiter74,viter75 in self.propAdded.items():
        oprot.writeI32(kiter74)
        oprot.writeI32(viter75)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.propAdded)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryPkgRet:
  """
  Attributes:
   - allItem
   - pkgMaxSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'allItem', (TType.I16,None,TType.STRUCT,(Item, Item.thrift_spec)), None, ), # 1
    (2, TType.I32, 'pkgMaxSize', None, 0, ), # 2
  )

  def __init__(self, allItem=None, pkgMaxSize=thrift_spec[2][4],):
    self.allItem = allItem
    self.pkgMaxSize = pkgMaxSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.allItem = {}
          (_ktype77, _vtype78, _size76 ) = iprot.readMapBegin()
          for _i80 in xrange(_size76):
            _key81 = iprot.readI16()
            _val82 = Item()
            _val82.read(iprot)
            self.allItem[_key81] = _val82
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.pkgMaxSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryPkgRet')
    if self.allItem is not None:
      oprot.writeFieldBegin('allItem', TType.MAP, 1)
      oprot.writeMapBegin(TType.I16, TType.STRUCT, len(self.allItem))
      for kiter83,viter84 in self.allItem.items():
        oprot.writeI16(kiter83)
        viter84.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.pkgMaxSize is not None:
      oprot.writeFieldBegin('pkgMaxSize', TType.I32, 2)
      oprot.writeI32(self.pkgMaxSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.allItem)
    value = (value * 31) ^ hash(self.pkgMaxSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryEquipReq:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryEquipReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryEquipRet:
  """
  Attributes:
   - allItem
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'allItem', (TType.I16,None,TType.STRUCT,(Item, Item.thrift_spec)), None, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
  )

  def __init__(self, allItem=None, uid=thrift_spec[2][4],):
    self.allItem = allItem
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.allItem = {}
          (_ktype86, _vtype87, _size85 ) = iprot.readMapBegin()
          for _i89 in xrange(_size85):
            _key90 = iprot.readI16()
            _val91 = Item()
            _val91.read(iprot)
            self.allItem[_key90] = _val91
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryEquipRet')
    if self.allItem is not None:
      oprot.writeFieldBegin('allItem', TType.MAP, 1)
      oprot.writeMapBegin(TType.I16, TType.STRUCT, len(self.allItem))
      for kiter92,viter93 in self.allItem.items():
        oprot.writeI16(kiter92)
        viter93.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.allItem)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemEnterMapRet:
  """
  Attributes:
   - uid
   - itemCfgId
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.I32, 'itemCfgId', None, 0, ), # 2
    (3, TType.I32, 'x', None, 0, ), # 3
    (4, TType.I32, 'y', None, 0, ), # 4
  )

  def __init__(self, uid=thrift_spec[1][4], itemCfgId=thrift_spec[2][4], x=thrift_spec[3][4], y=thrift_spec[4][4],):
    self.uid = uid
    self.itemCfgId = itemCfgId
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.itemCfgId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemEnterMapRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.itemCfgId is not None:
      oprot.writeFieldBegin('itemCfgId', TType.I32, 2)
      oprot.writeI32(self.itemCfgId)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 3)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 4)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.itemCfgId)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EmptyReq:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EmptyReq')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoginReq:
  """
  Attributes:
   - username
   - password
   - reconnectUid
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, "", ), # 1
    (2, TType.STRING, 'password', None, "", ), # 2
    (3, TType.I64, 'reconnectUid', None, 0, ), # 3
    (4, TType.I32, 'x', None, 0, ), # 4
    (5, TType.I32, 'y', None, 0, ), # 5
  )

  def __init__(self, username=thrift_spec[1][4], password=thrift_spec[2][4], reconnectUid=thrift_spec[3][4], x=thrift_spec[4][4], y=thrift_spec[5][4],):
    self.username = username
    self.password = password
    self.reconnectUid = reconnectUid
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.username = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.reconnectUid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoginReq')
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 1)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.reconnectUid is not None:
      oprot.writeFieldBegin('reconnectUid', TType.I64, 3)
      oprot.writeI64(self.reconnectUid)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 4)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 5)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.password)
    value = (value * 31) ^ hash(self.reconnectUid)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReLoginRet:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReLoginRet')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RoleInfo:
  """
  Attributes:
   - uid
   - name
   - job
   - gender
   - level
   - exp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I16, 'job', None, 0, ), # 3
    (4, TType.I16, 'gender', None, 0, ), # 4
    (5, TType.I16, 'level', None, 0, ), # 5
    (6, TType.I32, 'exp', None, 0, ), # 6
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], job=thrift_spec[3][4], gender=thrift_spec[4][4], level=thrift_spec[5][4], exp=thrift_spec[6][4],):
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.exp = exp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.level = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RoleInfo')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 3)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 4)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I16, 5)
      oprot.writeI16(self.level)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 6)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.exp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfoRet:
  """
  Attributes:
   - timeServer
   - listRole
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'timeServer', None, 0, ), # 1
    (2, TType.LIST, 'listRole', (TType.STRUCT,(RoleInfo, RoleInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, timeServer=thrift_spec[1][4], listRole=None,):
    self.timeServer = timeServer
    self.listRole = listRole

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.timeServer = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.listRole = []
          (_etype97, _size94) = iprot.readListBegin()
          for _i98 in xrange(_size94):
            _elem99 = RoleInfo()
            _elem99.read(iprot)
            self.listRole.append(_elem99)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfoRet')
    if self.timeServer is not None:
      oprot.writeFieldBegin('timeServer', TType.I32, 1)
      oprot.writeI32(self.timeServer)
      oprot.writeFieldEnd()
    if self.listRole is not None:
      oprot.writeFieldBegin('listRole', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.listRole))
      for iter100 in self.listRole:
        iter100.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timeServer)
    value = (value * 31) ^ hash(self.listRole)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateRoleReq:
  """
  Attributes:
   - name
   - job
   - gender
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, "", ), # 1
    (2, TType.I16, 'job', None, 0, ), # 2
    (3, TType.I16, 'gender', None, 0, ), # 3
  )

  def __init__(self, name=thrift_spec[1][4], job=thrift_spec[2][4], gender=thrift_spec[3][4],):
    self.name = name
    self.job = job
    self.gender = gender

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreateRoleReq')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 2)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 3)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateRoleRet:
  """
  Attributes:
   - flag
   - errMsg
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'flag', None, False, ), # 1
    (2, TType.STRING, 'errMsg', None, "", ), # 2
    (3, TType.I64, 'uid', None, 0, ), # 3
  )

  def __init__(self, flag=thrift_spec[1][4], errMsg=thrift_spec[2][4], uid=thrift_spec[3][4],):
    self.flag = flag
    self.errMsg = errMsg
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.flag = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errMsg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreateRoleRet')
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.BOOL, 1)
      oprot.writeBool(self.flag)
      oprot.writeFieldEnd()
    if self.errMsg is not None:
      oprot.writeFieldBegin('errMsg', TType.STRING, 2)
      oprot.writeString(self.errMsg)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 3)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.flag)
    value = (value * 31) ^ hash(self.errMsg)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SelectRoleReq:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SelectRoleReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelRoleReq:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelRoleReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DelRoleRet:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DelRoleRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RandNameReq:
  """
  Attributes:
   - gender
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'gender', None, 1, ), # 1
  )

  def __init__(self, gender=thrift_spec[1][4],):
    self.gender = gender

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RandNameReq')
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 1)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gender)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RandNameRet:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, "", ), # 1
  )

  def __init__(self, name=thrift_spec[1][4],):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RandNameRet')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayerInfoRet:
  """
  Attributes:
   - uid
   - name
   - job
   - gender
   - mapname
   - x
   - y
   - level
   - direction
   - hp
   - hpMax
   - mp
   - mpMax
   - exp
   - expMax
   - pkSinValue
   - color
   - xiongJiaCfgId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I16, 'job', None, 0, ), # 3
    (4, TType.I16, 'gender', None, 0, ), # 4
    (5, TType.STRING, 'mapname', None, "", ), # 5
    (6, TType.I32, 'x', None, 0, ), # 6
    (7, TType.I32, 'y', None, 0, ), # 7
    (8, TType.I32, 'level', None, 0, ), # 8
    (9, TType.I16, 'direction', None, 0, ), # 9
    (10, TType.I32, 'hp', None, 0, ), # 10
    (11, TType.I32, 'hpMax', None, 0, ), # 11
    (12, TType.I32, 'mp', None, 0, ), # 12
    (13, TType.I32, 'mpMax', None, 0, ), # 13
    (14, TType.I32, 'exp', None, 0, ), # 14
    (15, TType.I32, 'expMax', None, 0, ), # 15
    None, # 16
    (17, TType.I16, 'pkSinValue', None, 0, ), # 17
    (18, TType.I16, 'color', None, 0, ), # 18
    (19, TType.I32, 'xiongJiaCfgId', None, 0, ), # 19
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], job=thrift_spec[3][4], gender=thrift_spec[4][4], mapname=thrift_spec[5][4], x=thrift_spec[6][4], y=thrift_spec[7][4], level=thrift_spec[8][4], direction=thrift_spec[9][4], hp=thrift_spec[10][4], hpMax=thrift_spec[11][4], mp=thrift_spec[12][4], mpMax=thrift_spec[13][4], exp=thrift_spec[14][4], expMax=thrift_spec[15][4], pkSinValue=thrift_spec[17][4], color=thrift_spec[18][4], xiongJiaCfgId=thrift_spec[19][4],):
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.mapname = mapname
    self.x = x
    self.y = y
    self.level = level
    self.direction = direction
    self.hp = hp
    self.hpMax = hpMax
    self.mp = mp
    self.mpMax = mpMax
    self.exp = exp
    self.expMax = expMax
    self.pkSinValue = pkSinValue
    self.color = color
    self.xiongJiaCfgId = xiongJiaCfgId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mapname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.direction = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.hp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.hpMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.mp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.mpMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.expMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I16:
          self.pkSinValue = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I16:
          self.color = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.xiongJiaCfgId = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayerInfoRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 3)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 4)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.mapname is not None:
      oprot.writeFieldBegin('mapname', TType.STRING, 5)
      oprot.writeString(self.mapname)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 6)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 7)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 8)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I16, 9)
      oprot.writeI16(self.direction)
      oprot.writeFieldEnd()
    if self.hp is not None:
      oprot.writeFieldBegin('hp', TType.I32, 10)
      oprot.writeI32(self.hp)
      oprot.writeFieldEnd()
    if self.hpMax is not None:
      oprot.writeFieldBegin('hpMax', TType.I32, 11)
      oprot.writeI32(self.hpMax)
      oprot.writeFieldEnd()
    if self.mp is not None:
      oprot.writeFieldBegin('mp', TType.I32, 12)
      oprot.writeI32(self.mp)
      oprot.writeFieldEnd()
    if self.mpMax is not None:
      oprot.writeFieldBegin('mpMax', TType.I32, 13)
      oprot.writeI32(self.mpMax)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 14)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    if self.expMax is not None:
      oprot.writeFieldBegin('expMax', TType.I32, 15)
      oprot.writeI32(self.expMax)
      oprot.writeFieldEnd()
    if self.pkSinValue is not None:
      oprot.writeFieldBegin('pkSinValue', TType.I16, 17)
      oprot.writeI16(self.pkSinValue)
      oprot.writeFieldEnd()
    if self.color is not None:
      oprot.writeFieldBegin('color', TType.I16, 18)
      oprot.writeI16(self.color)
      oprot.writeFieldEnd()
    if self.xiongJiaCfgId is not None:
      oprot.writeFieldBegin('xiongJiaCfgId', TType.I32, 19)
      oprot.writeI32(self.xiongJiaCfgId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.mapname)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.direction)
    value = (value * 31) ^ hash(self.hp)
    value = (value * 31) ^ hash(self.hpMax)
    value = (value * 31) ^ hash(self.mp)
    value = (value * 31) ^ hash(self.mpMax)
    value = (value * 31) ^ hash(self.exp)
    value = (value * 31) ^ hash(self.expMax)
    value = (value * 31) ^ hash(self.pkSinValue)
    value = (value * 31) ^ hash(self.color)
    value = (value * 31) ^ hash(self.xiongJiaCfgId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayerPropRet:
  """
  Attributes:
   - baseInfo
   - physicAttackMin
   - physicAttackMax
   - magicAttackMin
   - magicAttackMax
   - physicDefendMin
   - physicDefendMax
   - magicDefendMin
   - magicDefendMax
   - gold
   - crit
   - hit
   - avoid
   - attackSpeed
   - attackSing
   - attackInterval
   - attackDistance
   - moveSpeed
   - hurtAbsorb
   - hpAbsorb
   - fightPower
   - anger
   - angerMax
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'baseInfo', (PlayerInfoRet, PlayerInfoRet.thrift_spec), None, ), # 1
    (2, TType.I32, 'physicAttackMin', None, 0, ), # 2
    (3, TType.I32, 'physicAttackMax', None, 0, ), # 3
    (4, TType.I32, 'magicAttackMin', None, 0, ), # 4
    (5, TType.I32, 'magicAttackMax', None, 0, ), # 5
    (6, TType.I32, 'physicDefendMin', None, 0, ), # 6
    (7, TType.I32, 'physicDefendMax', None, 0, ), # 7
    (8, TType.I32, 'magicDefendMin', None, 0, ), # 8
    (9, TType.I32, 'magicDefendMax', None, 0, ), # 9
    (10, TType.I32, 'gold', None, 0, ), # 10
    (11, TType.I16, 'crit', None, 0, ), # 11
    (12, TType.I16, 'hit', None, 0, ), # 12
    (13, TType.I16, 'avoid', None, 0, ), # 13
    (14, TType.I16, 'attackSpeed', None, 0, ), # 14
    (15, TType.I16, 'attackSing', None, 0, ), # 15
    (16, TType.I16, 'attackInterval', None, 0, ), # 16
    (17, TType.I16, 'attackDistance', None, 0, ), # 17
    (18, TType.I16, 'moveSpeed', None, 0, ), # 18
    (19, TType.I16, 'hurtAbsorb', None, 0, ), # 19
    (20, TType.I16, 'hpAbsorb', None, 0, ), # 20
    (21, TType.I32, 'fightPower', None, 0, ), # 21
    (22, TType.I32, 'anger', None, 0, ), # 22
    (23, TType.I32, 'angerMax', None, 0, ), # 23
  )

  def __init__(self, baseInfo=None, physicAttackMin=thrift_spec[2][4], physicAttackMax=thrift_spec[3][4], magicAttackMin=thrift_spec[4][4], magicAttackMax=thrift_spec[5][4], physicDefendMin=thrift_spec[6][4], physicDefendMax=thrift_spec[7][4], magicDefendMin=thrift_spec[8][4], magicDefendMax=thrift_spec[9][4], gold=thrift_spec[10][4], crit=thrift_spec[11][4], hit=thrift_spec[12][4], avoid=thrift_spec[13][4], attackSpeed=thrift_spec[14][4], attackSing=thrift_spec[15][4], attackInterval=thrift_spec[16][4], attackDistance=thrift_spec[17][4], moveSpeed=thrift_spec[18][4], hurtAbsorb=thrift_spec[19][4], hpAbsorb=thrift_spec[20][4], fightPower=thrift_spec[21][4], anger=thrift_spec[22][4], angerMax=thrift_spec[23][4],):
    self.baseInfo = baseInfo
    self.physicAttackMin = physicAttackMin
    self.physicAttackMax = physicAttackMax
    self.magicAttackMin = magicAttackMin
    self.magicAttackMax = magicAttackMax
    self.physicDefendMin = physicDefendMin
    self.physicDefendMax = physicDefendMax
    self.magicDefendMin = magicDefendMin
    self.magicDefendMax = magicDefendMax
    self.gold = gold
    self.crit = crit
    self.hit = hit
    self.avoid = avoid
    self.attackSpeed = attackSpeed
    self.attackSing = attackSing
    self.attackInterval = attackInterval
    self.attackDistance = attackDistance
    self.moveSpeed = moveSpeed
    self.hurtAbsorb = hurtAbsorb
    self.hpAbsorb = hpAbsorb
    self.fightPower = fightPower
    self.anger = anger
    self.angerMax = angerMax

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.baseInfo = PlayerInfoRet()
          self.baseInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.physicAttackMin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.physicAttackMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.magicAttackMin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.magicAttackMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.physicDefendMin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.physicDefendMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.magicDefendMin = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.magicDefendMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.gold = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.crit = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.hit = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.avoid = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I16:
          self.attackSpeed = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I16:
          self.attackSing = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I16:
          self.attackInterval = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I16:
          self.attackDistance = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I16:
          self.moveSpeed = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I16:
          self.hurtAbsorb = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I16:
          self.hpAbsorb = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.fightPower = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.anger = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.angerMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayerPropRet')
    if self.baseInfo is not None:
      oprot.writeFieldBegin('baseInfo', TType.STRUCT, 1)
      self.baseInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.physicAttackMin is not None:
      oprot.writeFieldBegin('physicAttackMin', TType.I32, 2)
      oprot.writeI32(self.physicAttackMin)
      oprot.writeFieldEnd()
    if self.physicAttackMax is not None:
      oprot.writeFieldBegin('physicAttackMax', TType.I32, 3)
      oprot.writeI32(self.physicAttackMax)
      oprot.writeFieldEnd()
    if self.magicAttackMin is not None:
      oprot.writeFieldBegin('magicAttackMin', TType.I32, 4)
      oprot.writeI32(self.magicAttackMin)
      oprot.writeFieldEnd()
    if self.magicAttackMax is not None:
      oprot.writeFieldBegin('magicAttackMax', TType.I32, 5)
      oprot.writeI32(self.magicAttackMax)
      oprot.writeFieldEnd()
    if self.physicDefendMin is not None:
      oprot.writeFieldBegin('physicDefendMin', TType.I32, 6)
      oprot.writeI32(self.physicDefendMin)
      oprot.writeFieldEnd()
    if self.physicDefendMax is not None:
      oprot.writeFieldBegin('physicDefendMax', TType.I32, 7)
      oprot.writeI32(self.physicDefendMax)
      oprot.writeFieldEnd()
    if self.magicDefendMin is not None:
      oprot.writeFieldBegin('magicDefendMin', TType.I32, 8)
      oprot.writeI32(self.magicDefendMin)
      oprot.writeFieldEnd()
    if self.magicDefendMax is not None:
      oprot.writeFieldBegin('magicDefendMax', TType.I32, 9)
      oprot.writeI32(self.magicDefendMax)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I32, 10)
      oprot.writeI32(self.gold)
      oprot.writeFieldEnd()
    if self.crit is not None:
      oprot.writeFieldBegin('crit', TType.I16, 11)
      oprot.writeI16(self.crit)
      oprot.writeFieldEnd()
    if self.hit is not None:
      oprot.writeFieldBegin('hit', TType.I16, 12)
      oprot.writeI16(self.hit)
      oprot.writeFieldEnd()
    if self.avoid is not None:
      oprot.writeFieldBegin('avoid', TType.I16, 13)
      oprot.writeI16(self.avoid)
      oprot.writeFieldEnd()
    if self.attackSpeed is not None:
      oprot.writeFieldBegin('attackSpeed', TType.I16, 14)
      oprot.writeI16(self.attackSpeed)
      oprot.writeFieldEnd()
    if self.attackSing is not None:
      oprot.writeFieldBegin('attackSing', TType.I16, 15)
      oprot.writeI16(self.attackSing)
      oprot.writeFieldEnd()
    if self.attackInterval is not None:
      oprot.writeFieldBegin('attackInterval', TType.I16, 16)
      oprot.writeI16(self.attackInterval)
      oprot.writeFieldEnd()
    if self.attackDistance is not None:
      oprot.writeFieldBegin('attackDistance', TType.I16, 17)
      oprot.writeI16(self.attackDistance)
      oprot.writeFieldEnd()
    if self.moveSpeed is not None:
      oprot.writeFieldBegin('moveSpeed', TType.I16, 18)
      oprot.writeI16(self.moveSpeed)
      oprot.writeFieldEnd()
    if self.hurtAbsorb is not None:
      oprot.writeFieldBegin('hurtAbsorb', TType.I16, 19)
      oprot.writeI16(self.hurtAbsorb)
      oprot.writeFieldEnd()
    if self.hpAbsorb is not None:
      oprot.writeFieldBegin('hpAbsorb', TType.I16, 20)
      oprot.writeI16(self.hpAbsorb)
      oprot.writeFieldEnd()
    if self.fightPower is not None:
      oprot.writeFieldBegin('fightPower', TType.I32, 21)
      oprot.writeI32(self.fightPower)
      oprot.writeFieldEnd()
    if self.anger is not None:
      oprot.writeFieldBegin('anger', TType.I32, 22)
      oprot.writeI32(self.anger)
      oprot.writeFieldEnd()
    if self.angerMax is not None:
      oprot.writeFieldBegin('angerMax', TType.I32, 23)
      oprot.writeI32(self.angerMax)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.baseInfo)
    value = (value * 31) ^ hash(self.physicAttackMin)
    value = (value * 31) ^ hash(self.physicAttackMax)
    value = (value * 31) ^ hash(self.magicAttackMin)
    value = (value * 31) ^ hash(self.magicAttackMax)
    value = (value * 31) ^ hash(self.physicDefendMin)
    value = (value * 31) ^ hash(self.physicDefendMax)
    value = (value * 31) ^ hash(self.magicDefendMin)
    value = (value * 31) ^ hash(self.magicDefendMax)
    value = (value * 31) ^ hash(self.gold)
    value = (value * 31) ^ hash(self.crit)
    value = (value * 31) ^ hash(self.hit)
    value = (value * 31) ^ hash(self.avoid)
    value = (value * 31) ^ hash(self.attackSpeed)
    value = (value * 31) ^ hash(self.attackSing)
    value = (value * 31) ^ hash(self.attackInterval)
    value = (value * 31) ^ hash(self.attackDistance)
    value = (value * 31) ^ hash(self.moveSpeed)
    value = (value * 31) ^ hash(self.hurtAbsorb)
    value = (value * 31) ^ hash(self.hpAbsorb)
    value = (value * 31) ^ hash(self.fightPower)
    value = (value * 31) ^ hash(self.anger)
    value = (value * 31) ^ hash(self.angerMax)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MonsterEnterMapRet:
  """
  Attributes:
   - appr
   - uid
   - name
   - x
   - y
   - direction
   - hp
   - hpMax
   - cfgId
   - level
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'appr', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
    (3, TType.STRING, 'name', None, "", ), # 3
    (4, TType.I32, 'x', None, 0, ), # 4
    (5, TType.I32, 'y', None, 0, ), # 5
    (6, TType.I16, 'direction', None, 0, ), # 6
    (7, TType.I32, 'hp', None, 0, ), # 7
    (8, TType.I32, 'hpMax', None, 0, ), # 8
    (9, TType.I32, 'cfgId', None, 0, ), # 9
    (10, TType.I32, 'level', None, 0, ), # 10
  )

  def __init__(self, appr=thrift_spec[1][4], uid=thrift_spec[2][4], name=thrift_spec[3][4], x=thrift_spec[4][4], y=thrift_spec[5][4], direction=thrift_spec[6][4], hp=thrift_spec[7][4], hpMax=thrift_spec[8][4], cfgId=thrift_spec[9][4], level=thrift_spec[10][4],):
    self.appr = appr
    self.uid = uid
    self.name = name
    self.x = x
    self.y = y
    self.direction = direction
    self.hp = hp
    self.hpMax = hpMax
    self.cfgId = cfgId
    self.level = level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.appr = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.direction = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.hp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.hpMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.cfgId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MonsterEnterMapRet')
    if self.appr is not None:
      oprot.writeFieldBegin('appr', TType.I16, 1)
      oprot.writeI16(self.appr)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 4)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 5)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I16, 6)
      oprot.writeI16(self.direction)
      oprot.writeFieldEnd()
    if self.hp is not None:
      oprot.writeFieldBegin('hp', TType.I32, 7)
      oprot.writeI32(self.hp)
      oprot.writeFieldEnd()
    if self.hpMax is not None:
      oprot.writeFieldBegin('hpMax', TType.I32, 8)
      oprot.writeI32(self.hpMax)
      oprot.writeFieldEnd()
    if self.cfgId is not None:
      oprot.writeFieldBegin('cfgId', TType.I32, 9)
      oprot.writeI32(self.cfgId)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 10)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appr)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.direction)
    value = (value * 31) ^ hash(self.hp)
    value = (value * 31) ^ hash(self.hpMax)
    value = (value * 31) ^ hash(self.cfgId)
    value = (value * 31) ^ hash(self.level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NpcEnterMapRet:
  """
  Attributes:
   - appr
   - uid
   - name
   - x
   - y
   - direction
   - cfgid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'appr', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
    (3, TType.STRING, 'name', None, "", ), # 3
    (4, TType.I32, 'x', None, 0, ), # 4
    (5, TType.I32, 'y', None, 0, ), # 5
    (6, TType.I16, 'direction', None, 0, ), # 6
    (7, TType.I32, 'cfgid', None, 0, ), # 7
  )

  def __init__(self, appr=thrift_spec[1][4], uid=thrift_spec[2][4], name=thrift_spec[3][4], x=thrift_spec[4][4], y=thrift_spec[5][4], direction=thrift_spec[6][4], cfgid=thrift_spec[7][4],):
    self.appr = appr
    self.uid = uid
    self.name = name
    self.x = x
    self.y = y
    self.direction = direction
    self.cfgid = cfgid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.appr = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.direction = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.cfgid = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NpcEnterMapRet')
    if self.appr is not None:
      oprot.writeFieldBegin('appr', TType.I16, 1)
      oprot.writeI16(self.appr)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 4)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 5)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I16, 6)
      oprot.writeI16(self.direction)
      oprot.writeFieldEnd()
    if self.cfgid is not None:
      oprot.writeFieldBegin('cfgid', TType.I32, 7)
      oprot.writeI32(self.cfgid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appr)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.direction)
    value = (value * 31) ^ hash(self.cfgid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClickNpcReq:
  """
  Attributes:
   - uid
   - link
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'link', None, "", ), # 2
  )

  def __init__(self, uid=thrift_spec[1][4], link=thrift_spec[2][4],):
    self.uid = uid
    self.link = link

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.link = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClickNpcReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.link is not None:
      oprot.writeFieldBegin('link', TType.STRING, 2)
      oprot.writeString(self.link)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.link)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TransferOpsReq:
  """
  Attributes:
   - cfgid
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cfgid', None, 0, ), # 1
    (2, TType.I32, 'x', None, 0, ), # 2
    (3, TType.I32, 'y', None, 0, ), # 3
  )

  def __init__(self, cfgid=thrift_spec[1][4], x=thrift_spec[2][4], y=thrift_spec[3][4],):
    self.cfgid = cfgid
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cfgid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransferOpsReq')
    if self.cfgid is not None:
      oprot.writeFieldBegin('cfgid', TType.I32, 1)
      oprot.writeI32(self.cfgid)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 2)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 3)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cfgid)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NpcButton:
  """
  Attributes:
   - clickCallbackArg
   - showText
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clickCallbackArg', None, "", ), # 1
    (2, TType.STRING, 'showText', None, "", ), # 2
  )

  def __init__(self, clickCallbackArg=thrift_spec[1][4], showText=thrift_spec[2][4],):
    self.clickCallbackArg = clickCallbackArg
    self.showText = showText

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clickCallbackArg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.showText = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NpcButton')
    if self.clickCallbackArg is not None:
      oprot.writeFieldBegin('clickCallbackArg', TType.STRING, 1)
      oprot.writeString(self.clickCallbackArg)
      oprot.writeFieldEnd()
    if self.showText is not None:
      oprot.writeFieldBegin('showText', TType.STRING, 2)
      oprot.writeString(self.showText)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clickCallbackArg)
    value = (value * 31) ^ hash(self.showText)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClickNpcRet:
  """
  Attributes:
   - uid
   - content
   - buttons
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'content', None, "", ), # 2
    (3, TType.LIST, 'buttons', (TType.STRUCT,(NpcButton, NpcButton.thrift_spec)), None, ), # 3
  )

  def __init__(self, uid=thrift_spec[1][4], content=thrift_spec[2][4], buttons=None,):
    self.uid = uid
    self.content = content
    self.buttons = buttons

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.buttons = []
          (_etype104, _size101) = iprot.readListBegin()
          for _i105 in xrange(_size101):
            _elem106 = NpcButton()
            _elem106.read(iprot)
            self.buttons.append(_elem106)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClickNpcRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.buttons is not None:
      oprot.writeFieldBegin('buttons', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.buttons))
      for iter107 in self.buttons:
        iter107.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.buttons)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayerLogoutRet:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayerLogoutRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EnterMapReq:
  """
  Attributes:
   - mapname
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mapname', None, "", ), # 1
    (2, TType.I32, 'x', None, 0, ), # 2
    (3, TType.I32, 'y', None, 0, ), # 3
  )

  def __init__(self, mapname=thrift_spec[1][4], x=thrift_spec[2][4], y=thrift_spec[3][4],):
    self.mapname = mapname
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mapname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EnterMapReq')
    if self.mapname is not None:
      oprot.writeFieldBegin('mapname', TType.STRING, 1)
      oprot.writeString(self.mapname)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 2)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 3)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mapname)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EnterMapRet:
  """
  Attributes:
   - playerinfo
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    (5, TType.STRUCT, 'playerinfo', (PlayerInfoRet, PlayerInfoRet.thrift_spec), None, ), # 5
  )

  def __init__(self, playerinfo=None,):
    self.playerinfo = playerinfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 5:
        if ftype == TType.STRUCT:
          self.playerinfo = PlayerInfoRet()
          self.playerinfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EnterMapRet')
    if self.playerinfo is not None:
      oprot.writeFieldBegin('playerinfo', TType.STRUCT, 5)
      self.playerinfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.playerinfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LeaveMapRet:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LeaveMapRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Pos:
  """
  Attributes:
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'x', None, 0, ), # 1
    (2, TType.I32, 'y', None, 0, ), # 2
  )

  def __init__(self, x=thrift_spec[1][4], y=thrift_spec[2][4],):
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Pos')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 1)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 2)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveReq:
  """
  Attributes:
   - x
   - y
   - direction
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'x', None, 0, ), # 1
    (2, TType.I32, 'y', None, 0, ), # 2
    (3, TType.I16, 'direction', None, 0, ), # 3
  )

  def __init__(self, x=thrift_spec[1][4], y=thrift_spec[2][4], direction=thrift_spec[3][4],):
    self.x = x
    self.y = y
    self.direction = direction

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.direction = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveReq')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 1)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 2)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I16, 3)
      oprot.writeI16(self.direction)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.direction)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoveRet:
  """
  Attributes:
   - x
   - y
   - uid
   - direction
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'x', None, 0, ), # 1
    (2, TType.I32, 'y', None, 0, ), # 2
    (3, TType.I64, 'uid', None, 0, ), # 3
    (4, TType.I16, 'direction', None, 0, ), # 4
  )

  def __init__(self, x=thrift_spec[1][4], y=thrift_spec[2][4], uid=thrift_spec[3][4], direction=thrift_spec[4][4],):
    self.x = x
    self.y = y
    self.uid = uid
    self.direction = direction

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.x = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.y = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.direction = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoveRet')
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I32, 1)
      oprot.writeI32(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I32, 2)
      oprot.writeI32(self.y)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 3)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I16, 4)
      oprot.writeI16(self.direction)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.direction)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RightMsg:
  """
  Attributes:
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'msg', None, "", ), # 1
  )

  def __init__(self, msg=thrift_spec[1][4],):
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RightMsg')
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 1)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ErrorMsgRet:
  """
  Attributes:
   - errType
   - cmd
   - errMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'errType', None, 0, ), # 1
    (2, TType.I16, 'cmd', None, 0, ), # 2
    (3, TType.STRING, 'errMsg', None, "", ), # 3
  )

  def __init__(self, errType=thrift_spec[1][4], cmd=thrift_spec[2][4], errMsg=thrift_spec[3][4],):
    self.errType = errType
    self.cmd = cmd
    self.errMsg = errMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.errType = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.cmd = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.errMsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ErrorMsgRet')
    if self.errType is not None:
      oprot.writeFieldBegin('errType', TType.I16, 1)
      oprot.writeI16(self.errType)
      oprot.writeFieldEnd()
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.I16, 2)
      oprot.writeI16(self.cmd)
      oprot.writeFieldEnd()
    if self.errMsg is not None:
      oprot.writeFieldBegin('errMsg', TType.STRING, 3)
      oprot.writeString(self.errMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.errType)
    value = (value * 31) ^ hash(self.cmd)
    value = (value * 31) ^ hash(self.errMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FriendListMsgReq:
  """
  Attributes:
   - opstype
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4],):
    self.opstype = opstype
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FriendListMsgReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FriendMsgReq:
  """
  Attributes:
   - opstype
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4],):
    self.opstype = opstype
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FriendMsgReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FriendMsgRet:
  """
  Attributes:
   - opstype
   - uid
   - name
   - job
   - gender
   - level
   - online
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
    (3, TType.STRING, 'name', None, "", ), # 3
    (4, TType.I16, 'job', None, 0, ), # 4
    (5, TType.I16, 'gender', None, 0, ), # 5
    (6, TType.I32, 'level', None, 0, ), # 6
    (7, TType.BOOL, 'online', None, None, ), # 7
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4], name=thrift_spec[3][4], job=thrift_spec[4][4], gender=thrift_spec[5][4], level=thrift_spec[6][4], online=None,):
    self.opstype = opstype
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.online = online

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.online = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FriendMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 4)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 5)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 6)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.online is not None:
      oprot.writeFieldBegin('online', TType.BOOL, 7)
      oprot.writeBool(self.online)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.online)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FriendPlayerMsg:
  """
  Attributes:
   - uid
   - name
   - job
   - gender
   - level
   - online
   - mapname
   - x
   - y
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I16, 'job', None, 0, ), # 3
    (4, TType.I16, 'gender', None, 0, ), # 4
    (5, TType.I32, 'level', None, 0, ), # 5
    (6, TType.BOOL, 'online', None, None, ), # 6
    (7, TType.STRING, 'mapname', None, "", ), # 7
    (8, TType.I16, 'x', None, 0, ), # 8
    (9, TType.I16, 'y', None, 0, ), # 9
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], job=thrift_spec[3][4], gender=thrift_spec[4][4], level=thrift_spec[5][4], online=None, mapname=thrift_spec[7][4], x=thrift_spec[8][4], y=thrift_spec[9][4],):
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.online = online
    self.mapname = mapname
    self.x = x
    self.y = y

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.online = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mapname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.x = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.y = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FriendPlayerMsg')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 3)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 4)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 5)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.online is not None:
      oprot.writeFieldBegin('online', TType.BOOL, 6)
      oprot.writeBool(self.online)
      oprot.writeFieldEnd()
    if self.mapname is not None:
      oprot.writeFieldBegin('mapname', TType.STRING, 7)
      oprot.writeString(self.mapname)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I16, 8)
      oprot.writeI16(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I16, 9)
      oprot.writeI16(self.y)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.online)
    value = (value * 31) ^ hash(self.mapname)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FriendListMsgRet:
  """
  Attributes:
   - opstype
   - allPlayerInfo
   - allEnemyInfo
   - allShieldInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.LIST, 'allPlayerInfo', (TType.STRUCT,(FriendPlayerMsg, FriendPlayerMsg.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'allEnemyInfo', (TType.STRUCT,(FriendPlayerMsg, FriendPlayerMsg.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'allShieldInfo', (TType.STRUCT,(FriendPlayerMsg, FriendPlayerMsg.thrift_spec)), None, ), # 4
  )

  def __init__(self, opstype=thrift_spec[1][4], allPlayerInfo=None, allEnemyInfo=None, allShieldInfo=None,):
    self.opstype = opstype
    self.allPlayerInfo = allPlayerInfo
    self.allEnemyInfo = allEnemyInfo
    self.allShieldInfo = allShieldInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.allPlayerInfo = []
          (_etype111, _size108) = iprot.readListBegin()
          for _i112 in xrange(_size108):
            _elem113 = FriendPlayerMsg()
            _elem113.read(iprot)
            self.allPlayerInfo.append(_elem113)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.allEnemyInfo = []
          (_etype117, _size114) = iprot.readListBegin()
          for _i118 in xrange(_size114):
            _elem119 = FriendPlayerMsg()
            _elem119.read(iprot)
            self.allEnemyInfo.append(_elem119)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.allShieldInfo = []
          (_etype123, _size120) = iprot.readListBegin()
          for _i124 in xrange(_size120):
            _elem125 = FriendPlayerMsg()
            _elem125.read(iprot)
            self.allShieldInfo.append(_elem125)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FriendListMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.allPlayerInfo is not None:
      oprot.writeFieldBegin('allPlayerInfo', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.allPlayerInfo))
      for iter126 in self.allPlayerInfo:
        iter126.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.allEnemyInfo is not None:
      oprot.writeFieldBegin('allEnemyInfo', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.allEnemyInfo))
      for iter127 in self.allEnemyInfo:
        iter127.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.allShieldInfo is not None:
      oprot.writeFieldBegin('allShieldInfo', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.allShieldInfo))
      for iter128 in self.allShieldInfo:
        iter128.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.allPlayerInfo)
    value = (value * 31) ^ hash(self.allEnemyInfo)
    value = (value * 31) ^ hash(self.allShieldInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChatMsgReq:
  """
  Attributes:
   - opstype
   - uid
   - chatMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
    (3, TType.STRING, 'chatMsg', None, "", ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4], chatMsg=thrift_spec[3][4],):
    self.opstype = opstype
    self.uid = uid
    self.chatMsg = chatMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.chatMsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChatMsgReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.chatMsg is not None:
      oprot.writeFieldBegin('chatMsg', TType.STRING, 3)
      oprot.writeString(self.chatMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.chatMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChatMsgRet:
  """
  Attributes:
   - opstype
   - uid
   - name
   - chatMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
    (3, TType.STRING, 'name', None, "", ), # 3
    (4, TType.STRING, 'chatMsg', None, "", ), # 4
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4], name=thrift_spec[3][4], chatMsg=thrift_spec[4][4],):
    self.opstype = opstype
    self.uid = uid
    self.name = name
    self.chatMsg = chatMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.chatMsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChatMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.chatMsg is not None:
      oprot.writeFieldBegin('chatMsg', TType.STRING, 4)
      oprot.writeString(self.chatMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.chatMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TeamMsgReq:
  """
  Attributes:
   - opstype
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4],):
    self.opstype = opstype
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TeamMsgReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TeamListMsgReq:
  """
  Attributes:
   - opstype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
  )

  def __init__(self, opstype=thrift_spec[1][4],):
    self.opstype = opstype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TeamListMsgReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TeamMsgRet:
  """
  Attributes:
   - opstype
   - uid
   - name
   - job
   - gender
   - level
   - hp
   - hpMax
   - mp
   - mpMax
   - anger
   - angerMax
   - leader
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
    (3, TType.STRING, 'name', None, "", ), # 3
    (4, TType.I16, 'job', None, 0, ), # 4
    (5, TType.I16, 'gender', None, 0, ), # 5
    (6, TType.I32, 'level', None, 0, ), # 6
    (7, TType.I32, 'hp', None, 0, ), # 7
    (8, TType.I32, 'hpMax', None, 0, ), # 8
    (9, TType.I32, 'mp', None, 0, ), # 9
    (10, TType.I32, 'mpMax', None, 0, ), # 10
    (11, TType.I32, 'anger', None, 0, ), # 11
    (12, TType.I32, 'angerMax', None, 0, ), # 12
    (13, TType.BOOL, 'leader', None, None, ), # 13
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4], name=thrift_spec[3][4], job=thrift_spec[4][4], gender=thrift_spec[5][4], level=thrift_spec[6][4], hp=thrift_spec[7][4], hpMax=thrift_spec[8][4], mp=thrift_spec[9][4], mpMax=thrift_spec[10][4], anger=thrift_spec[11][4], angerMax=thrift_spec[12][4], leader=None,):
    self.opstype = opstype
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.hp = hp
    self.hpMax = hpMax
    self.mp = mp
    self.mpMax = mpMax
    self.anger = anger
    self.angerMax = angerMax
    self.leader = leader

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.hp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.hpMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.mp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.mpMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.anger = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.angerMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.leader = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TeamMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 4)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 5)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 6)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.hp is not None:
      oprot.writeFieldBegin('hp', TType.I32, 7)
      oprot.writeI32(self.hp)
      oprot.writeFieldEnd()
    if self.hpMax is not None:
      oprot.writeFieldBegin('hpMax', TType.I32, 8)
      oprot.writeI32(self.hpMax)
      oprot.writeFieldEnd()
    if self.mp is not None:
      oprot.writeFieldBegin('mp', TType.I32, 9)
      oprot.writeI32(self.mp)
      oprot.writeFieldEnd()
    if self.mpMax is not None:
      oprot.writeFieldBegin('mpMax', TType.I32, 10)
      oprot.writeI32(self.mpMax)
      oprot.writeFieldEnd()
    if self.anger is not None:
      oprot.writeFieldBegin('anger', TType.I32, 11)
      oprot.writeI32(self.anger)
      oprot.writeFieldEnd()
    if self.angerMax is not None:
      oprot.writeFieldBegin('angerMax', TType.I32, 12)
      oprot.writeI32(self.angerMax)
      oprot.writeFieldEnd()
    if self.leader is not None:
      oprot.writeFieldBegin('leader', TType.BOOL, 13)
      oprot.writeBool(self.leader)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.hp)
    value = (value * 31) ^ hash(self.hpMax)
    value = (value * 31) ^ hash(self.mp)
    value = (value * 31) ^ hash(self.mpMax)
    value = (value * 31) ^ hash(self.anger)
    value = (value * 31) ^ hash(self.angerMax)
    value = (value * 31) ^ hash(self.leader)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TeamPlayerMsg:
  """
  Attributes:
   - uid
   - name
   - job
   - gender
   - level
   - hp
   - hpMax
   - mp
   - mpMax
   - anger
   - angerMax
   - leader
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I16, 'job', None, 0, ), # 3
    (4, TType.I16, 'gender', None, 0, ), # 4
    (5, TType.I32, 'level', None, 0, ), # 5
    (6, TType.I32, 'hp', None, 0, ), # 6
    (7, TType.I32, 'hpMax', None, 0, ), # 7
    (8, TType.I32, 'mp', None, 0, ), # 8
    (9, TType.I32, 'mpMax', None, 0, ), # 9
    (10, TType.I32, 'anger', None, 0, ), # 10
    (11, TType.I32, 'angerMax', None, 0, ), # 11
    (12, TType.BOOL, 'leader', None, None, ), # 12
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], job=thrift_spec[3][4], gender=thrift_spec[4][4], level=thrift_spec[5][4], hp=thrift_spec[6][4], hpMax=thrift_spec[7][4], mp=thrift_spec[8][4], mpMax=thrift_spec[9][4], anger=thrift_spec[10][4], angerMax=thrift_spec[11][4], leader=None,):
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.hp = hp
    self.hpMax = hpMax
    self.mp = mp
    self.mpMax = mpMax
    self.anger = anger
    self.angerMax = angerMax
    self.leader = leader

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.hp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.hpMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.mp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.mpMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.anger = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.angerMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.leader = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TeamPlayerMsg')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 3)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 4)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 5)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.hp is not None:
      oprot.writeFieldBegin('hp', TType.I32, 6)
      oprot.writeI32(self.hp)
      oprot.writeFieldEnd()
    if self.hpMax is not None:
      oprot.writeFieldBegin('hpMax', TType.I32, 7)
      oprot.writeI32(self.hpMax)
      oprot.writeFieldEnd()
    if self.mp is not None:
      oprot.writeFieldBegin('mp', TType.I32, 8)
      oprot.writeI32(self.mp)
      oprot.writeFieldEnd()
    if self.mpMax is not None:
      oprot.writeFieldBegin('mpMax', TType.I32, 9)
      oprot.writeI32(self.mpMax)
      oprot.writeFieldEnd()
    if self.anger is not None:
      oprot.writeFieldBegin('anger', TType.I32, 10)
      oprot.writeI32(self.anger)
      oprot.writeFieldEnd()
    if self.angerMax is not None:
      oprot.writeFieldBegin('angerMax', TType.I32, 11)
      oprot.writeI32(self.angerMax)
      oprot.writeFieldEnd()
    if self.leader is not None:
      oprot.writeFieldBegin('leader', TType.BOOL, 12)
      oprot.writeBool(self.leader)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.hp)
    value = (value * 31) ^ hash(self.hpMax)
    value = (value * 31) ^ hash(self.mp)
    value = (value * 31) ^ hash(self.mpMax)
    value = (value * 31) ^ hash(self.anger)
    value = (value * 31) ^ hash(self.angerMax)
    value = (value * 31) ^ hash(self.leader)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TeamListMsgRet:
  """
  Attributes:
   - opstype
   - allTeamInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.LIST, 'allTeamInfo', (TType.STRUCT,(TeamPlayerMsg, TeamPlayerMsg.thrift_spec)), None, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], allTeamInfo=None,):
    self.opstype = opstype
    self.allTeamInfo = allTeamInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.allTeamInfo = []
          (_etype132, _size129) = iprot.readListBegin()
          for _i133 in xrange(_size129):
            _elem134 = TeamPlayerMsg()
            _elem134.read(iprot)
            self.allTeamInfo.append(_elem134)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TeamListMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.allTeamInfo is not None:
      oprot.writeFieldBegin('allTeamInfo', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.allTeamInfo))
      for iter135 in self.allTeamInfo:
        iter135.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.allTeamInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BrotherOpsReq:
  """
  Attributes:
   - opstype
   - uid1
   - uid2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid1', None, 0, ), # 2
    (3, TType.I64, 'uid2', None, 0, ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], uid1=thrift_spec[2][4], uid2=thrift_spec[3][4],):
    self.opstype = opstype
    self.uid1 = uid1
    self.uid2 = uid2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid1 = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.uid2 = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BrotherOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid1 is not None:
      oprot.writeFieldBegin('uid1', TType.I64, 2)
      oprot.writeI64(self.uid1)
      oprot.writeFieldEnd()
    if self.uid2 is not None:
      oprot.writeFieldBegin('uid2', TType.I64, 3)
      oprot.writeI64(self.uid2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid1)
    value = (value * 31) ^ hash(self.uid2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BrotherPlayerMsg:
  """
  Attributes:
   - uid
   - name
   - job
   - gender
   - level
   - online
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I16, 'job', None, 0, ), # 3
    (4, TType.I16, 'gender', None, 0, ), # 4
    (5, TType.I32, 'level', None, 0, ), # 5
    (6, TType.BOOL, 'online', None, None, ), # 6
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], job=thrift_spec[3][4], gender=thrift_spec[4][4], level=thrift_spec[5][4], online=None,):
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.online = online

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.online = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BrotherPlayerMsg')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 3)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 4)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 5)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.online is not None:
      oprot.writeFieldBegin('online', TType.BOOL, 6)
      oprot.writeBool(self.online)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.online)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BrotherOpsMsgRet:
  """
  Attributes:
   - opstype
   - uid
   - name
   - job
   - gender
   - level
   - allBrotherInfo
   - flag
   - delTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
    (3, TType.STRING, 'name', None, "", ), # 3
    (4, TType.I16, 'job', None, 0, ), # 4
    (5, TType.I16, 'gender', None, 0, ), # 5
    (6, TType.I32, 'level', None, 0, ), # 6
    (7, TType.LIST, 'allBrotherInfo', (TType.STRUCT,(BrotherPlayerMsg, BrotherPlayerMsg.thrift_spec)), None, ), # 7
    (8, TType.BOOL, 'flag', None, None, ), # 8
    (9, TType.I32, 'delTime', None, 0, ), # 9
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4], name=thrift_spec[3][4], job=thrift_spec[4][4], gender=thrift_spec[5][4], level=thrift_spec[6][4], allBrotherInfo=None, flag=None, delTime=thrift_spec[9][4],):
    self.opstype = opstype
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.allBrotherInfo = allBrotherInfo
    self.flag = flag
    self.delTime = delTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.allBrotherInfo = []
          (_etype139, _size136) = iprot.readListBegin()
          for _i140 in xrange(_size136):
            _elem141 = BrotherPlayerMsg()
            _elem141.read(iprot)
            self.allBrotherInfo.append(_elem141)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.flag = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.delTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BrotherOpsMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 4)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 5)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 6)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.allBrotherInfo is not None:
      oprot.writeFieldBegin('allBrotherInfo', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.allBrotherInfo))
      for iter142 in self.allBrotherInfo:
        iter142.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.BOOL, 8)
      oprot.writeBool(self.flag)
      oprot.writeFieldEnd()
    if self.delTime is not None:
      oprot.writeFieldBegin('delTime', TType.I32, 9)
      oprot.writeI32(self.delTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.allBrotherInfo)
    value = (value * 31) ^ hash(self.flag)
    value = (value * 31) ^ hash(self.delTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NormalMsg:
  """
  Attributes:
   - opstype
   - cmd
   - uid
   - Msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I16, 'cmd', None, 0, ), # 2
    (3, TType.I64, 'uid', None, 0, ), # 3
    (4, TType.STRING, 'Msg', None, "", ), # 4
  )

  def __init__(self, opstype=thrift_spec[1][4], cmd=thrift_spec[2][4], uid=thrift_spec[3][4], Msg=thrift_spec[4][4],):
    self.opstype = opstype
    self.cmd = cmd
    self.uid = uid
    self.Msg = Msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.cmd = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.Msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NormalMsg')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.I16, 2)
      oprot.writeI16(self.cmd)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 3)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.Msg is not None:
      oprot.writeFieldBegin('Msg', TType.STRING, 4)
      oprot.writeString(self.Msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.cmd)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.Msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayerMsg:
  """
  Attributes:
   - uid
   - name
   - flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I16, 'flag', None, 0, ), # 3
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], flag=thrift_spec[3][4],):
    self.uid = uid
    self.name = name
    self.flag = flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.flag = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayerMsg')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.I16, 3)
      oprot.writeI16(self.flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.flag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateSkillPosReq:
  """
  Attributes:
   - skill2pos
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    (3, TType.MAP, 'skill2pos', (TType.I32,None,TType.I32,None), None, ), # 3
  )

  def __init__(self, skill2pos=None,):
    self.skill2pos = skill2pos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 3:
        if ftype == TType.MAP:
          self.skill2pos = {}
          (_ktype144, _vtype145, _size143 ) = iprot.readMapBegin()
          for _i147 in xrange(_size143):
            _key148 = iprot.readI32()
            _val149 = iprot.readI32()
            self.skill2pos[_key148] = _val149
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateSkillPosReq')
    if self.skill2pos is not None:
      oprot.writeFieldBegin('skill2pos', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.skill2pos))
      for kiter150,viter151 in self.skill2pos.items():
        oprot.writeI32(kiter150)
        oprot.writeI32(viter151)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.skill2pos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateSkillPosRet:
  """
  Attributes:
   - skill2pos
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    (3, TType.MAP, 'skill2pos', (TType.I32,None,TType.I32,None), None, ), # 3
  )

  def __init__(self, skill2pos=None,):
    self.skill2pos = skill2pos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 3:
        if ftype == TType.MAP:
          self.skill2pos = {}
          (_ktype153, _vtype154, _size152 ) = iprot.readMapBegin()
          for _i156 in xrange(_size152):
            _key157 = iprot.readI32()
            _val158 = iprot.readI32()
            self.skill2pos[_key157] = _val158
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateSkillPosRet')
    if self.skill2pos is not None:
      oprot.writeFieldBegin('skill2pos', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.skill2pos))
      for kiter159,viter160 in self.skill2pos.items():
        oprot.writeI32(kiter159)
        oprot.writeI32(viter160)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.skill2pos)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MakeItemReq:
  """
  Attributes:
   - itemCfgId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'itemCfgId', None, 0, ), # 1
  )

  def __init__(self, itemCfgId=thrift_spec[1][4],):
    self.itemCfgId = itemCfgId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.itemCfgId = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MakeItemReq')
    if self.itemCfgId is not None:
      oprot.writeFieldBegin('itemCfgId', TType.I32, 1)
      oprot.writeI32(self.itemCfgId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemCfgId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MakeItemRet:
  """
  Attributes:
   - itemMaked
   - exp
   - level
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'itemMaked', (Item, Item.thrift_spec), None, ), # 1
    (2, TType.I32, 'exp', None, 0, ), # 2
    (3, TType.I16, 'level', None, 0, ), # 3
  )

  def __init__(self, itemMaked=None, exp=thrift_spec[2][4], level=thrift_spec[3][4],):
    self.itemMaked = itemMaked
    self.exp = exp
    self.level = level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.itemMaked = Item()
          self.itemMaked.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.level = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MakeItemRet')
    if self.itemMaked is not None:
      oprot.writeFieldBegin('itemMaked', TType.STRUCT, 1)
      self.itemMaked.write(oprot)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 2)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I16, 3)
      oprot.writeI16(self.level)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.itemMaked)
    value = (value * 31) ^ hash(self.exp)
    value = (value * 31) ^ hash(self.level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InheritItemReq:
  """
  Attributes:
   - uidFrom
   - uidTo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uidFrom', None, 0, ), # 1
    (2, TType.I64, 'uidTo', None, 0, ), # 2
  )

  def __init__(self, uidFrom=thrift_spec[1][4], uidTo=thrift_spec[2][4],):
    self.uidFrom = uidFrom
    self.uidTo = uidTo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uidFrom = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uidTo = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InheritItemReq')
    if self.uidFrom is not None:
      oprot.writeFieldBegin('uidFrom', TType.I64, 1)
      oprot.writeI64(self.uidFrom)
      oprot.writeFieldEnd()
    if self.uidTo is not None:
      oprot.writeFieldBegin('uidTo', TType.I64, 2)
      oprot.writeI64(self.uidTo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uidFrom)
    value = (value * 31) ^ hash(self.uidTo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InheritItemRet:
  """
  Attributes:
   - uidFrom
   - uidTo
   - itemTo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uidFrom', None, 0, ), # 1
    (2, TType.I64, 'uidTo', None, 0, ), # 2
    (3, TType.STRUCT, 'itemTo', (Item, Item.thrift_spec), None, ), # 3
  )

  def __init__(self, uidFrom=thrift_spec[1][4], uidTo=thrift_spec[2][4], itemTo=None,):
    self.uidFrom = uidFrom
    self.uidTo = uidTo
    self.itemTo = itemTo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uidFrom = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uidTo = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.itemTo = Item()
          self.itemTo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InheritItemRet')
    if self.uidFrom is not None:
      oprot.writeFieldBegin('uidFrom', TType.I64, 1)
      oprot.writeI64(self.uidFrom)
      oprot.writeFieldEnd()
    if self.uidTo is not None:
      oprot.writeFieldBegin('uidTo', TType.I64, 2)
      oprot.writeI64(self.uidTo)
      oprot.writeFieldEnd()
    if self.itemTo is not None:
      oprot.writeFieldBegin('itemTo', TType.STRUCT, 3)
      self.itemTo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uidFrom)
    value = (value * 31) ^ hash(self.uidTo)
    value = (value * 31) ^ hash(self.itemTo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BuffStatus:
  """
  Attributes:
   - endTime
   - param
   - triggerSkill
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'endTime', None, 0, ), # 1
    (2, TType.MAP, 'param', (TType.I16,None,TType.I32,None), None, ), # 2
    (3, TType.I32, 'triggerSkill', None, 0, ), # 3
  )

  def __init__(self, endTime=thrift_spec[1][4], param=None, triggerSkill=thrift_spec[3][4],):
    self.endTime = endTime
    self.param = param
    self.triggerSkill = triggerSkill

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.endTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.param = {}
          (_ktype162, _vtype163, _size161 ) = iprot.readMapBegin()
          for _i165 in xrange(_size161):
            _key166 = iprot.readI16()
            _val167 = iprot.readI32()
            self.param[_key166] = _val167
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.triggerSkill = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BuffStatus')
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 1)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.param is not None:
      oprot.writeFieldBegin('param', TType.MAP, 2)
      oprot.writeMapBegin(TType.I16, TType.I32, len(self.param))
      for kiter168,viter169 in self.param.items():
        oprot.writeI16(kiter168)
        oprot.writeI32(viter169)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.triggerSkill is not None:
      oprot.writeFieldBegin('triggerSkill', TType.I32, 3)
      oprot.writeI32(self.triggerSkill)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.param)
    value = (value * 31) ^ hash(self.triggerSkill)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateBuffRet:
  """
  Attributes:
   - allBuff
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'allBuff', (TType.I16,None,TType.STRUCT,(BuffStatus, BuffStatus.thrift_spec)), None, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
  )

  def __init__(self, allBuff=None, uid=thrift_spec[2][4],):
    self.allBuff = allBuff
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.allBuff = {}
          (_ktype171, _vtype172, _size170 ) = iprot.readMapBegin()
          for _i174 in xrange(_size170):
            _key175 = iprot.readI16()
            _val176 = BuffStatus()
            _val176.read(iprot)
            self.allBuff[_key175] = _val176
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateBuffRet')
    if self.allBuff is not None:
      oprot.writeFieldBegin('allBuff', TType.MAP, 1)
      oprot.writeMapBegin(TType.I16, TType.STRUCT, len(self.allBuff))
      for kiter177,viter178 in self.allBuff.items():
        oprot.writeI16(kiter177)
        viter178.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.allBuff)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShowEffectRet:
  """
  Attributes:
   - effectType
   - param
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'effectType', None, 0, ), # 1
    (2, TType.MAP, 'param', (TType.I16,None,TType.I32,None), None, ), # 2
  )

  def __init__(self, effectType=thrift_spec[1][4], param=None,):
    self.effectType = effectType
    self.param = param

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.effectType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.param = {}
          (_ktype180, _vtype181, _size179 ) = iprot.readMapBegin()
          for _i183 in xrange(_size179):
            _key184 = iprot.readI16()
            _val185 = iprot.readI32()
            self.param[_key184] = _val185
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShowEffectRet')
    if self.effectType is not None:
      oprot.writeFieldBegin('effectType', TType.I32, 1)
      oprot.writeI32(self.effectType)
      oprot.writeFieldEnd()
    if self.param is not None:
      oprot.writeFieldBegin('param', TType.MAP, 2)
      oprot.writeMapBegin(TType.I16, TType.I32, len(self.param))
      for kiter186,viter187 in self.param.items():
        oprot.writeI16(kiter186)
        oprot.writeI32(viter187)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.effectType)
    value = (value * 31) ^ hash(self.param)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShowPlayRet:
  """
  Attributes:
   - playId
   - callbackId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'playId', None, 0, ), # 1
    (2, TType.I64, 'callbackId', None, 0, ), # 2
  )

  def __init__(self, playId=thrift_spec[1][4], callbackId=thrift_spec[2][4],):
    self.playId = playId
    self.callbackId = callbackId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.playId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.callbackId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShowPlayRet')
    if self.playId is not None:
      oprot.writeFieldBegin('playId', TType.I32, 1)
      oprot.writeI32(self.playId)
      oprot.writeFieldEnd()
    if self.callbackId is not None:
      oprot.writeFieldBegin('callbackId', TType.I64, 2)
      oprot.writeI64(self.callbackId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.playId)
    value = (value * 31) ^ hash(self.callbackId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShowUiRet:
  """
  Attributes:
   - uitype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uitype', None, 0, ), # 1
  )

  def __init__(self, uitype=thrift_spec[1][4],):
    self.uitype = uitype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uitype = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShowUiRet')
    if self.uitype is not None:
      oprot.writeFieldBegin('uitype', TType.I32, 1)
      oprot.writeI32(self.uitype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uitype)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CollectOpsReq:
  """
  Attributes:
   - opstype
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4],):
    self.opstype = opstype
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CollectOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CollectOpsRet:
  """
  Attributes:
   - opstype
   - uid
   - needSec
   - item
   - cfgid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
    (3, TType.I32, 'needSec', None, 0, ), # 3
    (4, TType.STRUCT, 'item', (Item, Item.thrift_spec), None, ), # 4
    (5, TType.I32, 'cfgid', None, 0, ), # 5
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4], needSec=thrift_spec[3][4], item=None, cfgid=thrift_spec[5][4],):
    self.opstype = opstype
    self.uid = uid
    self.needSec = needSec
    self.item = item
    self.cfgid = cfgid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.needSec = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.item = Item()
          self.item.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cfgid = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CollectOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.needSec is not None:
      oprot.writeFieldBegin('needSec', TType.I32, 3)
      oprot.writeI32(self.needSec)
      oprot.writeFieldEnd()
    if self.item is not None:
      oprot.writeFieldBegin('item', TType.STRUCT, 4)
      self.item.write(oprot)
      oprot.writeFieldEnd()
    if self.cfgid is not None:
      oprot.writeFieldBegin('cfgid', TType.I32, 5)
      oprot.writeI32(self.cfgid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.needSec)
    value = (value * 31) ^ hash(self.item)
    value = (value * 31) ^ hash(self.cfgid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TransferPointOpsReq:
  """
  Attributes:
   - cfgid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cfgid', None, 0, ), # 1
  )

  def __init__(self, cfgid=thrift_spec[1][4],):
    self.cfgid = cfgid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cfgid = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransferPointOpsReq')
    if self.cfgid is not None:
      oprot.writeFieldBegin('cfgid', TType.I32, 1)
      oprot.writeI32(self.cfgid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cfgid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Pet:
  """
  Attributes:
   - uid
   - status
   - level
   - exp
   - expMax
   - quality
   - cfgid
   - propExt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.I16, 'status', None, 0, ), # 2
    (3, TType.I32, 'level', None, 0, ), # 3
    (4, TType.I32, 'exp', None, 0, ), # 4
    (5, TType.I32, 'expMax', None, 0, ), # 5
    (6, TType.I16, 'quality', None, 0, ), # 6
    (7, TType.I16, 'cfgid', None, 0, ), # 7
    (8, TType.MAP, 'propExt', (TType.I32,None,TType.I32,None), None, ), # 8
  )

  def __init__(self, uid=thrift_spec[1][4], status=thrift_spec[2][4], level=thrift_spec[3][4], exp=thrift_spec[4][4], expMax=thrift_spec[5][4], quality=thrift_spec[6][4], cfgid=thrift_spec[7][4], propExt=None,):
    self.uid = uid
    self.status = status
    self.level = level
    self.exp = exp
    self.expMax = expMax
    self.quality = quality
    self.cfgid = cfgid
    self.propExt = propExt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.expMax = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.quality = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.cfgid = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.propExt = {}
          (_ktype189, _vtype190, _size188 ) = iprot.readMapBegin()
          for _i192 in xrange(_size188):
            _key193 = iprot.readI32()
            _val194 = iprot.readI32()
            self.propExt[_key193] = _val194
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Pet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 2)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 3)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 4)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    if self.expMax is not None:
      oprot.writeFieldBegin('expMax', TType.I32, 5)
      oprot.writeI32(self.expMax)
      oprot.writeFieldEnd()
    if self.quality is not None:
      oprot.writeFieldBegin('quality', TType.I16, 6)
      oprot.writeI16(self.quality)
      oprot.writeFieldEnd()
    if self.cfgid is not None:
      oprot.writeFieldBegin('cfgid', TType.I16, 7)
      oprot.writeI16(self.cfgid)
      oprot.writeFieldEnd()
    if self.propExt is not None:
      oprot.writeFieldBegin('propExt', TType.MAP, 8)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.propExt))
      for kiter195,viter196 in self.propExt.items():
        oprot.writeI32(kiter195)
        oprot.writeI32(viter196)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.exp)
    value = (value * 31) ^ hash(self.expMax)
    value = (value * 31) ^ hash(self.quality)
    value = (value * 31) ^ hash(self.cfgid)
    value = (value * 31) ^ hash(self.propExt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PetEgg:
  """
  Attributes:
   - eggItemCfgId
   - starttm
   - needsec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'eggItemCfgId', None, 0, ), # 1
    (2, TType.I32, 'starttm', None, 0, ), # 2
    (3, TType.I32, 'needsec', None, 0, ), # 3
  )

  def __init__(self, eggItemCfgId=thrift_spec[1][4], starttm=thrift_spec[2][4], needsec=thrift_spec[3][4],):
    self.eggItemCfgId = eggItemCfgId
    self.starttm = starttm
    self.needsec = needsec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.eggItemCfgId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.starttm = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.needsec = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PetEgg')
    if self.eggItemCfgId is not None:
      oprot.writeFieldBegin('eggItemCfgId', TType.I32, 1)
      oprot.writeI32(self.eggItemCfgId)
      oprot.writeFieldEnd()
    if self.starttm is not None:
      oprot.writeFieldBegin('starttm', TType.I32, 2)
      oprot.writeI32(self.starttm)
      oprot.writeFieldEnd()
    if self.needsec is not None:
      oprot.writeFieldBegin('needsec', TType.I32, 3)
      oprot.writeI32(self.needsec)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.eggItemCfgId)
    value = (value * 31) ^ hash(self.starttm)
    value = (value * 31) ^ hash(self.needsec)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PetInfoRet:
  """
  Attributes:
   - allPet
   - petEgg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'allPet', (TType.STRUCT,(Pet, Pet.thrift_spec)), None, ), # 1
    (2, TType.STRUCT, 'petEgg', (PetEgg, PetEgg.thrift_spec), None, ), # 2
  )

  def __init__(self, allPet=None, petEgg=None,):
    self.allPet = allPet
    self.petEgg = petEgg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.allPet = []
          (_etype200, _size197) = iprot.readListBegin()
          for _i201 in xrange(_size197):
            _elem202 = Pet()
            _elem202.read(iprot)
            self.allPet.append(_elem202)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.petEgg = PetEgg()
          self.petEgg.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PetInfoRet')
    if self.allPet is not None:
      oprot.writeFieldBegin('allPet', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.allPet))
      for iter203 in self.allPet:
        iter203.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.petEgg is not None:
      oprot.writeFieldBegin('petEgg', TType.STRUCT, 2)
      self.petEgg.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.allPet)
    value = (value * 31) ^ hash(self.petEgg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PetEggStartReq:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PetEggStartReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeedPetReq:
  """
  Attributes:
   - uid
   - item
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.LIST, 'item', (TType.I64,None), [
    ], ), # 2
  )

  def __init__(self, uid=thrift_spec[1][4], item=thrift_spec[2][4],):
    self.uid = uid
    if item is self.thrift_spec[2][4]:
      item = [
    ]
    self.item = item

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.item = []
          (_etype207, _size204) = iprot.readListBegin()
          for _i208 in xrange(_size204):
            _elem209 = iprot.readI64()
            self.item.append(_elem209)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeedPetReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.item is not None:
      oprot.writeFieldBegin('item', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.item))
      for iter210 in self.item:
        oprot.writeI64(iter210)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.item)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PetOpsReq:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
  )

  def __init__(self, uid=thrift_spec[1][4],):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PetOpsReq')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PetOpsRet:
  """
  Attributes:
   - uid
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.I16, 'status', None, 0, ), # 2
  )

  def __init__(self, uid=thrift_spec[1][4], status=thrift_spec[2][4],):
    self.uid = uid
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PetOpsRet')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 2)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BurstRandInfo:
  """
  Attributes:
   - uid
   - name
   - randNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I16, 'randNum', None, 0, ), # 3
  )

  def __init__(self, uid=thrift_spec[1][4], name=None, randNum=thrift_spec[3][4],):
    self.uid = uid
    self.name = name
    self.randNum = randNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.randNum = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BurstRandInfo')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 1)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.randNum is not None:
      oprot.writeFieldBegin('randNum', TType.I16, 3)
      oprot.writeI16(self.randNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.randNum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MonserBurstItemsRet:
  """
  Attributes:
   - uidMon
   - toUid
   - items
   - exp
   - gold
   - teamBurstInfo
   - callbackId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uidMon', None, 0, ), # 1
    (2, TType.I64, 'toUid', None, 0, ), # 2
    (3, TType.LIST, 'items', (TType.STRUCT,(Item, Item.thrift_spec)), None, ), # 3
    (4, TType.I32, 'exp', None, 0, ), # 4
    (5, TType.I32, 'gold', None, 0, ), # 5
    (6, TType.LIST, 'teamBurstInfo', (TType.STRUCT,(BurstRandInfo, BurstRandInfo.thrift_spec)), None, ), # 6
    (7, TType.I64, 'callbackId', None, 0, ), # 7
  )

  def __init__(self, uidMon=thrift_spec[1][4], toUid=thrift_spec[2][4], items=None, exp=thrift_spec[4][4], gold=thrift_spec[5][4], teamBurstInfo=None, callbackId=thrift_spec[7][4],):
    self.uidMon = uidMon
    self.toUid = toUid
    self.items = items
    self.exp = exp
    self.gold = gold
    self.teamBurstInfo = teamBurstInfo
    self.callbackId = callbackId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uidMon = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.toUid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.items = []
          (_etype214, _size211) = iprot.readListBegin()
          for _i215 in xrange(_size211):
            _elem216 = Item()
            _elem216.read(iprot)
            self.items.append(_elem216)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.gold = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.teamBurstInfo = []
          (_etype220, _size217) = iprot.readListBegin()
          for _i221 in xrange(_size217):
            _elem222 = BurstRandInfo()
            _elem222.read(iprot)
            self.teamBurstInfo.append(_elem222)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.callbackId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MonserBurstItemsRet')
    if self.uidMon is not None:
      oprot.writeFieldBegin('uidMon', TType.I64, 1)
      oprot.writeI64(self.uidMon)
      oprot.writeFieldEnd()
    if self.toUid is not None:
      oprot.writeFieldBegin('toUid', TType.I64, 2)
      oprot.writeI64(self.toUid)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter223 in self.items:
        iter223.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 4)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I32, 5)
      oprot.writeI32(self.gold)
      oprot.writeFieldEnd()
    if self.teamBurstInfo is not None:
      oprot.writeFieldBegin('teamBurstInfo', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.teamBurstInfo))
      for iter224 in self.teamBurstInfo:
        iter224.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.callbackId is not None:
      oprot.writeFieldBegin('callbackId', TType.I64, 7)
      oprot.writeI64(self.callbackId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uidMon)
    value = (value * 31) ^ hash(self.toUid)
    value = (value * 31) ^ hash(self.items)
    value = (value * 31) ^ hash(self.exp)
    value = (value * 31) ^ hash(self.gold)
    value = (value * 31) ^ hash(self.teamBurstInfo)
    value = (value * 31) ^ hash(self.callbackId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CopymapStartRet:
  """
  Attributes:
   - maxSec
   - intro
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'maxSec', None, 0, ), # 1
    (2, TType.STRING, 'intro', None, "", ), # 2
  )

  def __init__(self, maxSec=thrift_spec[1][4], intro=thrift_spec[2][4],):
    self.maxSec = maxSec
    self.intro = intro

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.maxSec = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.intro = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CopymapStartRet')
    if self.maxSec is not None:
      oprot.writeFieldBegin('maxSec', TType.I32, 1)
      oprot.writeI32(self.maxSec)
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 2)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.maxSec)
    value = (value * 31) ^ hash(self.intro)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CopymapEndRet:
  """
  Attributes:
   - result
   - exp
   - gold
   - items
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'result', None, 0, ), # 1
    (2, TType.I32, 'exp', None, 0, ), # 2
    (3, TType.I32, 'gold', None, 0, ), # 3
    (4, TType.LIST, 'items', (TType.STRUCT,(Item, Item.thrift_spec)), None, ), # 4
  )

  def __init__(self, result=thrift_spec[1][4], exp=thrift_spec[2][4], gold=thrift_spec[3][4], items=None,):
    self.result = result
    self.exp = exp
    self.gold = gold
    self.items = items

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.result = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.exp = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.gold = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.items = []
          (_etype228, _size225) = iprot.readListBegin()
          for _i229 in xrange(_size225):
            _elem230 = Item()
            _elem230.read(iprot)
            self.items.append(_elem230)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CopymapEndRet')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I16, 1)
      oprot.writeI16(self.result)
      oprot.writeFieldEnd()
    if self.exp is not None:
      oprot.writeFieldBegin('exp', TType.I32, 2)
      oprot.writeI32(self.exp)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I32, 3)
      oprot.writeI32(self.gold)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter231 in self.items:
        iter231.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.result)
    value = (value * 31) ^ hash(self.exp)
    value = (value * 31) ^ hash(self.gold)
    value = (value * 31) ^ hash(self.items)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RepoItemOpsReq:
  """
  Attributes:
   - opstype
   - itemid
   - destPos
   - destNum
   - itemNum
   - position
   - passwd
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'itemid', None, 0, ), # 2
    (3, TType.I32, 'destPos', None, 0, ), # 3
    (4, TType.I32, 'destNum', None, 0, ), # 4
    (5, TType.I32, 'itemNum', None, 0, ), # 5
    (6, TType.I32, 'position', None, 0, ), # 6
    (7, TType.STRING, 'passwd', None, "", ), # 7
  )

  def __init__(self, opstype=thrift_spec[1][4], itemid=thrift_spec[2][4], destPos=thrift_spec[3][4], destNum=thrift_spec[4][4], itemNum=thrift_spec[5][4], position=thrift_spec[6][4], passwd=thrift_spec[7][4],):
    self.opstype = opstype
    self.itemid = itemid
    self.destPos = destPos
    self.destNum = destNum
    self.itemNum = itemNum
    self.position = position
    self.passwd = passwd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.itemid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.destPos = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.destNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.itemNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.position = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.passwd = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RepoItemOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.itemid is not None:
      oprot.writeFieldBegin('itemid', TType.I64, 2)
      oprot.writeI64(self.itemid)
      oprot.writeFieldEnd()
    if self.destPos is not None:
      oprot.writeFieldBegin('destPos', TType.I32, 3)
      oprot.writeI32(self.destPos)
      oprot.writeFieldEnd()
    if self.destNum is not None:
      oprot.writeFieldBegin('destNum', TType.I32, 4)
      oprot.writeI32(self.destNum)
      oprot.writeFieldEnd()
    if self.itemNum is not None:
      oprot.writeFieldBegin('itemNum', TType.I32, 5)
      oprot.writeI32(self.itemNum)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.I32, 6)
      oprot.writeI32(self.position)
      oprot.writeFieldEnd()
    if self.passwd is not None:
      oprot.writeFieldBegin('passwd', TType.STRING, 7)
      oprot.writeString(self.passwd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.itemid)
    value = (value * 31) ^ hash(self.destPos)
    value = (value * 31) ^ hash(self.destNum)
    value = (value * 31) ^ hash(self.itemNum)
    value = (value * 31) ^ hash(self.position)
    value = (value * 31) ^ hash(self.passwd)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RepoItemOpsRet:
  """
  Attributes:
   - opstype
   - itemid
   - destPos
   - repoMaxSize
   - allItem
   - itemNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'itemid', None, 0, ), # 2
    (3, TType.I32, 'destPos', None, 0, ), # 3
    (4, TType.I32, 'repoMaxSize', None, 0, ), # 4
    (5, TType.MAP, 'allItem', (TType.I32,None,TType.STRUCT,(Item, Item.thrift_spec)), None, ), # 5
    (6, TType.I32, 'itemNum', None, 0, ), # 6
  )

  def __init__(self, opstype=thrift_spec[1][4], itemid=thrift_spec[2][4], destPos=thrift_spec[3][4], repoMaxSize=thrift_spec[4][4], allItem=None, itemNum=thrift_spec[6][4],):
    self.opstype = opstype
    self.itemid = itemid
    self.destPos = destPos
    self.repoMaxSize = repoMaxSize
    self.allItem = allItem
    self.itemNum = itemNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.itemid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.destPos = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.repoMaxSize = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.allItem = {}
          (_ktype233, _vtype234, _size232 ) = iprot.readMapBegin()
          for _i236 in xrange(_size232):
            _key237 = iprot.readI32()
            _val238 = Item()
            _val238.read(iprot)
            self.allItem[_key237] = _val238
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.itemNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RepoItemOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.itemid is not None:
      oprot.writeFieldBegin('itemid', TType.I64, 2)
      oprot.writeI64(self.itemid)
      oprot.writeFieldEnd()
    if self.destPos is not None:
      oprot.writeFieldBegin('destPos', TType.I32, 3)
      oprot.writeI32(self.destPos)
      oprot.writeFieldEnd()
    if self.repoMaxSize is not None:
      oprot.writeFieldBegin('repoMaxSize', TType.I32, 4)
      oprot.writeI32(self.repoMaxSize)
      oprot.writeFieldEnd()
    if self.allItem is not None:
      oprot.writeFieldBegin('allItem', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.allItem))
      for kiter239,viter240 in self.allItem.items():
        oprot.writeI32(kiter239)
        viter240.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.itemNum is not None:
      oprot.writeFieldBegin('itemNum', TType.I32, 6)
      oprot.writeI32(self.itemNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.itemid)
    value = (value * 31) ^ hash(self.destPos)
    value = (value * 31) ^ hash(self.repoMaxSize)
    value = (value * 31) ^ hash(self.allItem)
    value = (value * 31) ^ hash(self.itemNum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExchangeOpsReq:
  """
  Attributes:
   - opstype
   - destuid
   - price
   - items
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'destuid', None, 0, ), # 2
    (3, TType.I32, 'price', None, 0, ), # 3
    (4, TType.MAP, 'items', (TType.I64,None,TType.I32,None), None, ), # 4
  )

  def __init__(self, opstype=thrift_spec[1][4], destuid=thrift_spec[2][4], price=thrift_spec[3][4], items=None,):
    self.opstype = opstype
    self.destuid = destuid
    self.price = price
    self.items = items

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.destuid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.items = {}
          (_ktype242, _vtype243, _size241 ) = iprot.readMapBegin()
          for _i245 in xrange(_size241):
            _key246 = iprot.readI64()
            _val247 = iprot.readI32()
            self.items[_key246] = _val247
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExchangeOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.destuid is not None:
      oprot.writeFieldBegin('destuid', TType.I64, 2)
      oprot.writeI64(self.destuid)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 3)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.MAP, 4)
      oprot.writeMapBegin(TType.I64, TType.I32, len(self.items))
      for kiter248,viter249 in self.items.items():
        oprot.writeI64(kiter248)
        oprot.writeI32(viter249)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.destuid)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.items)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExchangeOpsRet:
  """
  Attributes:
   - opstype
   - destuid
   - name
   - price
   - items
   - priceSelf
   - itemsSelf
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'destuid', None, 0, ), # 2
    (3, TType.STRING, 'name', None, "", ), # 3
    (4, TType.I32, 'price', None, 0, ), # 4
    (5, TType.LIST, 'items', (TType.STRUCT,(Item, Item.thrift_spec)), None, ), # 5
    (6, TType.I32, 'priceSelf', None, 0, ), # 6
    (7, TType.LIST, 'itemsSelf', (TType.STRUCT,(Item, Item.thrift_spec)), None, ), # 7
  )

  def __init__(self, opstype=thrift_spec[1][4], destuid=thrift_spec[2][4], name=thrift_spec[3][4], price=thrift_spec[4][4], items=None, priceSelf=thrift_spec[6][4], itemsSelf=None,):
    self.opstype = opstype
    self.destuid = destuid
    self.name = name
    self.price = price
    self.items = items
    self.priceSelf = priceSelf
    self.itemsSelf = itemsSelf

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.destuid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.items = []
          (_etype253, _size250) = iprot.readListBegin()
          for _i254 in xrange(_size250):
            _elem255 = Item()
            _elem255.read(iprot)
            self.items.append(_elem255)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.priceSelf = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.itemsSelf = []
          (_etype259, _size256) = iprot.readListBegin()
          for _i260 in xrange(_size256):
            _elem261 = Item()
            _elem261.read(iprot)
            self.itemsSelf.append(_elem261)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExchangeOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.destuid is not None:
      oprot.writeFieldBegin('destuid', TType.I64, 2)
      oprot.writeI64(self.destuid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I32, 4)
      oprot.writeI32(self.price)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter262 in self.items:
        iter262.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.priceSelf is not None:
      oprot.writeFieldBegin('priceSelf', TType.I32, 6)
      oprot.writeI32(self.priceSelf)
      oprot.writeFieldEnd()
    if self.itemsSelf is not None:
      oprot.writeFieldBegin('itemsSelf', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.itemsSelf))
      for iter263 in self.itemsSelf:
        iter263.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.destuid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.items)
    value = (value * 31) ^ hash(self.priceSelf)
    value = (value * 31) ^ hash(self.itemsSelf)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoneyBankQueryRet:
  """
  Attributes:
   - moneyNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'moneyNum', None, 0, ), # 1
  )

  def __init__(self, moneyNum=thrift_spec[1][4],):
    self.moneyNum = moneyNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.moneyNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoneyBankQueryRet')
    if self.moneyNum is not None:
      oprot.writeFieldBegin('moneyNum', TType.I32, 1)
      oprot.writeI32(self.moneyNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.moneyNum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoneyBankOpsReq:
  """
  Attributes:
   - opstype
   - num
   - passwd
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I32, 'num', None, 0, ), # 2
    (3, TType.STRING, 'passwd', None, "", ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], num=thrift_spec[2][4], passwd=thrift_spec[3][4],):
    self.opstype = opstype
    self.num = num
    self.passwd = passwd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.passwd = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoneyBankOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I32, 2)
      oprot.writeI32(self.num)
      oprot.writeFieldEnd()
    if self.passwd is not None:
      oprot.writeFieldBegin('passwd', TType.STRING, 3)
      oprot.writeString(self.passwd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.num)
    value = (value * 31) ^ hash(self.passwd)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MoneyBankOpsRet:
  """
  Attributes:
   - opstype
   - num
   - isSetPasswd
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I32, 'num', None, 0, ), # 2
    (3, TType.I32, 'isSetPasswd', None, 0, ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], num=thrift_spec[2][4], isSetPasswd=thrift_spec[3][4],):
    self.opstype = opstype
    self.num = num
    self.isSetPasswd = isSetPasswd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.isSetPasswd = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MoneyBankOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I32, 2)
      oprot.writeI32(self.num)
      oprot.writeFieldEnd()
    if self.isSetPasswd is not None:
      oprot.writeFieldBegin('isSetPasswd', TType.I32, 3)
      oprot.writeI32(self.isSetPasswd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.num)
    value = (value * 31) ^ hash(self.isSetPasswd)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemExtraOpsReq:
  """
  Attributes:
   - opstype
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4],):
    self.opstype = opstype
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemExtraOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemExtraOpsRet:
  """
  Attributes:
   - opstype
   - uid
   - gold
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uid', None, 0, ), # 2
    (3, TType.I32, 'gold', None, 0, ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], uid=thrift_spec[2][4], gold=thrift_spec[3][4],):
    self.opstype = opstype
    self.uid = uid
    self.gold = gold

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.gold = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemExtraOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 2)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I32, 3)
      oprot.writeI32(self.gold)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.gold)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuctionOpsReq:
  """
  Attributes:
   - opstype
   - name
   - itemType
   - minLevel
   - maxLevel
   - itemSellId
   - sellPrice
   - sellNum
   - sellTime
   - auctionId
   - job
   - quality
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I32, 'itemType', None, 0, ), # 3
    (4, TType.I32, 'minLevel', None, 0, ), # 4
    (5, TType.I32, 'maxLevel', None, 0, ), # 5
    (6, TType.I64, 'itemSellId', None, 0, ), # 6
    (7, TType.I32, 'sellPrice', None, 0, ), # 7
    (8, TType.I32, 'sellNum', None, 0, ), # 8
    (9, TType.I32, 'sellTime', None, 0, ), # 9
    (10, TType.I64, 'auctionId', None, 0, ), # 10
    (11, TType.I32, 'job', None, 0, ), # 11
    (12, TType.I32, 'quality', None, 0, ), # 12
  )

  def __init__(self, opstype=thrift_spec[1][4], name=thrift_spec[2][4], itemType=thrift_spec[3][4], minLevel=thrift_spec[4][4], maxLevel=thrift_spec[5][4], itemSellId=thrift_spec[6][4], sellPrice=thrift_spec[7][4], sellNum=thrift_spec[8][4], sellTime=thrift_spec[9][4], auctionId=thrift_spec[10][4], job=thrift_spec[11][4], quality=thrift_spec[12][4],):
    self.opstype = opstype
    self.name = name
    self.itemType = itemType
    self.minLevel = minLevel
    self.maxLevel = maxLevel
    self.itemSellId = itemSellId
    self.sellPrice = sellPrice
    self.sellNum = sellNum
    self.sellTime = sellTime
    self.auctionId = auctionId
    self.job = job
    self.quality = quality

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.itemType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.minLevel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.maxLevel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.itemSellId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.sellPrice = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.sellNum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.sellTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.auctionId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.job = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.quality = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuctionOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.itemType is not None:
      oprot.writeFieldBegin('itemType', TType.I32, 3)
      oprot.writeI32(self.itemType)
      oprot.writeFieldEnd()
    if self.minLevel is not None:
      oprot.writeFieldBegin('minLevel', TType.I32, 4)
      oprot.writeI32(self.minLevel)
      oprot.writeFieldEnd()
    if self.maxLevel is not None:
      oprot.writeFieldBegin('maxLevel', TType.I32, 5)
      oprot.writeI32(self.maxLevel)
      oprot.writeFieldEnd()
    if self.itemSellId is not None:
      oprot.writeFieldBegin('itemSellId', TType.I64, 6)
      oprot.writeI64(self.itemSellId)
      oprot.writeFieldEnd()
    if self.sellPrice is not None:
      oprot.writeFieldBegin('sellPrice', TType.I32, 7)
      oprot.writeI32(self.sellPrice)
      oprot.writeFieldEnd()
    if self.sellNum is not None:
      oprot.writeFieldBegin('sellNum', TType.I32, 8)
      oprot.writeI32(self.sellNum)
      oprot.writeFieldEnd()
    if self.sellTime is not None:
      oprot.writeFieldBegin('sellTime', TType.I32, 9)
      oprot.writeI32(self.sellTime)
      oprot.writeFieldEnd()
    if self.auctionId is not None:
      oprot.writeFieldBegin('auctionId', TType.I64, 10)
      oprot.writeI64(self.auctionId)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I32, 11)
      oprot.writeI32(self.job)
      oprot.writeFieldEnd()
    if self.quality is not None:
      oprot.writeFieldBegin('quality', TType.I32, 12)
      oprot.writeI32(self.quality)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.itemType)
    value = (value * 31) ^ hash(self.minLevel)
    value = (value * 31) ^ hash(self.maxLevel)
    value = (value * 31) ^ hash(self.itemSellId)
    value = (value * 31) ^ hash(self.sellPrice)
    value = (value * 31) ^ hash(self.sellNum)
    value = (value * 31) ^ hash(self.sellTime)
    value = (value * 31) ^ hash(self.auctionId)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.quality)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuctionData:
  """
  Attributes:
   - auctionId
   - name
   - level
   - sellPrice
   - sellTime
   - owner
   - item
   - uid
   - customUid
   - customName
   - buyTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'auctionId', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I32, 'level', None, 0, ), # 3
    (4, TType.I32, 'sellPrice', None, 0, ), # 4
    (5, TType.I32, 'sellTime', None, 0, ), # 5
    (6, TType.STRING, 'owner', None, "", ), # 6
    (7, TType.STRUCT, 'item', (Item, Item.thrift_spec), None, ), # 7
    (8, TType.I32, 'uid', None, 0, ), # 8
    (9, TType.I32, 'customUid', None, 0, ), # 9
    (10, TType.STRING, 'customName', None, "", ), # 10
    (11, TType.I32, 'buyTime', None, 0, ), # 11
  )

  def __init__(self, auctionId=thrift_spec[1][4], name=thrift_spec[2][4], level=thrift_spec[3][4], sellPrice=thrift_spec[4][4], sellTime=thrift_spec[5][4], owner=thrift_spec[6][4], item=None, uid=thrift_spec[8][4], customUid=thrift_spec[9][4], customName=thrift_spec[10][4], buyTime=thrift_spec[11][4],):
    self.auctionId = auctionId
    self.name = name
    self.level = level
    self.sellPrice = sellPrice
    self.sellTime = sellTime
    self.owner = owner
    self.item = item
    self.uid = uid
    self.customUid = customUid
    self.customName = customName
    self.buyTime = buyTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.auctionId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sellPrice = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sellTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.owner = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.item = Item()
          self.item.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.uid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.customUid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.customName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.buyTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuctionData')
    if self.auctionId is not None:
      oprot.writeFieldBegin('auctionId', TType.I64, 1)
      oprot.writeI64(self.auctionId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 3)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.sellPrice is not None:
      oprot.writeFieldBegin('sellPrice', TType.I32, 4)
      oprot.writeI32(self.sellPrice)
      oprot.writeFieldEnd()
    if self.sellTime is not None:
      oprot.writeFieldBegin('sellTime', TType.I32, 5)
      oprot.writeI32(self.sellTime)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRING, 6)
      oprot.writeString(self.owner)
      oprot.writeFieldEnd()
    if self.item is not None:
      oprot.writeFieldBegin('item', TType.STRUCT, 7)
      self.item.write(oprot)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I32, 8)
      oprot.writeI32(self.uid)
      oprot.writeFieldEnd()
    if self.customUid is not None:
      oprot.writeFieldBegin('customUid', TType.I32, 9)
      oprot.writeI32(self.customUid)
      oprot.writeFieldEnd()
    if self.customName is not None:
      oprot.writeFieldBegin('customName', TType.STRING, 10)
      oprot.writeString(self.customName)
      oprot.writeFieldEnd()
    if self.buyTime is not None:
      oprot.writeFieldBegin('buyTime', TType.I32, 11)
      oprot.writeI32(self.buyTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.auctionId)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.sellPrice)
    value = (value * 31) ^ hash(self.sellTime)
    value = (value * 31) ^ hash(self.owner)
    value = (value * 31) ^ hash(self.item)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.customUid)
    value = (value * 31) ^ hash(self.customName)
    value = (value * 31) ^ hash(self.buyTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuctionOpsRet:
  """
  Attributes:
   - opstype
   - auctionData
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.LIST, 'auctionData', (TType.STRUCT,(AuctionData, AuctionData.thrift_spec)), None, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], auctionData=None,):
    self.opstype = opstype
    self.auctionData = auctionData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.auctionData = []
          (_etype267, _size264) = iprot.readListBegin()
          for _i268 in xrange(_size264):
            _elem269 = AuctionData()
            _elem269.read(iprot)
            self.auctionData.append(_elem269)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuctionOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.auctionData is not None:
      oprot.writeFieldBegin('auctionData', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.auctionData))
      for iter270 in self.auctionData:
        iter270.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.auctionData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemSaleOpsReq:
  """
  Attributes:
   - opstype
   - itemId
   - num
   - itemCfgId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'itemId', None, 0, ), # 2
    (3, TType.I16, 'num', None, 0, ), # 3
    (4, TType.I64, 'itemCfgId', None, 0, ), # 4
  )

  def __init__(self, opstype=thrift_spec[1][4], itemId=thrift_spec[2][4], num=thrift_spec[3][4], itemCfgId=thrift_spec[4][4],):
    self.opstype = opstype
    self.itemId = itemId
    self.num = num
    self.itemCfgId = itemCfgId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.itemId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.num = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.itemCfgId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemSaleOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.I64, 2)
      oprot.writeI64(self.itemId)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I16, 3)
      oprot.writeI16(self.num)
      oprot.writeFieldEnd()
    if self.itemCfgId is not None:
      oprot.writeFieldBegin('itemCfgId', TType.I64, 4)
      oprot.writeI64(self.itemCfgId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.itemId)
    value = (value * 31) ^ hash(self.num)
    value = (value * 31) ^ hash(self.itemCfgId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemData:
  """
  Attributes:
   - toSell
   - toSellNum
   - item
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'toSell', None, None, ), # 1
    (2, TType.I16, 'toSellNum', None, None, ), # 2
    (3, TType.STRUCT, 'item', (Item, Item.thrift_spec), None, ), # 3
  )

  def __init__(self, toSell=None, toSellNum=None, item=None,):
    self.toSell = toSell
    self.toSellNum = toSellNum
    self.item = item

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.toSell = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.toSellNum = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.item = Item()
          self.item.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemData')
    if self.toSell is not None:
      oprot.writeFieldBegin('toSell', TType.I16, 1)
      oprot.writeI16(self.toSell)
      oprot.writeFieldEnd()
    if self.toSellNum is not None:
      oprot.writeFieldBegin('toSellNum', TType.I16, 2)
      oprot.writeI16(self.toSellNum)
      oprot.writeFieldEnd()
    if self.item is not None:
      oprot.writeFieldBegin('item', TType.STRUCT, 3)
      self.item.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.toSell)
    value = (value * 31) ^ hash(self.toSellNum)
    value = (value * 31) ^ hash(self.item)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ItemSaleOpsRet:
  """
  Attributes:
   - price
   - itemData
   - allSaleItemData
   - opstype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'price', None, 0, ), # 1
    (2, TType.STRUCT, 'itemData', (ItemData, ItemData.thrift_spec), None, ), # 2
    (3, TType.MAP, 'allSaleItemData', (TType.I64,None,TType.STRUCT,(ItemData, ItemData.thrift_spec)), None, ), # 3
    (4, TType.I16, 'opstype', None, 0, ), # 4
  )

  def __init__(self, price=thrift_spec[1][4], itemData=None, allSaleItemData=None, opstype=thrift_spec[4][4],):
    self.price = price
    self.itemData = itemData
    self.allSaleItemData = allSaleItemData
    self.opstype = opstype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.price = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.itemData = ItemData()
          self.itemData.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.allSaleItemData = {}
          (_ktype272, _vtype273, _size271 ) = iprot.readMapBegin()
          for _i275 in xrange(_size271):
            _key276 = iprot.readI64()
            _val277 = ItemData()
            _val277.read(iprot)
            self.allSaleItemData[_key276] = _val277
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ItemSaleOpsRet')
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I64, 1)
      oprot.writeI64(self.price)
      oprot.writeFieldEnd()
    if self.itemData is not None:
      oprot.writeFieldBegin('itemData', TType.STRUCT, 2)
      self.itemData.write(oprot)
      oprot.writeFieldEnd()
    if self.allSaleItemData is not None:
      oprot.writeFieldBegin('allSaleItemData', TType.MAP, 3)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.allSaleItemData))
      for kiter278,viter279 in self.allSaleItemData.items():
        oprot.writeI64(kiter278)
        viter279.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 4)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.itemData)
    value = (value * 31) ^ hash(self.allSaleItemData)
    value = (value * 31) ^ hash(self.opstype)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GoldBuyOpsReq:
  """
  Attributes:
   - opstype
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'price', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], price=thrift_spec[2][4],):
    self.opstype = opstype
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.price = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GoldBuyOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I64, 2)
      oprot.writeI64(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GoldBuyOpsRet:
  """
  Attributes:
   - opstype
   - price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'price', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], price=thrift_spec[2][4],):
    self.opstype = opstype
    self.price = price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.price = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GoldBuyOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.I64, 2)
      oprot.writeI64(self.price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarriageOpsReq:
  """
  Attributes:
   - opstype
   - visitors
   - msg
   - marryUid
   - housePos
   - houseItemId
   - marryId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.LIST, 'visitors', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'msg', None, "", ), # 3
    (4, TType.I64, 'marryUid', None, 0, ), # 4
    (5, TType.I16, 'housePos', None, 0, ), # 5
    (6, TType.I32, 'houseItemId', None, 0, ), # 6
    (7, TType.I64, 'marryId', None, 0, ), # 7
  )

  def __init__(self, opstype=thrift_spec[1][4], visitors=None, msg=thrift_spec[3][4], marryUid=thrift_spec[4][4], housePos=thrift_spec[5][4], houseItemId=thrift_spec[6][4], marryId=thrift_spec[7][4],):
    self.opstype = opstype
    self.visitors = visitors
    self.msg = msg
    self.marryUid = marryUid
    self.housePos = housePos
    self.houseItemId = houseItemId
    self.marryId = marryId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.visitors = []
          (_etype283, _size280) = iprot.readListBegin()
          for _i284 in xrange(_size280):
            _elem285 = iprot.readString()
            self.visitors.append(_elem285)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.msg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.marryUid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.housePos = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.houseItemId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.marryId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarriageOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.visitors is not None:
      oprot.writeFieldBegin('visitors', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.visitors))
      for iter286 in self.visitors:
        oprot.writeString(iter286)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 3)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.marryUid is not None:
      oprot.writeFieldBegin('marryUid', TType.I64, 4)
      oprot.writeI64(self.marryUid)
      oprot.writeFieldEnd()
    if self.housePos is not None:
      oprot.writeFieldBegin('housePos', TType.I16, 5)
      oprot.writeI16(self.housePos)
      oprot.writeFieldEnd()
    if self.houseItemId is not None:
      oprot.writeFieldBegin('houseItemId', TType.I32, 6)
      oprot.writeI32(self.houseItemId)
      oprot.writeFieldEnd()
    if self.marryId is not None:
      oprot.writeFieldBegin('marryId', TType.I64, 7)
      oprot.writeI64(self.marryId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.visitors)
    value = (value * 31) ^ hash(self.msg)
    value = (value * 31) ^ hash(self.marryUid)
    value = (value * 31) ^ hash(self.housePos)
    value = (value * 31) ^ hash(self.houseItemId)
    value = (value * 31) ^ hash(self.marryId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarriagePlayerMsg:
  """
  Attributes:
   - uid
   - name
   - job
   - gender
   - level
   - online
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I16, 'job', None, 0, ), # 3
    (4, TType.I16, 'gender', None, 0, ), # 4
    (5, TType.I32, 'level', None, 0, ), # 5
    (6, TType.BOOL, 'online', None, None, ), # 6
    (7, TType.I16, 'status', None, 0, ), # 7
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], job=thrift_spec[3][4], gender=thrift_spec[4][4], level=thrift_spec[5][4], online=None, status=thrift_spec[7][4],):
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.online = online
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.online = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarriagePlayerMsg')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 3)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 4)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 5)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.online is not None:
      oprot.writeFieldBegin('online', TType.BOOL, 6)
      oprot.writeBool(self.online)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 7)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.online)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarriageItem:
  """
  Attributes:
   - pos
   - itemCfgId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'pos', None, -1, ), # 1
    (2, TType.I32, 'itemCfgId', None, 0, ), # 2
  )

  def __init__(self, pos=thrift_spec[1][4], itemCfgId=thrift_spec[2][4],):
    self.pos = pos
    self.itemCfgId = itemCfgId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.pos = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.itemCfgId = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarriageItem')
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I16, 1)
      oprot.writeI16(self.pos)
      oprot.writeFieldEnd()
    if self.itemCfgId is not None:
      oprot.writeFieldBegin('itemCfgId', TType.I32, 2)
      oprot.writeI32(self.itemCfgId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pos)
    value = (value * 31) ^ hash(self.itemCfgId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarriageVisitListBaseInfo:
  """
  Attributes:
   - marryId
   - coupleData
   - tmWedding
   - setupItems
   - tianmi
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'marryId', None, 0, ), # 1
    (2, TType.LIST, 'coupleData', (TType.STRUCT,(MarriagePlayerMsg, MarriagePlayerMsg.thrift_spec)), None, ), # 2
    (3, TType.I32, 'tmWedding', None, 0, ), # 3
    (4, TType.LIST, 'setupItems', (TType.STRUCT,(MarriageItem, MarriageItem.thrift_spec)), None, ), # 4
    (5, TType.I32, 'tianmi', None, 0, ), # 5
  )

  def __init__(self, marryId=thrift_spec[1][4], coupleData=None, tmWedding=thrift_spec[3][4], setupItems=None, tianmi=thrift_spec[5][4],):
    self.marryId = marryId
    self.coupleData = coupleData
    self.tmWedding = tmWedding
    self.setupItems = setupItems
    self.tianmi = tianmi

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.marryId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.coupleData = []
          (_etype290, _size287) = iprot.readListBegin()
          for _i291 in xrange(_size287):
            _elem292 = MarriagePlayerMsg()
            _elem292.read(iprot)
            self.coupleData.append(_elem292)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.tmWedding = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.setupItems = []
          (_etype296, _size293) = iprot.readListBegin()
          for _i297 in xrange(_size293):
            _elem298 = MarriageItem()
            _elem298.read(iprot)
            self.setupItems.append(_elem298)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.tianmi = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarriageVisitListBaseInfo')
    if self.marryId is not None:
      oprot.writeFieldBegin('marryId', TType.I64, 1)
      oprot.writeI64(self.marryId)
      oprot.writeFieldEnd()
    if self.coupleData is not None:
      oprot.writeFieldBegin('coupleData', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.coupleData))
      for iter299 in self.coupleData:
        iter299.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tmWedding is not None:
      oprot.writeFieldBegin('tmWedding', TType.I32, 3)
      oprot.writeI32(self.tmWedding)
      oprot.writeFieldEnd()
    if self.setupItems is not None:
      oprot.writeFieldBegin('setupItems', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.setupItems))
      for iter300 in self.setupItems:
        iter300.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tianmi is not None:
      oprot.writeFieldBegin('tianmi', TType.I32, 5)
      oprot.writeI32(self.tianmi)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.marryId)
    value = (value * 31) ^ hash(self.coupleData)
    value = (value * 31) ^ hash(self.tmWedding)
    value = (value * 31) ^ hash(self.setupItems)
    value = (value * 31) ^ hash(self.tianmi)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarriageBaseInfo:
  """
  Attributes:
   - marryId
   - coupleData
   - listAttends
   - flagXiTie
   - flagWeding
   - tmWedding
   - tianmi
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'marryId', None, 0, ), # 1
    (2, TType.LIST, 'coupleData', (TType.STRUCT,(MarriagePlayerMsg, MarriagePlayerMsg.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'listAttends', (TType.STRUCT,(MarriagePlayerMsg, MarriagePlayerMsg.thrift_spec)), None, ), # 3
    (4, TType.I16, 'flagXiTie', None, 0, ), # 4
    (5, TType.I16, 'flagWeding', None, 0, ), # 5
    (6, TType.I32, 'tmWedding', None, 0, ), # 6
    (7, TType.I32, 'tianmi', None, 0, ), # 7
  )

  def __init__(self, marryId=thrift_spec[1][4], coupleData=None, listAttends=None, flagXiTie=thrift_spec[4][4], flagWeding=thrift_spec[5][4], tmWedding=thrift_spec[6][4], tianmi=thrift_spec[7][4],):
    self.marryId = marryId
    self.coupleData = coupleData
    self.listAttends = listAttends
    self.flagXiTie = flagXiTie
    self.flagWeding = flagWeding
    self.tmWedding = tmWedding
    self.tianmi = tianmi

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.marryId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.coupleData = []
          (_etype304, _size301) = iprot.readListBegin()
          for _i305 in xrange(_size301):
            _elem306 = MarriagePlayerMsg()
            _elem306.read(iprot)
            self.coupleData.append(_elem306)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.listAttends = []
          (_etype310, _size307) = iprot.readListBegin()
          for _i311 in xrange(_size307):
            _elem312 = MarriagePlayerMsg()
            _elem312.read(iprot)
            self.listAttends.append(_elem312)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.flagXiTie = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.flagWeding = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.tmWedding = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.tianmi = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarriageBaseInfo')
    if self.marryId is not None:
      oprot.writeFieldBegin('marryId', TType.I64, 1)
      oprot.writeI64(self.marryId)
      oprot.writeFieldEnd()
    if self.coupleData is not None:
      oprot.writeFieldBegin('coupleData', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.coupleData))
      for iter313 in self.coupleData:
        iter313.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.listAttends is not None:
      oprot.writeFieldBegin('listAttends', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.listAttends))
      for iter314 in self.listAttends:
        iter314.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flagXiTie is not None:
      oprot.writeFieldBegin('flagXiTie', TType.I16, 4)
      oprot.writeI16(self.flagXiTie)
      oprot.writeFieldEnd()
    if self.flagWeding is not None:
      oprot.writeFieldBegin('flagWeding', TType.I16, 5)
      oprot.writeI16(self.flagWeding)
      oprot.writeFieldEnd()
    if self.tmWedding is not None:
      oprot.writeFieldBegin('tmWedding', TType.I32, 6)
      oprot.writeI32(self.tmWedding)
      oprot.writeFieldEnd()
    if self.tianmi is not None:
      oprot.writeFieldBegin('tianmi', TType.I32, 7)
      oprot.writeI32(self.tianmi)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.marryId)
    value = (value * 31) ^ hash(self.coupleData)
    value = (value * 31) ^ hash(self.listAttends)
    value = (value * 31) ^ hash(self.flagXiTie)
    value = (value * 31) ^ hash(self.flagWeding)
    value = (value * 31) ^ hash(self.tmWedding)
    value = (value * 31) ^ hash(self.tianmi)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarriageOpsMsgRet:
  """
  Attributes:
   - opstype
   - baseInfo
   - allMarriageInfo
   - delTime
   - msg
   - gold
   - getItems
   - setupItems
   - argPlayer
   - weddingSkillId
   - listVisitHouseInfo
   - otherHouseInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.STRUCT, 'baseInfo', (MarriageBaseInfo, MarriageBaseInfo.thrift_spec), None, ), # 2
    (3, TType.LIST, 'allMarriageInfo', (TType.STRUCT,(MarriageBaseInfo, MarriageBaseInfo.thrift_spec)), None, ), # 3
    (4, TType.I32, 'delTime', None, 0, ), # 4
    (5, TType.STRING, 'msg', None, "", ), # 5
    (6, TType.I64, 'gold', None, 0, ), # 6
    (7, TType.LIST, 'getItems', (TType.STRUCT,(Item, Item.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'setupItems', (TType.STRUCT,(MarriageItem, MarriageItem.thrift_spec)), None, ), # 8
    (9, TType.STRUCT, 'argPlayer', (MarriagePlayerMsg, MarriagePlayerMsg.thrift_spec), None, ), # 9
    (10, TType.I16, 'weddingSkillId', None, 0, ), # 10
    (11, TType.LIST, 'listVisitHouseInfo', (TType.STRUCT,(MarriageVisitListBaseInfo, MarriageVisitListBaseInfo.thrift_spec)), None, ), # 11
    (12, TType.STRUCT, 'otherHouseInfo', (MarriageVisitListBaseInfo, MarriageVisitListBaseInfo.thrift_spec), None, ), # 12
  )

  def __init__(self, opstype=thrift_spec[1][4], baseInfo=None, allMarriageInfo=None, delTime=thrift_spec[4][4], msg=thrift_spec[5][4], gold=thrift_spec[6][4], getItems=None, setupItems=None, argPlayer=None, weddingSkillId=thrift_spec[10][4], listVisitHouseInfo=None, otherHouseInfo=None,):
    self.opstype = opstype
    self.baseInfo = baseInfo
    self.allMarriageInfo = allMarriageInfo
    self.delTime = delTime
    self.msg = msg
    self.gold = gold
    self.getItems = getItems
    self.setupItems = setupItems
    self.argPlayer = argPlayer
    self.weddingSkillId = weddingSkillId
    self.listVisitHouseInfo = listVisitHouseInfo
    self.otherHouseInfo = otherHouseInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.baseInfo = MarriageBaseInfo()
          self.baseInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.allMarriageInfo = []
          (_etype318, _size315) = iprot.readListBegin()
          for _i319 in xrange(_size315):
            _elem320 = MarriageBaseInfo()
            _elem320.read(iprot)
            self.allMarriageInfo.append(_elem320)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.delTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.msg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.gold = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.getItems = []
          (_etype324, _size321) = iprot.readListBegin()
          for _i325 in xrange(_size321):
            _elem326 = Item()
            _elem326.read(iprot)
            self.getItems.append(_elem326)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.setupItems = []
          (_etype330, _size327) = iprot.readListBegin()
          for _i331 in xrange(_size327):
            _elem332 = MarriageItem()
            _elem332.read(iprot)
            self.setupItems.append(_elem332)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.argPlayer = MarriagePlayerMsg()
          self.argPlayer.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.weddingSkillId = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.listVisitHouseInfo = []
          (_etype336, _size333) = iprot.readListBegin()
          for _i337 in xrange(_size333):
            _elem338 = MarriageVisitListBaseInfo()
            _elem338.read(iprot)
            self.listVisitHouseInfo.append(_elem338)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.otherHouseInfo = MarriageVisitListBaseInfo()
          self.otherHouseInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarriageOpsMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.baseInfo is not None:
      oprot.writeFieldBegin('baseInfo', TType.STRUCT, 2)
      self.baseInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.allMarriageInfo is not None:
      oprot.writeFieldBegin('allMarriageInfo', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.allMarriageInfo))
      for iter339 in self.allMarriageInfo:
        iter339.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.delTime is not None:
      oprot.writeFieldBegin('delTime', TType.I32, 4)
      oprot.writeI32(self.delTime)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 5)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I64, 6)
      oprot.writeI64(self.gold)
      oprot.writeFieldEnd()
    if self.getItems is not None:
      oprot.writeFieldBegin('getItems', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.getItems))
      for iter340 in self.getItems:
        iter340.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.setupItems is not None:
      oprot.writeFieldBegin('setupItems', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.setupItems))
      for iter341 in self.setupItems:
        iter341.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.argPlayer is not None:
      oprot.writeFieldBegin('argPlayer', TType.STRUCT, 9)
      self.argPlayer.write(oprot)
      oprot.writeFieldEnd()
    if self.weddingSkillId is not None:
      oprot.writeFieldBegin('weddingSkillId', TType.I16, 10)
      oprot.writeI16(self.weddingSkillId)
      oprot.writeFieldEnd()
    if self.listVisitHouseInfo is not None:
      oprot.writeFieldBegin('listVisitHouseInfo', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.listVisitHouseInfo))
      for iter342 in self.listVisitHouseInfo:
        iter342.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.otherHouseInfo is not None:
      oprot.writeFieldBegin('otherHouseInfo', TType.STRUCT, 12)
      self.otherHouseInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.baseInfo)
    value = (value * 31) ^ hash(self.allMarriageInfo)
    value = (value * 31) ^ hash(self.delTime)
    value = (value * 31) ^ hash(self.msg)
    value = (value * 31) ^ hash(self.gold)
    value = (value * 31) ^ hash(self.getItems)
    value = (value * 31) ^ hash(self.setupItems)
    value = (value * 31) ^ hash(self.argPlayer)
    value = (value * 31) ^ hash(self.weddingSkillId)
    value = (value * 31) ^ hash(self.listVisitHouseInfo)
    value = (value * 31) ^ hash(self.otherHouseInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarriageUpdateRet:
  """
  Attributes:
   - opstype
   - matePlayer
   - status
   - goldPlayer
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.STRUCT, 'matePlayer', (MarriagePlayerMsg, MarriagePlayerMsg.thrift_spec), None, ), # 2
    (3, TType.I16, 'status', None, 0, ), # 3
    (4, TType.STRUCT, 'goldPlayer', (MarriagePlayerMsg, MarriagePlayerMsg.thrift_spec), None, ), # 4
  )

  def __init__(self, opstype=thrift_spec[1][4], matePlayer=None, status=thrift_spec[3][4], goldPlayer=None,):
    self.opstype = opstype
    self.matePlayer = matePlayer
    self.status = status
    self.goldPlayer = goldPlayer

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.matePlayer = MarriagePlayerMsg()
          self.matePlayer.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.goldPlayer = MarriagePlayerMsg()
          self.goldPlayer.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarriageUpdateRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.matePlayer is not None:
      oprot.writeFieldBegin('matePlayer', TType.STRUCT, 2)
      self.matePlayer.write(oprot)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 3)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.goldPlayer is not None:
      oprot.writeFieldBegin('goldPlayer', TType.STRUCT, 4)
      self.goldPlayer.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.matePlayer)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.goldPlayer)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArenaOpsReq:
  """
  Attributes:
   - opstype
   - idArg
   - numArg
   - destuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'idArg', None, 0, ), # 2
    (3, TType.I32, 'numArg', None, 0, ), # 3
    (4, TType.I64, 'destuid', None, 0, ), # 4
  )

  def __init__(self, opstype=thrift_spec[1][4], idArg=thrift_spec[2][4], numArg=thrift_spec[3][4], destuid=thrift_spec[4][4],):
    self.opstype = opstype
    self.idArg = idArg
    self.numArg = numArg
    self.destuid = destuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.idArg = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.numArg = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.destuid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArenaOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.idArg is not None:
      oprot.writeFieldBegin('idArg', TType.I64, 2)
      oprot.writeI64(self.idArg)
      oprot.writeFieldEnd()
    if self.numArg is not None:
      oprot.writeFieldBegin('numArg', TType.I32, 3)
      oprot.writeI32(self.numArg)
      oprot.writeFieldEnd()
    if self.destuid is not None:
      oprot.writeFieldBegin('destuid', TType.I64, 4)
      oprot.writeI64(self.destuid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.idArg)
    value = (value * 31) ^ hash(self.numArg)
    value = (value * 31) ^ hash(self.destuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArenaPlayerData:
  """
  Attributes:
   - uid
   - name
   - job
   - gender
   - level
   - fightPower
   - rank
   - score
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I16, 'job', None, 0, ), # 3
    (4, TType.I16, 'gender', None, 0, ), # 4
    (5, TType.I32, 'level', None, 0, ), # 5
    (6, TType.I32, 'fightPower', None, 0, ), # 6
    (7, TType.I32, 'rank', None, 0, ), # 7
    (8, TType.I32, 'score', None, 0, ), # 8
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], job=thrift_spec[3][4], gender=thrift_spec[4][4], level=thrift_spec[5][4], fightPower=thrift_spec[6][4], rank=thrift_spec[7][4], score=thrift_spec[8][4],):
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.fightPower = fightPower
    self.rank = rank
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.fightPower = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.rank = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.score = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArenaPlayerData')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 3)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 4)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 5)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.fightPower is not None:
      oprot.writeFieldBegin('fightPower', TType.I32, 6)
      oprot.writeI32(self.fightPower)
      oprot.writeFieldEnd()
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I32, 7)
      oprot.writeI32(self.rank)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.I32, 8)
      oprot.writeI32(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.fightPower)
    value = (value * 31) ^ hash(self.rank)
    value = (value * 31) ^ hash(self.score)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArenaScore2Item:
  """
  Attributes:
   - score
   - item
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'score', None, 0, ), # 1
    (2, TType.STRUCT, 'item', (Item, Item.thrift_spec), None, ), # 2
  )

  def __init__(self, score=thrift_spec[1][4], item=None,):
    self.score = score
    self.item = item

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.score = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.item = Item()
          self.item.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArenaScore2Item')
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.I32, 1)
      oprot.writeI32(self.score)
      oprot.writeFieldEnd()
    if self.item is not None:
      oprot.writeFieldBegin('item', TType.STRUCT, 2)
      self.item.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.item)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArenaOpsRet:
  """
  Attributes:
   - opstype
   - leftChallengeTimes
   - score
   - rank
   - listPlayers
   - listItems
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I32, 'leftChallengeTimes', None, 0, ), # 2
    (3, TType.I32, 'score', None, 0, ), # 3
    (4, TType.I32, 'rank', None, 0, ), # 4
    (5, TType.LIST, 'listPlayers', (TType.STRUCT,(ArenaPlayerData, ArenaPlayerData.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'listItems', (TType.STRUCT,(ArenaScore2Item, ArenaScore2Item.thrift_spec)), None, ), # 6
  )

  def __init__(self, opstype=thrift_spec[1][4], leftChallengeTimes=thrift_spec[2][4], score=thrift_spec[3][4], rank=thrift_spec[4][4], listPlayers=None, listItems=None,):
    self.opstype = opstype
    self.leftChallengeTimes = leftChallengeTimes
    self.score = score
    self.rank = rank
    self.listPlayers = listPlayers
    self.listItems = listItems

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.leftChallengeTimes = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.score = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.rank = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.listPlayers = []
          (_etype346, _size343) = iprot.readListBegin()
          for _i347 in xrange(_size343):
            _elem348 = ArenaPlayerData()
            _elem348.read(iprot)
            self.listPlayers.append(_elem348)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.listItems = []
          (_etype352, _size349) = iprot.readListBegin()
          for _i353 in xrange(_size349):
            _elem354 = ArenaScore2Item()
            _elem354.read(iprot)
            self.listItems.append(_elem354)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArenaOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.leftChallengeTimes is not None:
      oprot.writeFieldBegin('leftChallengeTimes', TType.I32, 2)
      oprot.writeI32(self.leftChallengeTimes)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.I32, 3)
      oprot.writeI32(self.score)
      oprot.writeFieldEnd()
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I32, 4)
      oprot.writeI32(self.rank)
      oprot.writeFieldEnd()
    if self.listPlayers is not None:
      oprot.writeFieldBegin('listPlayers', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.listPlayers))
      for iter355 in self.listPlayers:
        iter355.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.listItems is not None:
      oprot.writeFieldBegin('listItems', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.listItems))
      for iter356 in self.listItems:
        iter356.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.leftChallengeTimes)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.rank)
    value = (value * 31) ^ hash(self.listPlayers)
    value = (value * 31) ^ hash(self.listItems)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QieCuoReq:
  """
  Attributes:
   - opstype
   - uidarg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uidarg', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], uidarg=thrift_spec[2][4],):
    self.opstype = opstype
    self.uidarg = uidarg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uidarg = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QieCuoReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uidarg is not None:
      oprot.writeFieldBegin('uidarg', TType.I64, 2)
      oprot.writeI64(self.uidarg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uidarg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QieCuoRet:
  """
  Attributes:
   - opstype
   - infoPlayer
   - winUid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.STRUCT, 'infoPlayer', (BrotherPlayerMsg, BrotherPlayerMsg.thrift_spec), None, ), # 2
    (3, TType.I64, 'winUid', None, 0, ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], infoPlayer=None, winUid=thrift_spec[3][4],):
    self.opstype = opstype
    self.infoPlayer = infoPlayer
    self.winUid = winUid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.infoPlayer = BrotherPlayerMsg()
          self.infoPlayer.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.winUid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QieCuoRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.infoPlayer is not None:
      oprot.writeFieldBegin('infoPlayer', TType.STRUCT, 2)
      self.infoPlayer.write(oprot)
      oprot.writeFieldEnd()
    if self.winUid is not None:
      oprot.writeFieldBegin('winUid', TType.I64, 3)
      oprot.writeI64(self.winUid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.infoPlayer)
    value = (value * 31) ^ hash(self.winUid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MailOpsReq:
  """
  Attributes:
   - opstype
   - mailId
   - sendToUid
   - sendTgtType
   - title
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'mailId', None, 0, ), # 2
    (3, TType.I64, 'sendToUid', None, None, ), # 3
    (4, TType.I32, 'sendTgtType', None, None, ), # 4
    (5, TType.STRING, 'title', None, None, ), # 5
    (6, TType.STRING, 'msg', None, None, ), # 6
  )

  def __init__(self, opstype=thrift_spec[1][4], mailId=thrift_spec[2][4], sendToUid=None, sendTgtType=None, title=None, msg=None,):
    self.opstype = opstype
    self.mailId = mailId
    self.sendToUid = sendToUid
    self.sendTgtType = sendTgtType
    self.title = title
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.mailId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sendToUid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sendTgtType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MailOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.mailId is not None:
      oprot.writeFieldBegin('mailId', TType.I64, 2)
      oprot.writeI64(self.mailId)
      oprot.writeFieldEnd()
    if self.sendToUid is not None:
      oprot.writeFieldBegin('sendToUid', TType.I64, 3)
      oprot.writeI64(self.sendToUid)
      oprot.writeFieldEnd()
    if self.sendTgtType is not None:
      oprot.writeFieldBegin('sendTgtType', TType.I32, 4)
      oprot.writeI32(self.sendTgtType)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 5)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 6)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.mailId)
    value = (value * 31) ^ hash(self.sendToUid)
    value = (value * 31) ^ hash(self.sendTgtType)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MailPlayerMsg:
  """
  Attributes:
   - uid
   - name
   - job
   - gender
   - level
   - online
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I16, 'job', None, 0, ), # 3
    (4, TType.I16, 'gender', None, 0, ), # 4
    (5, TType.I32, 'level', None, 0, ), # 5
    (6, TType.BOOL, 'online', None, None, ), # 6
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], job=thrift_spec[3][4], gender=thrift_spec[4][4], level=thrift_spec[5][4], online=None,):
    self.uid = uid
    self.name = name
    self.job = job
    self.gender = gender
    self.level = level
    self.online = online

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.gender = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.online = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MailPlayerMsg')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 3)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I16, 4)
      oprot.writeI16(self.gender)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 5)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.online is not None:
      oprot.writeFieldBegin('online', TType.BOOL, 6)
      oprot.writeBool(self.online)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.online)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MailAttachData:
  """
  Attributes:
   - type
   - arg1
   - arg2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I64, 'arg1', None, None, ), # 2
    (3, TType.I64, 'arg2', None, None, ), # 3
  )

  def __init__(self, type=None, arg1=None, arg2=None,):
    self.type = type
    self.arg1 = arg1
    self.arg2 = arg2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.arg1 = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.arg2 = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MailAttachData')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.arg1 is not None:
      oprot.writeFieldBegin('arg1', TType.I64, 2)
      oprot.writeI64(self.arg1)
      oprot.writeFieldEnd()
    if self.arg2 is not None:
      oprot.writeFieldBegin('arg2', TType.I64, 3)
      oprot.writeI64(self.arg2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.arg1)
    value = (value * 31) ^ hash(self.arg2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MailDataNode:
  """
  Attributes:
   - mailId
   - msgType
   - sender
   - title
   - msg
   - listAttach
   - sendTime
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'mailId', None, 0, ), # 1
    (2, TType.I32, 'msgType', None, None, ), # 2
    (3, TType.STRUCT, 'sender', (MailPlayerMsg, MailPlayerMsg.thrift_spec), None, ), # 3
    (4, TType.STRING, 'title', None, "", ), # 4
    (5, TType.STRING, 'msg', None, "", ), # 5
    (6, TType.LIST, 'listAttach', (TType.STRUCT,(MailAttachData, MailAttachData.thrift_spec)), None, ), # 6
    (7, TType.I32, 'sendTime', None, 0, ), # 7
    (8, TType.I32, 'status', None,     0, ), # 8
  )

  def __init__(self, mailId=thrift_spec[1][4], msgType=None, sender=None, title=thrift_spec[4][4], msg=thrift_spec[5][4], listAttach=None, sendTime=thrift_spec[7][4], status=thrift_spec[8][4],):
    self.mailId = mailId
    self.msgType = msgType
    self.sender = sender
    self.title = title
    self.msg = msg
    self.listAttach = listAttach
    self.sendTime = sendTime
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.mailId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.msgType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.sender = MailPlayerMsg()
          self.sender.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.msg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.listAttach = []
          (_etype360, _size357) = iprot.readListBegin()
          for _i361 in xrange(_size357):
            _elem362 = MailAttachData()
            _elem362.read(iprot)
            self.listAttach.append(_elem362)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.sendTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MailDataNode')
    if self.mailId is not None:
      oprot.writeFieldBegin('mailId', TType.I64, 1)
      oprot.writeI64(self.mailId)
      oprot.writeFieldEnd()
    if self.msgType is not None:
      oprot.writeFieldBegin('msgType', TType.I32, 2)
      oprot.writeI32(self.msgType)
      oprot.writeFieldEnd()
    if self.sender is not None:
      oprot.writeFieldBegin('sender', TType.STRUCT, 3)
      self.sender.write(oprot)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 4)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 5)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.listAttach is not None:
      oprot.writeFieldBegin('listAttach', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.listAttach))
      for iter363 in self.listAttach:
        iter363.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sendTime is not None:
      oprot.writeFieldBegin('sendTime', TType.I32, 7)
      oprot.writeI32(self.sendTime)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 8)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mailId)
    value = (value * 31) ^ hash(self.msgType)
    value = (value * 31) ^ hash(self.sender)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.msg)
    value = (value * 31) ^ hash(self.listAttach)
    value = (value * 31) ^ hash(self.sendTime)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MailOpsRet:
  """
  Attributes:
   - opstype
   - listAllMaill
   - opMailId
   - listNewMail
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.LIST, 'listAllMaill', (TType.STRUCT,(MailDataNode, MailDataNode.thrift_spec)), None, ), # 2
    (3, TType.I64, 'opMailId', None, 0, ), # 3
    (4, TType.LIST, 'listNewMail', (TType.STRUCT,(MailDataNode, MailDataNode.thrift_spec)), None, ), # 4
  )

  def __init__(self, opstype=thrift_spec[1][4], listAllMaill=None, opMailId=thrift_spec[3][4], listNewMail=None,):
    self.opstype = opstype
    self.listAllMaill = listAllMaill
    self.opMailId = opMailId
    self.listNewMail = listNewMail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.listAllMaill = []
          (_etype367, _size364) = iprot.readListBegin()
          for _i368 in xrange(_size364):
            _elem369 = MailDataNode()
            _elem369.read(iprot)
            self.listAllMaill.append(_elem369)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.opMailId = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.listNewMail = []
          (_etype373, _size370) = iprot.readListBegin()
          for _i374 in xrange(_size370):
            _elem375 = MailDataNode()
            _elem375.read(iprot)
            self.listNewMail.append(_elem375)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MailOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.listAllMaill is not None:
      oprot.writeFieldBegin('listAllMaill', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.listAllMaill))
      for iter376 in self.listAllMaill:
        iter376.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.opMailId is not None:
      oprot.writeFieldBegin('opMailId', TType.I64, 3)
      oprot.writeI64(self.opMailId)
      oprot.writeFieldEnd()
    if self.listNewMail is not None:
      oprot.writeFieldBegin('listNewMail', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.listNewMail))
      for iter377 in self.listNewMail:
        iter377.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.listAllMaill)
    value = (value * 31) ^ hash(self.opMailId)
    value = (value * 31) ^ hash(self.listNewMail)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AttackModeReq:
  """
  Attributes:
   - opstype
   - modeAttack
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I16, 'modeAttack', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], modeAttack=thrift_spec[2][4],):
    self.opstype = opstype
    self.modeAttack = modeAttack

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.modeAttack = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AttackModeReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.modeAttack is not None:
      oprot.writeFieldBegin('modeAttack', TType.I16, 2)
      oprot.writeI16(self.modeAttack)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.modeAttack)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AttackModeRet:
  """
  Attributes:
   - opstype
   - modeAttack
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I16, 'modeAttack', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], modeAttack=thrift_spec[2][4],):
    self.opstype = opstype
    self.modeAttack = modeAttack

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.modeAttack = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AttackModeRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.modeAttack is not None:
      oprot.writeFieldBegin('modeAttack', TType.I16, 2)
      oprot.writeI16(self.modeAttack)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.modeAttack)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PkSinUpdateRet:
  """
  Attributes:
   - opstype
   - pkSinValue
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I16, 'pkSinValue', None, 0, ), # 2
    (3, TType.I64, 'uid', None, 0, ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], pkSinValue=thrift_spec[2][4], uid=thrift_spec[3][4],):
    self.opstype = opstype
    self.pkSinValue = pkSinValue
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.pkSinValue = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PkSinUpdateRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.pkSinValue is not None:
      oprot.writeFieldBegin('pkSinValue', TType.I16, 2)
      oprot.writeI16(self.pkSinValue)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 3)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.pkSinValue)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HelpAttackReq:
  """
  Attributes:
   - opstype
   - uidArg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'uidArg', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], uidArg=thrift_spec[2][4],):
    self.opstype = opstype
    self.uidArg = uidArg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uidArg = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HelpAttackReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.uidArg is not None:
      oprot.writeFieldBegin('uidArg', TType.I64, 2)
      oprot.writeI64(self.uidArg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.uidArg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HelpAttackRet:
  """
  Attributes:
   - opstype
   - infoPlayer
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.STRUCT, 'infoPlayer', (BrotherPlayerMsg, BrotherPlayerMsg.thrift_spec), None, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], infoPlayer=None,):
    self.opstype = opstype
    self.infoPlayer = infoPlayer

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.infoPlayer = BrotherPlayerMsg()
          self.infoPlayer.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HelpAttackRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.infoPlayer is not None:
      oprot.writeFieldBegin('infoPlayer', TType.STRUCT, 2)
      self.infoPlayer.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.infoPlayer)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RebornRet:
  """
  Attributes:
   - bornPlayerInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'bornPlayerInfo', (PlayerInfoRet, PlayerInfoRet.thrift_spec), None, ), # 1
  )

  def __init__(self, bornPlayerInfo=None,):
    self.bornPlayerInfo = bornPlayerInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.bornPlayerInfo = PlayerInfoRet()
          self.bornPlayerInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RebornRet')
    if self.bornPlayerInfo is not None:
      oprot.writeFieldBegin('bornPlayerInfo', TType.STRUCT, 1)
      self.bornPlayerInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bornPlayerInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XibaiReq:
  """
  Attributes:
   - opstype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
  )

  def __init__(self, opstype=thrift_spec[1][4],):
    self.opstype = opstype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XibaiReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XibaiRet:
  """
  Attributes:
   - opstype
   - costGold
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I32, 'costGold', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], costGold=thrift_spec[2][4],):
    self.opstype = opstype
    self.costGold = costGold

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.costGold = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XibaiRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.costGold is not None:
      oprot.writeFieldBegin('costGold', TType.I32, 2)
      oprot.writeI32(self.costGold)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.costGold)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RankOpsReq:
  """
  Attributes:
   - opstype
   - ranktype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I16, 'ranktype', None, 0, ), # 2
  )

  def __init__(self, opstype=thrift_spec[1][4], ranktype=thrift_spec[2][4],):
    self.opstype = opstype
    self.ranktype = ranktype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.ranktype = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RankOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.ranktype is not None:
      oprot.writeFieldBegin('ranktype', TType.I16, 2)
      oprot.writeI16(self.ranktype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.ranktype)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RankDataNode:
  """
  Attributes:
   - rank
   - name
   - uid
   - job
   - level
   - fightpower
   - gold
   - count
   - guild_name
   - guild_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'rank', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.I64, 'uid', None, 0, ), # 3
    (4, TType.I16, 'job', None, 0, ), # 4
    (5, TType.I32, 'level', None, 0, ), # 5
    (6, TType.I64, 'fightpower', None, 0, ), # 6
    (7, TType.I64, 'gold', None, 0, ), # 7
    (8, TType.I32, 'count', None, 0, ), # 8
    (9, TType.STRING, 'guild_name', None, "", ), # 9
    (10, TType.I64, 'guild_id', None, 0, ), # 10
  )

  def __init__(self, rank=thrift_spec[1][4], name=thrift_spec[2][4], uid=thrift_spec[3][4], job=thrift_spec[4][4], level=thrift_spec[5][4], fightpower=thrift_spec[6][4], gold=thrift_spec[7][4], count=thrift_spec[8][4], guild_name=thrift_spec[9][4], guild_id=thrift_spec[10][4],):
    self.rank = rank
    self.name = name
    self.uid = uid
    self.job = job
    self.level = level
    self.fightpower = fightpower
    self.gold = gold
    self.count = count
    self.guild_name = guild_name
    self.guild_id = guild_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.rank = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.job = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.level = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.fightpower = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.gold = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.guild_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.guild_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RankDataNode')
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I16, 1)
      oprot.writeI16(self.rank)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 3)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.I16, 4)
      oprot.writeI16(self.job)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 5)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.fightpower is not None:
      oprot.writeFieldBegin('fightpower', TType.I64, 6)
      oprot.writeI64(self.fightpower)
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I64, 7)
      oprot.writeI64(self.gold)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 8)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.guild_name is not None:
      oprot.writeFieldBegin('guild_name', TType.STRING, 9)
      oprot.writeString(self.guild_name)
      oprot.writeFieldEnd()
    if self.guild_id is not None:
      oprot.writeFieldBegin('guild_id', TType.I64, 10)
      oprot.writeI64(self.guild_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rank)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.fightpower)
    value = (value * 31) ^ hash(self.gold)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.guild_name)
    value = (value * 31) ^ hash(self.guild_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RankOpsRet:
  """
  Attributes:
   - opstype
   - ranktype
   - listRank
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I16, 'ranktype', None, 0, ), # 2
    (3, TType.LIST, 'listRank', (TType.STRUCT,(RankDataNode, RankDataNode.thrift_spec)), None, ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], ranktype=thrift_spec[2][4], listRank=None,):
    self.opstype = opstype
    self.ranktype = ranktype
    self.listRank = listRank

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.ranktype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.listRank = []
          (_etype381, _size378) = iprot.readListBegin()
          for _i382 in xrange(_size378):
            _elem383 = RankDataNode()
            _elem383.read(iprot)
            self.listRank.append(_elem383)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RankOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.ranktype is not None:
      oprot.writeFieldBegin('ranktype', TType.I16, 2)
      oprot.writeI16(self.ranktype)
      oprot.writeFieldEnd()
    if self.listRank is not None:
      oprot.writeFieldBegin('listRank', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.listRank))
      for iter384 in self.listRank:
        iter384.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.ranktype)
    value = (value * 31) ^ hash(self.listRank)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeartBeatReq:
  """
  Attributes:
   - arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'arg', None, 0, ), # 1
  )

  def __init__(self, arg=thrift_spec[1][4],):
    self.arg = arg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.arg = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeartBeatReq')
    if self.arg is not None:
      oprot.writeFieldBegin('arg', TType.I32, 1)
      oprot.writeI32(self.arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeartBeatRet:
  """
  Attributes:
   - arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'arg', None, 0, ), # 1
  )

  def __init__(self, arg=thrift_spec[1][4],):
    self.arg = arg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.arg = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeartBeatRet')
    if self.arg is not None:
      oprot.writeFieldBegin('arg', TType.I32, 1)
      oprot.writeI32(self.arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildWarOpsReq:
  """
  Attributes:
   - opstype
   - guildID
   - guildName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'guildID', None, 0, ), # 2
    (3, TType.STRING, 'guildName', None, "", ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], guildID=thrift_spec[2][4], guildName=thrift_spec[3][4],):
    self.opstype = opstype
    self.guildID = guildID
    self.guildName = guildName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.guildID = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.guildName = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildWarOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.guildID is not None:
      oprot.writeFieldBegin('guildID', TType.I64, 2)
      oprot.writeI64(self.guildID)
      oprot.writeFieldEnd()
    if self.guildName is not None:
      oprot.writeFieldBegin('guildName', TType.STRING, 3)
      oprot.writeString(self.guildName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.guildID)
    value = (value * 31) ^ hash(self.guildName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildWarOtherInfo:
  """
  Attributes:
   - tmWarStart
   - warApplyGuild
   - warFightGuild
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I32, 'tmWarStart', None, 0, ), # 2
    (3, TType.STRUCT, 'warApplyGuild', (GuildInfoMsg, GuildInfoMsg.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'warFightGuild', (GuildInfoMsg, GuildInfoMsg.thrift_spec), None, ), # 4
  )

  def __init__(self, tmWarStart=thrift_spec[2][4], warApplyGuild=None, warFightGuild=None,):
    self.tmWarStart = tmWarStart
    self.warApplyGuild = warApplyGuild
    self.warFightGuild = warFightGuild

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I32:
          self.tmWarStart = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.warApplyGuild = GuildInfoMsg()
          self.warApplyGuild.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.warFightGuild = GuildInfoMsg()
          self.warFightGuild.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildWarOtherInfo')
    if self.tmWarStart is not None:
      oprot.writeFieldBegin('tmWarStart', TType.I32, 2)
      oprot.writeI32(self.tmWarStart)
      oprot.writeFieldEnd()
    if self.warApplyGuild is not None:
      oprot.writeFieldBegin('warApplyGuild', TType.STRUCT, 3)
      self.warApplyGuild.write(oprot)
      oprot.writeFieldEnd()
    if self.warFightGuild is not None:
      oprot.writeFieldBegin('warFightGuild', TType.STRUCT, 4)
      self.warFightGuild.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tmWarStart)
    value = (value * 31) ^ hash(self.warApplyGuild)
    value = (value * 31) ^ hash(self.warFightGuild)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildWarOpsRet:
  """
  Attributes:
   - opstype
   - tmWarStart
   - warApplyGuild
   - warFightGuild
   - warListInfo
   - winGuildId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I32, 'tmWarStart', None, 0, ), # 2
    (3, TType.STRUCT, 'warApplyGuild', (GuildInfoMsg, GuildInfoMsg.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'warFightGuild', (GuildInfoMsg, GuildInfoMsg.thrift_spec), None, ), # 4
    (5, TType.LIST, 'warListInfo', (TType.STRUCT,(GuildWarOtherInfo, GuildWarOtherInfo.thrift_spec)), None, ), # 5
    (6, TType.I64, 'winGuildId', None, 0, ), # 6
  )

  def __init__(self, opstype=thrift_spec[1][4], tmWarStart=thrift_spec[2][4], warApplyGuild=None, warFightGuild=None, warListInfo=None, winGuildId=thrift_spec[6][4],):
    self.opstype = opstype
    self.tmWarStart = tmWarStart
    self.warApplyGuild = warApplyGuild
    self.warFightGuild = warFightGuild
    self.warListInfo = warListInfo
    self.winGuildId = winGuildId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.tmWarStart = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.warApplyGuild = GuildInfoMsg()
          self.warApplyGuild.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.warFightGuild = GuildInfoMsg()
          self.warFightGuild.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.warListInfo = []
          (_etype388, _size385) = iprot.readListBegin()
          for _i389 in xrange(_size385):
            _elem390 = GuildWarOtherInfo()
            _elem390.read(iprot)
            self.warListInfo.append(_elem390)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.winGuildId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildWarOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.tmWarStart is not None:
      oprot.writeFieldBegin('tmWarStart', TType.I32, 2)
      oprot.writeI32(self.tmWarStart)
      oprot.writeFieldEnd()
    if self.warApplyGuild is not None:
      oprot.writeFieldBegin('warApplyGuild', TType.STRUCT, 3)
      self.warApplyGuild.write(oprot)
      oprot.writeFieldEnd()
    if self.warFightGuild is not None:
      oprot.writeFieldBegin('warFightGuild', TType.STRUCT, 4)
      self.warFightGuild.write(oprot)
      oprot.writeFieldEnd()
    if self.warListInfo is not None:
      oprot.writeFieldBegin('warListInfo', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.warListInfo))
      for iter391 in self.warListInfo:
        iter391.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.winGuildId is not None:
      oprot.writeFieldBegin('winGuildId', TType.I64, 6)
      oprot.writeI64(self.winGuildId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.tmWarStart)
    value = (value * 31) ^ hash(self.warApplyGuild)
    value = (value * 31) ^ hash(self.warFightGuild)
    value = (value * 31) ^ hash(self.warListInfo)
    value = (value * 31) ^ hash(self.winGuildId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildCityWarOpsMsgReq:
  """
  Attributes:
   - opstype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
  )

  def __init__(self, opstype=thrift_spec[1][4],):
    self.opstype = opstype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildCityWarOpsMsgReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildCityWarOpsMsgRet:
  """
  Attributes:
   - opstype
   - attack_result
   - curApplyList
   - tmStart
   - curMaster
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I16, 'attack_result', None, 0, ), # 2
    (3, TType.LIST, 'curApplyList', (TType.STRUCT,(GuildInfoMsg, GuildInfoMsg.thrift_spec)), None, ), # 3
    (4, TType.I32, 'tmStart', None, 0, ), # 4
    (5, TType.STRUCT, 'curMaster', (GuildInfoMsg, GuildInfoMsg.thrift_spec), None, ), # 5
  )

  def __init__(self, opstype=thrift_spec[1][4], attack_result=thrift_spec[2][4], curApplyList=None, tmStart=thrift_spec[4][4], curMaster=None,):
    self.opstype = opstype
    self.attack_result = attack_result
    self.curApplyList = curApplyList
    self.tmStart = tmStart
    self.curMaster = curMaster

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.attack_result = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.curApplyList = []
          (_etype395, _size392) = iprot.readListBegin()
          for _i396 in xrange(_size392):
            _elem397 = GuildInfoMsg()
            _elem397.read(iprot)
            self.curApplyList.append(_elem397)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.tmStart = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.curMaster = GuildInfoMsg()
          self.curMaster.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildCityWarOpsMsgRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.attack_result is not None:
      oprot.writeFieldBegin('attack_result', TType.I16, 2)
      oprot.writeI16(self.attack_result)
      oprot.writeFieldEnd()
    if self.curApplyList is not None:
      oprot.writeFieldBegin('curApplyList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.curApplyList))
      for iter398 in self.curApplyList:
        iter398.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tmStart is not None:
      oprot.writeFieldBegin('tmStart', TType.I32, 4)
      oprot.writeI32(self.tmStart)
      oprot.writeFieldEnd()
    if self.curMaster is not None:
      oprot.writeFieldBegin('curMaster', TType.STRUCT, 5)
      self.curMaster.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.attack_result)
    value = (value * 31) ^ hash(self.curApplyList)
    value = (value * 31) ^ hash(self.tmStart)
    value = (value * 31) ^ hash(self.curMaster)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildRankWarOpsReq:
  """
  Attributes:
   - opstype
   - memberUid
   - mapname
   - x
   - y
   - guildId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I64, 'memberUid', None, 0, ), # 2
    (3, TType.STRING, 'mapname', None, "", ), # 3
    (4, TType.I16, 'x', None, 0, ), # 4
    (5, TType.I16, 'y', None, 0, ), # 5
    (6, TType.I64, 'guildId', None, 0, ), # 6
  )

  def __init__(self, opstype=thrift_spec[1][4], memberUid=thrift_spec[2][4], mapname=thrift_spec[3][4], x=thrift_spec[4][4], y=thrift_spec[5][4], guildId=thrift_spec[6][4],):
    self.opstype = opstype
    self.memberUid = memberUid
    self.mapname = mapname
    self.x = x
    self.y = y
    self.guildId = guildId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.memberUid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mapname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.x = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.y = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.guildId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildRankWarOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.memberUid is not None:
      oprot.writeFieldBegin('memberUid', TType.I64, 2)
      oprot.writeI64(self.memberUid)
      oprot.writeFieldEnd()
    if self.mapname is not None:
      oprot.writeFieldBegin('mapname', TType.STRING, 3)
      oprot.writeString(self.mapname)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I16, 4)
      oprot.writeI16(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I16, 5)
      oprot.writeI16(self.y)
      oprot.writeFieldEnd()
    if self.guildId is not None:
      oprot.writeFieldBegin('guildId', TType.I64, 6)
      oprot.writeI64(self.guildId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.memberUid)
    value = (value * 31) ^ hash(self.mapname)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.guildId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GuildRankWarOpsRet:
  """
  Attributes:
   - opstype
   - job
   - level
   - fightPower
   - invitedStatus
   - mapname
   - x
   - y
   - allFightPower
   - tmRankWarStart
   - uid
   - applyStatus
   - guildId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.STRING, 'job', None, "", ), # 2
    (3, TType.I16, 'level', None, 0, ), # 3
    (4, TType.I64, 'fightPower', None, 0, ), # 4
    (5, TType.I16, 'invitedStatus', None, 0, ), # 5
    (6, TType.STRING, 'mapname', None, "", ), # 6
    (7, TType.I16, 'x', None, 0, ), # 7
    (8, TType.I16, 'y', None, 0, ), # 8
    (9, TType.I64, 'allFightPower', None, 0, ), # 9
    (10, TType.I32, 'tmRankWarStart', None, 0, ), # 10
    (11, TType.I64, 'uid', None, 0, ), # 11
    (12, TType.I16, 'applyStatus', None, 0, ), # 12
    (13, TType.I64, 'guildId', None, 0, ), # 13
  )

  def __init__(self, opstype=thrift_spec[1][4], job=thrift_spec[2][4], level=thrift_spec[3][4], fightPower=thrift_spec[4][4], invitedStatus=thrift_spec[5][4], mapname=thrift_spec[6][4], x=thrift_spec[7][4], y=thrift_spec[8][4], allFightPower=thrift_spec[9][4], tmRankWarStart=thrift_spec[10][4], uid=thrift_spec[11][4], applyStatus=thrift_spec[12][4], guildId=thrift_spec[13][4],):
    self.opstype = opstype
    self.job = job
    self.level = level
    self.fightPower = fightPower
    self.invitedStatus = invitedStatus
    self.mapname = mapname
    self.x = x
    self.y = y
    self.allFightPower = allFightPower
    self.tmRankWarStart = tmRankWarStart
    self.uid = uid
    self.applyStatus = applyStatus
    self.guildId = guildId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.job = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.level = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.fightPower = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.invitedStatus = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.mapname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.x = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.y = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.allFightPower = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.tmRankWarStart = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.applyStatus = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.guildId = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GuildRankWarOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.STRING, 2)
      oprot.writeString(self.job)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I16, 3)
      oprot.writeI16(self.level)
      oprot.writeFieldEnd()
    if self.fightPower is not None:
      oprot.writeFieldBegin('fightPower', TType.I64, 4)
      oprot.writeI64(self.fightPower)
      oprot.writeFieldEnd()
    if self.invitedStatus is not None:
      oprot.writeFieldBegin('invitedStatus', TType.I16, 5)
      oprot.writeI16(self.invitedStatus)
      oprot.writeFieldEnd()
    if self.mapname is not None:
      oprot.writeFieldBegin('mapname', TType.STRING, 6)
      oprot.writeString(self.mapname)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.I16, 7)
      oprot.writeI16(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.I16, 8)
      oprot.writeI16(self.y)
      oprot.writeFieldEnd()
    if self.allFightPower is not None:
      oprot.writeFieldBegin('allFightPower', TType.I64, 9)
      oprot.writeI64(self.allFightPower)
      oprot.writeFieldEnd()
    if self.tmRankWarStart is not None:
      oprot.writeFieldBegin('tmRankWarStart', TType.I32, 10)
      oprot.writeI32(self.tmRankWarStart)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 11)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.applyStatus is not None:
      oprot.writeFieldBegin('applyStatus', TType.I16, 12)
      oprot.writeI16(self.applyStatus)
      oprot.writeFieldEnd()
    if self.guildId is not None:
      oprot.writeFieldBegin('guildId', TType.I64, 13)
      oprot.writeI64(self.guildId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.job)
    value = (value * 31) ^ hash(self.level)
    value = (value * 31) ^ hash(self.fightPower)
    value = (value * 31) ^ hash(self.invitedStatus)
    value = (value * 31) ^ hash(self.mapname)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.allFightPower)
    value = (value * 31) ^ hash(self.tmRankWarStart)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.applyStatus)
    value = (value * 31) ^ hash(self.guildId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChangeApprRet:
  """
  Attributes:
   - nameColor
   - xiongJiaCfgId
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'nameColor', None, 0, ), # 1
    (2, TType.I32, 'xiongJiaCfgId', None, 0, ), # 2
    (3, TType.I64, 'uid', None, 0, ), # 3
  )

  def __init__(self, nameColor=thrift_spec[1][4], xiongJiaCfgId=thrift_spec[2][4], uid=thrift_spec[3][4],):
    self.nameColor = nameColor
    self.xiongJiaCfgId = xiongJiaCfgId
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.nameColor = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.xiongJiaCfgId = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChangeApprRet')
    if self.nameColor is not None:
      oprot.writeFieldBegin('nameColor', TType.I32, 1)
      oprot.writeI32(self.nameColor)
      oprot.writeFieldEnd()
    if self.xiongJiaCfgId is not None:
      oprot.writeFieldBegin('xiongJiaCfgId', TType.I32, 2)
      oprot.writeI32(self.xiongJiaCfgId)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 3)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nameColor)
    value = (value * 31) ^ hash(self.xiongJiaCfgId)
    value = (value * 31) ^ hash(self.uid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DailyLoginOpsReq:
  """
  Attributes:
   - opstype
   - reward_id
   - invite_key
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.I16, 'reward_id', None, 0, ), # 2
    (3, TType.STRING, 'invite_key', None, "", ), # 3
  )

  def __init__(self, opstype=thrift_spec[1][4], reward_id=thrift_spec[2][4], invite_key=thrift_spec[3][4],):
    self.opstype = opstype
    self.reward_id = reward_id
    self.invite_key = invite_key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.reward_id = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.invite_key = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DailyLoginOpsReq')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.reward_id is not None:
      oprot.writeFieldBegin('reward_id', TType.I16, 2)
      oprot.writeI16(self.reward_id)
      oprot.writeFieldEnd()
    if self.invite_key is not None:
      oprot.writeFieldBegin('invite_key', TType.STRING, 3)
      oprot.writeString(self.invite_key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.reward_id)
    value = (value * 31) ^ hash(self.invite_key)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DailyLoginInfo:
  """
  Attributes:
   - seven_login_days
   - seven_login_mask
   - online_time
   - online_reward_mask
   - invite_reward
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'seven_login_days', None, 0, ), # 1
    (2, TType.I32, 'seven_login_mask', None, 0, ), # 2
    (3, TType.I32, 'online_time', None, 0, ), # 3
    (4, TType.I32, 'online_reward_mask', None, 0, ), # 4
    (5, TType.I16, 'invite_reward', None, 0, ), # 5
  )

  def __init__(self, seven_login_days=thrift_spec[1][4], seven_login_mask=thrift_spec[2][4], online_time=thrift_spec[3][4], online_reward_mask=thrift_spec[4][4], invite_reward=thrift_spec[5][4],):
    self.seven_login_days = seven_login_days
    self.seven_login_mask = seven_login_mask
    self.online_time = online_time
    self.online_reward_mask = online_reward_mask
    self.invite_reward = invite_reward

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.seven_login_days = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.seven_login_mask = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.online_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.online_reward_mask = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.invite_reward = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DailyLoginInfo')
    if self.seven_login_days is not None:
      oprot.writeFieldBegin('seven_login_days', TType.I16, 1)
      oprot.writeI16(self.seven_login_days)
      oprot.writeFieldEnd()
    if self.seven_login_mask is not None:
      oprot.writeFieldBegin('seven_login_mask', TType.I32, 2)
      oprot.writeI32(self.seven_login_mask)
      oprot.writeFieldEnd()
    if self.online_time is not None:
      oprot.writeFieldBegin('online_time', TType.I32, 3)
      oprot.writeI32(self.online_time)
      oprot.writeFieldEnd()
    if self.online_reward_mask is not None:
      oprot.writeFieldBegin('online_reward_mask', TType.I32, 4)
      oprot.writeI32(self.online_reward_mask)
      oprot.writeFieldEnd()
    if self.invite_reward is not None:
      oprot.writeFieldBegin('invite_reward', TType.I16, 5)
      oprot.writeI16(self.invite_reward)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.seven_login_days)
    value = (value * 31) ^ hash(self.seven_login_mask)
    value = (value * 31) ^ hash(self.online_time)
    value = (value * 31) ^ hash(self.online_reward_mask)
    value = (value * 31) ^ hash(self.invite_reward)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DailyLoginOpsRet:
  """
  Attributes:
   - opstype
   - dailyInfo
   - items
   - gold
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'opstype', None, 0, ), # 1
    (2, TType.STRUCT, 'dailyInfo', (DailyLoginInfo, DailyLoginInfo.thrift_spec), None, ), # 2
    (3, TType.LIST, 'items', (TType.STRUCT,(Item, Item.thrift_spec)), None, ), # 3
    (4, TType.I32, 'gold', None, 0, ), # 4
  )

  def __init__(self, opstype=thrift_spec[1][4], dailyInfo=None, items=None, gold=thrift_spec[4][4],):
    self.opstype = opstype
    self.dailyInfo = dailyInfo
    self.items = items
    self.gold = gold

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.opstype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dailyInfo = DailyLoginInfo()
          self.dailyInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.items = []
          (_etype402, _size399) = iprot.readListBegin()
          for _i403 in xrange(_size399):
            _elem404 = Item()
            _elem404.read(iprot)
            self.items.append(_elem404)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.gold = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DailyLoginOpsRet')
    if self.opstype is not None:
      oprot.writeFieldBegin('opstype', TType.I16, 1)
      oprot.writeI16(self.opstype)
      oprot.writeFieldEnd()
    if self.dailyInfo is not None:
      oprot.writeFieldBegin('dailyInfo', TType.STRUCT, 2)
      self.dailyInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter405 in self.items:
        iter405.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.gold is not None:
      oprot.writeFieldBegin('gold', TType.I32, 4)
      oprot.writeI32(self.gold)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.opstype)
    value = (value * 31) ^ hash(self.dailyInfo)
    value = (value * 31) ^ hash(self.items)
    value = (value * 31) ^ hash(self.gold)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
